# 1 "matmul.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 375 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 158 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_ReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Read(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_WriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Write(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Return(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_Unroll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_Inline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBindPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_DataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void __xilinx_ip_top(...) __attribute__ ((nothrow)) __attribute__((overloadable));


}
# 2 "<built-in>" 2
# 1 "matmul.cpp" 2
# 1 "./matmul.hpp" 1
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 1
# 55 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h"
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h" 1
# 57 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h" 1
# 100 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 233 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 58 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h" 2
# 162 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 501 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;

template <int _AP_N>
struct ssdm_int<_AP_N, true> {
  int V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, true>(){};
};

template <int _AP_N>
struct ssdm_int<_AP_N, false> {
  unsigned V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, false>(){};
};
# 567 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 568 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 579 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 696 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 56 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h" 1
# 80 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 237 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
           Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 385 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) = default;







  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) half to_half() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 577 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 690 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 708 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 819 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 868 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 977 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1044 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1062_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1284 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    (void)(rd);
    (void)(sign);
    return 0;
  }

};
# 1345 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1364 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1392 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1421 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1455 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1494 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1518 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1549 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1582 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator +=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator -=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator *=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator /=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator +=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator -=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator *=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator /=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator +=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator -=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator *=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator /=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 /= op_rt; }
# 1610 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1647 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1677 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1708 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1740 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1759 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1786 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1817 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1849 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1868 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1976 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 57 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h" 1
# 73 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 116 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 304 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 385 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };



  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_716_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_730_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_744_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 760 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    (void)(radix);
    return 0;
  }

};
# 800 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 838 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 860 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1058 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1117 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1140 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1168 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1217 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1364 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1388 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 58 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }




  inline __attribute__((always_inline)) ap_int(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  ap_int &operator=(const ap_int<_AP_W> &op2) = default;


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }




  inline __attribute__((always_inline)) ap_uint(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  ap_uint &operator=(const ap_uint<_AP_W> &op2) = default;


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 356 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h"
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h" 1
# 61 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 222 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 357 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2







# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 1
# 56 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h" 1
# 62 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 1
# 63 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h" 2
# 133 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 154 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 333 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 477 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 535 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 688 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 848 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1074 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1090_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1144 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1177 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }
# 1192 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1210 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1328 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1350 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1494 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1580 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1763 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    (void)(radix);
    (void)(sign);
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2215 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2303 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 57 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 2
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h" 1
# 71 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 258 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 288 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 300 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  }
# 312 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }



  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 661 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
     (void)(rd);
    return 0;
  }

};
# 725 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 771 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 58 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 112 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) ap_fixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 147 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  ap_fixed &
  operator=(const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 275 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 307 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  ap_ufixed &
  operator=(const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 395 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h" 1
# 61 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 230 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 362 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 396 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 2
# 365 "/home/steffen/tools/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2
# 2 "./matmul.hpp" 2
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/cstdint" 1 3
# 33 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/cstdint" 3





# 1 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 1 3
# 196 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 218 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 495 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
# 1 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/os_defines.h" 1 3
# 39 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 439 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 440 "/usr/include/features.h" 2 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 452 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 453 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 454 "/usr/include/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 40 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/os_defines.h" 2 3
# 496 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3


# 1 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/cpu_defines.h" 1 3
# 499 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3
# 39 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/cstdint" 2 3


# 1 "/home/steffen/tools/Vitis_HLS/2020.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdint.h" 1 3
# 63 "/home/steffen/tools/Vitis_HLS/2020.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 142 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/time64.h" 1 3 4
# 143 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 64 "/home/steffen/tools/Vitis_HLS/2020.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdint.h" 2 3
# 42 "/home/steffen/tools/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 3 "./matmul.hpp" 2







void float_to_fixed(float input[625], ap_fixed<32,24> output[625]);

void hwmm_layer1(ap_fixed<32,24> input[625], const ap_fixed<32,24> weights[625][64], ap_fixed<32,24> output[1][64]);
void hw_act_layer1(ap_fixed<32,24> input[1][64], ap_fixed<32,24> output[1][64]);
void hwmm_layer2(ap_fixed<32,24> input[1][64], const ap_fixed<32,24> weights[64][32], ap_fixed<32,24> output[1][32]);
void hw_act_layer2(ap_fixed<32,24> input[1][32], ap_fixed<32,24> output[1][32]);
void hwmm_layer3(ap_fixed<32,24> input[1][32], const ap_fixed<32,24> weights[32][2], ap_fixed<32,24> output[1][2]);
void hw_act_layer3(ap_fixed<32,24> input[1][2], ap_fixed<32,24> &pred);
__attribute__((sdx_kernel("nn_inference", 0))) int nn_inference(float input_img[625]);

namespace weights{

 const ap_fixed<32,24> layer3_weights[32][2] =
 {{-0.24921641, -0.16441284},
   {0.108491644, -0.37357396},
   {0.29754195, 0.038521647},
   {0.2549102, 0.3136095},
   {-0.36456725, -0.0038557053},
   {-0.4150162, -0.38302672},
   {0.27811816, -0.35106996},
   {-0.111905105, -0.34919754},
   {0.032789037, 0.18321536},
   {-0.17272155, 0.3107306},
   {-0.37371728, -0.058443412},
   {-0.3837971, 0.16422726},
   {-0.0084922, -0.41606092},
   {-0.054801166, 0.171797},
   {0.19107755, -0.0023830745},
   {-0.24757129, 0.22488399},
   {-0.05263039, 0.23350726},
   {0.38673335, -0.17090349},
   {0.14172345, 0.055515606},
   {-0.21879132, 0.04152581},
   {0.19785887, 0.41155094},
   {-0.24659397, 0.08943913},
   {-0.32172734, 0.09618445},
   {-0.11004009, 0.11335238},
   {-0.26680377, 0.12003438},
   {-0.18756746, 0.3013008},
   {0.31101194, -0.096531175},
   {0.30508542, 0.21139498},
   {0.13864234, 0.11052039},
   {-0.17591612, -0.07354993},
   {-0.21045366, -0.139525},
   {-0.35099274, -0.0018854439}};

 const ap_fixed<32,24> layer2_weights[64][32] = {{-0.13917068, 0.03875005, 0.20112437, -0.079598196, 0.03798437, 0.20410633, 0.020293355, 0.23793156, 0.1433594, 0.12491202, -0.08576816, -0.052913263, 0.16148715, -0.0742383, -0.15172014, 0.0032097506, -0.20800723, 0.15855245, 0.05591504, -0.090928316, 0.07380239, -0.17539358, -0.13819084, -0.20185536, -0.20952195, -0.13809034, -0.1639178, -0.0030297274, -0.20591748, -0.09431374, 0.21996862, 0.20014381},
   {0.06348768, -0.022321275, -0.08977276, -0.03353518, -0.058574498, 0.08305676, -0.08839381, 0.22528175, -0.2519197, -0.09841514, 0.2267553, -0.07274274, 0.16054422, 0.09152883, 0.17680751, -0.20390035, 0.1087376, 0.019358205, 0.13844267, 0.11966771, -0.0010657733, 0.15512228, 0.057446674, 0.08356738, 0.15596136, -0.122100815, -0.0024393208, -0.18582393, -0.12795389, 0.012227356, -0.106901586, -0.232072},
   {0.2325961, 0.12497574, 0.11127967, -0.23343837, -0.09769535, -0.22560185, 0.18142939, 0.17413405, 0.074260235, -0.19533539, -0.13312857, 0.051817596, 0.030657718, 0.0073729753, -0.06161903, -0.21857738, 0.15071002, -0.12354196, 0.10977676, -0.17854124, 0.2525196, -0.034813937, -0.19479655, -0.06506054, 0.16911638, 0.061041653, 0.1990166, -0.20948698, -0.23128104, -0.14226711, -0.21716726, -0.07728624},
   {-0.130629, 0.18627204, 0.09818351, -0.028778791, -0.02102536, -0.045513157, 0.23843807, -0.061903406, 0.093666315, 0.2164998, -0.17951325, -0.13727379, 0.022099853, 0.04905671, 0.10466865, -0.0544312, -0.035482813, -0.0992375, 0.13925833, 0.117738366, -0.106155805, 0.045058366, 0.1500386, -0.1414444, -0.15575075, 0.17855632, -0.20936449, -0.107755154, 0.06703645, 0.13177556, -0.07671785, -0.22655863},
   {-0.24884088, -0.026638985, 0.12968868, -0.07826714, 0.14123422, -0.065502755, -0.22635287, 0.010645391, 0.006222953, 0.04575652, -0.14093095, 0.025172174, -0.111802235, 0.0659529, -0.19333138, 0.19476388, -0.23560888, 0.06441786, -0.20663595, -0.032031357, 0.081940874, -0.118995786, -0.099217914, 0.0329567, -0.05657051, -0.20416707, 0.037793078, 0.19584543, -0.24098039, -0.11579174, -0.16708773, -0.094255626},
   {-0.05004867, 0.19778267, -0.15730232, 0.1640291, 0.0632413, 0.20737842, -0.17119515, -0.049326345, -0.09922825, -0.0048243403, 0.16221121, 0.07212042, 0.24849328, -0.19194001, 0.017027516, -0.14541657, 0.2170011, 0.07105478, -0.00022095146, -0.14397901, -0.02070134, 0.13884835, 0.09635891, -0.23136948, -0.185933, 0.18280548, 0.07881929, -0.043369606, -0.04050398, 0.08234918, 0.13921529, 0.06397873},
   {-0.12663522, -0.19666666, -0.19107187, -0.025100842, -0.2380867, -0.20077452, 0.2218647, 0.2503161, 0.21325882, 0.010480583, 0.03226649, -0.10765262, -0.1466211, 0.1781112, -0.17491132, -0.029931333, 0.1435575, 0.20868059, 0.08207802, 0.07156497, -0.08151274, 0.10044665, 0.22165547, -0.09781651, -0.03570718, -0.0041691856, -0.051936816, 0.17358536, -0.2003349, -0.12236756, 0.11257613, -0.026119053},
   {-0.1648835, 0.039881427, 0.22114003, 0.012796856, 0.024709165, -0.08574629, 0.23072946, 0.060420305, -0.012894213, -0.048072815, -0.057898328, 0.18430078, -0.19861448, -0.10093349, 0.25377017, 0.22824788, -0.19626474, -0.17749418, -0.0032023625, -0.17576289, -0.11084494, 0.19427037, -0.021172935, 0.16063972, 0.00523144, -0.08071026, 0.22151697, -0.14273122, 0.14619625, -0.09298664, 0.105651915, -0.06651306},
   {0.10484063, 0.048221793, 0.19263, 0.1022055, -0.21066284, 0.2133456, -0.24993736, 0.0053991675, 0.17040798, -0.01052928, -0.08972082, -0.11886557, 0.012572514, -0.23208857, 0.002075712, -0.15502961, -0.080630906, 0.15637746, 0.07645429, -0.03284508, -0.055680756, -0.0843318, 0.18272674, -0.19488391, -0.044121385, -0.049174286, -0.1511992, 0.2032517, 0.120424986, 0.21079099, -0.04802102, -0.09695017},
   {0.14257279, -0.025683144, -0.07741976, -0.24157569, -0.01063931, 0.09534749, -0.12693262, -0.20374107, 0.09263893, -0.08556962, 0.17006435, -0.07464357, 0.13513233, -0.24572212, -0.10537941, -0.13833672, -0.06831073, 0.10672816, -0.023533523, 0.24999326, 0.106910534, -0.155697, -0.13482383, 0.19787584, -0.16227068, -0.14280777, 0.073315546, -0.23163487, -0.10985899, -0.12575603, 0.022545934, -0.13130766},
   {-0.09329718, 0.24115056, -0.14935297, 0.007159233, 0.08017409, -0.15560687, 0.057312906, -0.010934949, 0.21920145, -0.096925735, -0.06521475, -0.17070621, -0.09285253, -0.030051708, 0.09154159, -0.051836014, -0.12417191, -0.07505596, 0.20135409, -0.16425115, -0.08536881, 0.24297863, -0.13958532, -0.19070542, 0.19106734, -0.031628788, 0.20361811, -0.008884966, 0.23664975, -0.16945308, -0.19856966, -0.08011043},
   {0.1302011, -0.1764826, -0.07199359, -0.014129478, -0.20032221, -0.13661972, 0.1997965, 0.16041918, 0.13978262, -0.075104, -0.1766488, -0.22270723, -0.17899238, 0.17146683, 0.030920494, 0.075351536, 0.19329411, 0.082146674, -0.058297377, -0.18001264, -0.18558519, 0.09766087, 0.13108492, 0.23971441, -0.105870984, -0.24574266, -0.036593527, -0.051894758, -0.2468887, -0.043290496, 0.11799222, -0.12639672},
   {-0.037517786, -0.03778094, 0.14451498, 0.03117311, -0.13249344, -0.0021113753, -0.06833446, -0.105826855, 0.1807068, 0.17391515, -0.23085529, -0.09517461, -0.023178518, 0.1329447, 0.1980614, -0.16991818, 0.12867367, -0.064370155, 0.1075027, 0.17665958, -0.11890817, -0.09551799, 0.22384447, 0.12752634, 0.050043225, -0.12596083, 0.008135021, 0.077875316, 0.17902517, 0.049643397, -0.2164694, 0.2238028},
   {0.2387854, -0.16566479, 0.23933595, 0.1355081, 0.14871275, -0.18492971, 0.022064507, 0.04259971, -0.057810817, 0.16623306, 0.24200061, -0.21356718, -0.14473842, 0.0640527, -0.031469025, -0.17160402, 0.16653086, -0.15685521, 0.054823164, 0.18068403, 0.21699168, 0.20704652, 0.11293121, -0.09252843, -0.011761547, 0.13770646, 0.15229958, -0.10011108, -0.007603824, -0.11994481, -0.0005123019, 0.09468478},
   {0.16466123, 0.22215366, 0.21325672, 0.23954892, -0.14227015, 0.069024265, 0.108226, -0.2409491, 0.13091743, -0.015883684, 0.0009947419, 0.12336707, -0.045868635, 0.1350596, 0.11147493, -0.16435385, -0.113650024, 0.17669004, 0.15643853, -0.17866486, 0.10813159, -0.231947, -0.18159318, -0.10698551, -0.024342477, -0.14041108, 0.08566201, -0.24901414, 0.06576294, 0.19641888, 0.0076636076, -0.21015167},
   {0.08343071, -0.0625667, -0.12812972, -0.2421177, -0.030530393, 0.21776718, -0.24394923, -0.17003012, 0.20830482, -0.07276279, 0.17945701, 0.0347386, -0.1833247, -0.15944129, -0.16833293, -0.22812253, 0.1256926, -0.17504352, 0.22083539, -0.18970126, 0.24523807, -0.045396447, -0.24245834, -0.11074412, 0.1710161, -0.055635154, -0.03644508, 0.09835905, 0.04346651, 0.107488155, 0.024756849, 0.09283084},
   {-0.24662995, 0.08851822, -0.17001498, -0.01980207, -0.18253571, -0.18776643, -0.14970577, -0.024418354, -0.24443388, 0.2447812, -0.21920417, 0.19277304, -0.21835072, 0.06873602, 0.20769325, 0.19618058, 0.2139035, -0.08169645, 0.055589166, -0.042891026, -0.08065297, -0.117712654, -0.029346228, 0.011150249, 0.24852574, -0.04735613, -0.23704225, -0.17290266, 0.17477256, 0.10519457, 0.059034824, 0.24633753},
   {-0.040861607, 0.11249876, -0.06201595, 0.08541328, 0.003471017, 0.1933344, -0.1134277, -0.1809302, 0.18189073, -0.14642668, -0.12289274, -0.196361, 0.027868867, -0.19340563, 0.19062793, 0.17646754, -0.19572824, -0.23789847, 0.12874222, -0.0013767481, 0.07535499, -0.025493622, 0.01238066, -0.0038428307, 0.050567865, 0.23192465, 0.11378223, -0.24856889, -0.11585361, -0.21145135, -0.16571695, -0.110682905},
   {0.1699081, -0.15445912, 0.054565966, -0.24969679, -0.13862556, -0.18653047, 0.0050413013, -0.12243223, 0.22132456, 0.19353211, 0.15723377, 0.050865114, 0.17735153, -0.14220893, -0.056455135, 0.025534153, 0.05253744, 0.21796203, 0.24746025, 0.09226012, 0.08019656, 0.112414, -0.19841313, 0.07680285, 0.24345529, -0.11418235, -0.2261858, 0.23068225, -0.12871212, -0.13321346, 0.24256349, 0.017459571},
   {-0.19070113, -0.008850634, 0.1943214, -0.044605844, -0.02222681, 0.08470607, -0.18160701, 0.20594859, -0.21623689, -0.16802287, -0.087071344, 0.17914891, 0.03161654, 0.018650532, -0.20407026, -0.21466112, -0.1873081, 0.086713746, 0.03759409, -0.16547674, -0.05226687, -0.21093293, 0.19954295, 0.095743075, -0.17086053, 0.20586318, 0.12772219, -0.053929504, 0.22443569, 0.22875291, -0.060756207, -0.23546773},
   {0.21851373, 0.14639586, 0.10530174, -0.033872634, -0.23765063, 0.122076035, -0.23084432, -0.23887312, -0.13925022, -0.13294291, 0.15257363, 0.05970335, -0.111322515, -0.23758996, 0.23655364, 0.21019363, 0.08674735, 0.19896847, -0.16110776, 0.0015323162, 0.10835832, -0.15467374, 0.18363635, 0.096510954, -0.09251827, 0.034195542, 0.1974886, 0.2425948, 0.1618166, -0.20811725, 0.11376059, 0.048143327},
   {-0.17566064, 0.17569293, 0.22722292, -0.060720805, 0.059583426, 0.16097666, 0.012096286, 0.16855776, -0.09119906, -0.21070665, -0.053146876, 0.03851738, -0.20286763, -0.14625072, 0.14357133, -0.1930048, 0.07039527, -0.09988789, 0.14059643, 0.053308606, 0.105829544, 0.022188744, -0.13072641, -0.16846988, 0.23234747, -0.11088364, 0.12369642, 0.040458847, -0.09241682, 0.05533856, 0.0634684, 0.24068528},
   {-0.113443606, 0.15150645, -0.04683858, 0.20963366, -0.17994428, 0.13305056, 0.00603348, 0.0048696087, -0.035002366, 0.080804884, 0.10372811, 0.1644582, 0.028887356, -0.016185045, -0.10194232, 0.14199005, 0.23534346, -0.21582076, 0.23516469, -0.004711807, 0.047270834, -0.15697533, -0.19699353, -0.07752797, 0.02534999, -0.2509201, 0.13007835, -0.046603885, -0.0020793676, 0.07424325, -0.022669196, -0.12217337},
   {0.1393615, 0.012319744, -0.073702455, 0.11400968, -0.18567413, -0.16010308, -0.09813303, 0.065482736, -0.087996244, -0.07252884, -0.009292662, 0.036926687, -0.16516596, 0.011102378, -0.2361967, 0.1476363, 0.23834234, 0.026878715, -0.20172894, -0.14917737, 0.10604805, -0.078853905, 0.1568976, -0.019365191, 0.079689145, 0.15770143, -0.047100246, -0.2393151, -0.16961664, 0.035442293, 0.11324859, -0.1824246},
   {-0.10168444, 0.1914464, -0.18610746, -0.0955881, -0.22364259, 0.1605215, 0.09665316, -0.22214504, 0.042344708, 0.12480247, 0.14263281, 0.23932624, 0.10249878, -0.17218351, -0.21663387, -0.056318518, -0.14482287, -0.121268794, -0.21231976, -0.10578066, -0.1627401, 0.12803218, -0.18517248, 0.1909014, 0.23321672, 0.13935643, -0.047566008, -0.13118157, 0.18109292, 0.03263831, -0.10166305, 0.17768419},
   {0.14509986, -0.117341295, -0.14169914, -0.15406407, 0.10836899, 0.027936228, -0.023039103, -0.10626676, -0.21866617, -0.09377706, -0.097521946, -0.08064488, 0.07452626, -0.23250604, -0.076906465, 0.1060487, -0.17801073, -0.038596414, -0.08800716, -0.17664975, -0.058459725, -0.23378225, 0.18500511, 0.09309079, 0.12415513, -0.15625179, -0.08076945, 0.028825147, -0.10389292, -0.0562914, 0.16683578, -0.17225969},
   {-0.16346678, -0.1980779, 0.08503139, 0.0412997, -0.0069079995, -0.2285812, 0.008307278, 0.21523128, -0.19848853, 0.11320615, -0.11249233, 0.11303419, -0.0006365463, -0.05043441, 0.06387261, -0.08060753, 0.057067826, 0.026126621, 0.20718344, -0.24216628, 0.23056841, 0.1747941, 0.050394706, 0.1318628, -0.03939368, -0.1825161, 0.049569335, 0.110353224, -0.16821653, 0.05487317, -0.24471992, 0.09791511},
   {0.24042328, 0.16625965, -0.026991487, -0.06843341, -0.085709095, 0.23635206, -0.051199675, 0.0703491, 0.13165478, -0.14968729, 0.13050532, -0.008841265, 0.009025929, -0.028401315, -0.06594177, -0.1849885, 0.1012189, 0.056203764, 0.020075481, -0.13348031, 0.09631854, -0.08013122, -0.1260363, -0.16769837, 0.007901356, 0.05634818, -0.062439788, -0.21202864, 0.109749496, -0.024214387, 0.10945696, -0.1179263},
   {-0.12978375, 0.18382049, 0.06714338, 0.027900934, 0.04210913, -0.193111, -0.15059131, -0.16509628, 0.13634169, -0.16044044, 0.020719886, 0.06274623, -0.08192593, -0.07052165, -0.028769135, 0.1611306, -0.20706558, -0.15497917, 0.109063625, -0.04839742, -0.05000317, 0.13516402, 0.042461157, -0.18150216, 0.16014719, -0.24098557, -0.017610133, -0.15068287, 0.2338841, -0.07607585, -0.059294343, -0.039484203},
   {-0.19390982, 0.22529572, -0.10123891, -0.24675333, 0.016537428, -0.14110601, 0.0111503005, -0.010515511, 0.10122168, -0.06819403, -0.24409729, 0.046172023, 0.06607616, -0.16175091, 0.15965617, -0.012856245, -0.12471527, -0.19437116, -0.17701018, 0.054899037, -0.09793502, -0.1021018, 0.08733171, -0.0866043, -0.22657943, 0.048099935, 0.14547199, -0.11665696, -0.11852974, -0.026803613, 0.20311373, -0.1501208},
   {0.16764802, -0.18649213, 0.16909212, 0.13956295, 0.10401636, -0.12189263, -0.10487765, 0.06964257, 0.040717155, -0.08988023, -0.060155876, -0.0018260226, -0.05642318, 0.051676214, 0.23396002, 0.031075105, 0.012958352, -0.051781684, 0.108600594, -0.16573799, -0.15957175, 0.22893602, 0.20832044, 0.012891636, 0.0030417258, 0.10569258, -0.22704844, 0.19599262, -0.0014749765, 0.00035095215, 0.16932386, -0.1612916},
   {-0.14535731, 0.04305091, -0.24424577, -0.21827424, 0.16991293, -0.044640712, -0.097399116, -0.047616214, 0.04139956, 0.15202504, 0.21834835, 0.14651027, -0.15762, -0.09148812, 0.12801564, 0.20939146, -0.12590092, -0.10509428, 0.045945328, 0.24870658, 0.19871485, 0.14871512, 0.0061667277, 0.07804618, 0.029613568, -0.050137687, 0.23236486, 0.11161028, -0.18761867, -0.21207988, -0.12681979, 0.096000135},
   {-0.12577349, -0.13352609, -0.09468758, -0.16473943, 0.23609883, 0.046486855, 0.088525236, -0.21724916, -0.034433067, -0.07933867, -0.055003047, 0.1702249, -0.0045580864, 0.24593699, -0.046141446, -0.030249178, 0.09446609, 0.15332764, 0.24144208, 0.132177, -0.20889992, 0.05501038, 0.09835172, -0.07857609, 0.17086887, -0.0031141639, 0.20390737, 0.17763138, -0.0557428, 0.12116969, 0.02620089, -0.13328934},
   {-0.22768989, -0.14152984, -0.1783657, -0.1784921, 0.24713802, -0.202518, -0.07299411, -0.24346419, -0.13038412, -0.24904478, 0.2399017, 0.011043318, 0.047093987, -0.12186527, -0.23848157, -0.21143813, -0.15220092, 0.118793614, -0.109792516, -0.13414282, 0.18043184, 0.06659239, -0.12394796, 0.13753074, -0.2301805, -0.14021784, -0.042322416, -0.12528658, -0.18800002, 0.05960697, -0.09770256, 0.116247654},
   {0.1065263, 0.20317082, 0.040922105, 0.016694603, -0.18727237, 0.14808425, -0.16530663, 0.1586648, 0.077150315, -0.15308398, -0.076363996, 0.16485144, -0.19180077, 0.15383708, 0.0035506051, -0.06279644, 0.05889484, 0.17497714, -0.038539987, 0.20385331, -0.05819158, 0.048866957, 0.21932521, -0.037587, -0.17591262, 0.16619858, 0.23284104, -0.20173642, 0.16461354, -0.12430692, -0.040571332, 0.08159417},
   {0.15277767, 0.17223051, -0.013419747, -0.15099937, -0.079347014, -0.09897552, 0.08965695, -0.13507564, 0.056190655, -0.16240025, 0.07940683, 0.004793836, -0.19032118, -0.2306171, 0.25133753, 0.23995571, 0.13750343, 0.1715006, 0.053402066, 0.23230731, 0.15240002, 0.19204634, 0.03895081, 0.030437246, 0.04069105, 0.20607555, 0.022865593, -0.13345534, -0.1032449, -0.060266614, -0.20378113, -0.008631825},
   {0.08519402, 0.20248745, 0.11551231, 0.11844955, -0.082960725, 0.14227171, -0.11367929, -0.19491866, 0.17406662, 0.058585405, -0.021482706, 0.16709523, -0.114793114, -0.20007807, 0.22551592, 0.22758709, 0.19676155, -0.09003848, -0.20804417, -0.1178838, 0.123746544, 0.23935337, -0.014845835, -0.19625393, 0.020476758, 0.08369168, 0.147827, -0.10224119, 0.24637121, 0.15815705, -0.090537846, -0.09787899},
   {0.23622781, 0.117913455, 0.02553606, 0.028406631, -0.19059944, 0.09782203, -0.19207686, 0.11010414, 0.20009753, -0.010806859, -0.00025027883, -0.07772938, -0.2512171, 0.11228222, 0.19901513, 0.0051527363, 0.21107858, 0.06481452, 0.058275305, -0.24682975, -0.11110163, -0.15553175, -0.11079422, -0.012145053, -0.14849874, -0.05772841, 0.11308523, 0.057268534, 0.16670752, -0.106669426, -0.15562624, 0.23809618},
   {0.0008310167, -0.21880873, -0.18311149, -0.10966505, -0.21496445, 0.2515905, -0.023149371, -0.013832954, -0.031086855, -0.23000962, 0.0586942, 0.13539504, -0.07580284, 0.20562655, 0.23850904, 0.17795251, -0.17522869, 0.18531199, 0.19148809, 0.007958233, 0.051573582, 0.03354388, 0.18974863, -0.21890013, 0.2110455, 0.109003924, 0.16520733, 0.052953582, -0.20136106, -0.09480542, -0.1477552, 0.18028688},
   {0.1582402, 0.2440489, -0.064246714, 0.0014259815, -0.014225781, 0.22995192, 0.12999266, 0.008097768, -0.030558527, 0.1632945, -0.030627012, 0.022752285, 0.20031184, 0.08596718, -0.11672312, -0.18798727, -0.0043192506, -0.032500744, 0.051495314, 0.21667701, 0.1328119, -0.16413653, -0.09644973, -0.0198071, 0.069529235, 0.036287963, 0.13149506, 0.22699988, -0.16297185, -0.20443952, 0.036669016, -0.025183022},
   {-0.09985627, 0.08465544, 0.10362679, -0.08934835, 0.03003192, 0.04354152, -0.18627983, -0.14239946, 0.19626352, -0.058273435, 0.07656198, 0.024784312, -0.1865113, 0.23558146, 0.052625246, -0.11442876, 0.06200515, -0.097228184, -0.23307762, 0.20853025, 0.0030717286, 0.061161418, -0.09320169, -0.1350658, -0.14819074, 0.208985, 0.06761755, 0.2237518, -0.059867144, -0.048199713, -0.21936953, -0.13873744},
   {-0.16197848, -0.2208798, 0.20064926, 0.16666383, -0.076577365, 0.124448955, -0.1380446, 0.08471775, -0.21756202, 0.22864085, -0.05642861, -0.13411105, 0.07468462, 0.15638983, -0.15723532, -0.01902461, 0.12170094, 0.1645937, 0.079059124, -0.17039806, -0.180929, 0.18613726, 0.11493862, 0.19893014, -0.09326333, 0.17489278, 0.074885905, -0.011747777, 0.09885287, -0.21042377, 0.23938757, -0.16874063},
   {0.006383261, -0.06692186, -0.12827396, -0.1324209, -0.2282288, -0.05326394, -0.23534572, 0.16441867, -0.033674505, -0.11256492, 0.08826072, 0.093099535, -0.13449942, 0.07095748, 0.030540518, -0.15069188, 0.17317484, -0.08018381, 0.109284215, 0.19723743, -0.086869664, 0.110912524, 0.10462054, -0.040410668, -0.19486493, -0.098856896, 0.18589972, 0.050703045, 0.07669383, 0.14295065, -0.14356387, -0.22185063},
   {-0.13533431, 0.21427321, -0.20966929, -0.17103511, 0.18689293, 0.01006633, 0.05408472, -0.14578187, -0.09999591, 0.14784348, -0.048970878, 0.14091218, 0.1867634, -0.17520654, 0.13260174, -0.20622998, -0.08975965, -0.21113753, 0.10142988, 0.016434968, -0.12936628, -0.044158757, -0.22188848, 0.14576977, -0.2400341, 0.08655006, 0.15451437, -0.16273361, 0.11591315, 0.2265389, -0.14031374, -0.18816602},
   {0.026673058, -0.13391489, -0.09695387, 0.13415301, 0.021029353, -0.18738037, -0.044258893, 0.08873303, 0.07561917, -0.09589076, 0.22977488, 0.016380446, -0.101378754, -0.09729737, 0.011661402, -0.20507914, -0.21907409, -0.21800448, 0.19309121, -0.1394965, -0.064080596, -0.07815049, 0.011497174, 0.20604096, -0.004515258, 0.19646585, 0.11978941, 0.17905687, 0.017254114, -0.047169745, 0.06561893, -0.08582741},
   {-0.2498036, 0.2520365, -0.2293089, -0.16913459, 0.1502949, -0.15536433, 0.061138332, -0.21326716, 0.14469974, -0.05955571, 0.22611457, -0.12816179, 0.040950347, 0.23835438, 0.17347479, -0.13906497, 0.18398035, -0.22282827, -0.1611131, -0.23555607, 0.15274423, 0.05762709, 0.1914679, 0.10991557, -0.032535136, 0.14496382, -0.20859998, -0.06033053, -0.076343834, -0.02931124, 0.053730547, 0.026526451},
   {0.19118574, -0.124819204, 0.15104753, -0.11252238, 0.04955578, -0.22525711, -0.1497497, -0.1493828, 0.21270625, -0.017849267, 0.20180993, 0.005599756, -0.1996311, -0.13779181, 0.15127149, 0.05450404, 0.16386369, 0.061550893, -0.08815495, 0.2412507, 0.009464867, 0.16671991, -0.14204212, 0.13646087, 0.14453226, -0.007889927, 0.22246327, 0.14320615, 0.09604561, -0.06403446, 0.053567767, -0.09576756},
   {-0.095211685, -0.15633135, -0.18536532, 0.007273132, 0.042935014, 0.07751747, 0.061182916, -0.18544683, 0.014840911, -0.24313718, -0.09708671, 0.10001081, -0.09295024, 0.17123967, 0.010766353, 0.12565921, -0.10330032, -0.16555117, -0.15103805, 0.07558119, 0.010971568, 0.17341016, -0.2473219, 0.09277944, -0.22896981, -0.017318228, -0.17893557, 0.00053577946, 0.17332816, 0.12790608, 0.2217598, -0.12238884},
   {-0.21761006, 0.20907225, -0.16764826, 0.045588054, 0.025776863, -0.20439582, -0.19087404, -0.13723962, 0.23885158, -0.01764667, -0.13990279, -0.0020421622, 0.19954678, -0.066505015, -0.11236012, -0.1282884, 0.16764249, -0.022152454, -0.16957901, -0.012448788, -0.20723005, -0.13427651, -0.13846868, 0.08577768, -0.046256036, 0.24376822, -0.044352155, -0.21494772, 0.046001613, -0.13411695, -0.023766875, 0.054528236},
   {0.1264616, -0.059692696, -0.08703339, 0.10232365, 0.092128575, -0.10427774, -0.022432923, 0.056777976, -0.060129035, 0.12746698, 0.20044625, -0.22831625, 0.071332954, -0.13353497, 0.0008125111, -0.16514273, 0.023881778, -0.09638988, -0.21957566, -0.07473296, -0.027721075, 0.16388893, -0.14640902, 0.19539084, 0.031073965, 0.23857158, -0.07436197, 0.061934635, -0.15772766, 0.23676139, -0.22300982, -0.0020912886},
   {0.166798, -0.09963354, 0.043349028, 0.10242402, -0.18180007, 0.11505118, 0.1952495, -0.009257021, 0.13903935, -0.16446573, -0.23975706, -0.06526291, 0.036747687, 0.043626666, 0.09362707, 0.1455224, -0.016524162, -0.14224954, -0.10928686, -0.12940228, 0.07778141, 0.23025572, -0.12192429, 0.1680596, -0.053708203, 0.07679517, 0.048574425, -0.10519913, -0.0438987, -0.187819, 0.15288216, -0.21039242},
   {0.13804656, 0.04465115, -0.231673, -0.1514256, -0.14812058, -0.14889449, -0.12480855, 0.14157546, 0.039134145, 0.19669664, 0.20478821, 0.12045634, -0.1613949, -0.19915462, 0.09534675, 0.14224964, -0.15212816, -0.14967036, -0.09233636, 0.24100524, -0.10423511, -0.03694427, -0.20162785, -0.18614203, -0.21791494, 0.22938222, 0.13069588, 0.2225368, 0.10998577, -0.056541324, 0.060109377, 0.16436398},
   {-0.1736132, 0.080017984, -0.13953906, 0.012264887, -0.13544768, 0.15099797, 0.004626155, -0.17135741, 0.024426108, 0.030524075, -0.16185293, -0.033388, 0.13591988, -0.17447168, -0.11953275, 0.14475161, -0.2417541, -0.24987149, -0.05773595, -0.17459166, -0.20449232, 0.20398848, -0.11904039, 0.17683868, -0.1554063, -0.017965317, 0.20139, 0.1446536, 0.13587916, -0.020015419, -0.07851839, -0.20741451},
   {0.08793688, 0.0074312687, -0.20211154, 0.17042476, -0.0017284751, -0.13187468, 0.23778284, 0.23803294, -0.090518296, -0.14349186, -0.030669391, 0.2339251, 0.14265412, -0.19818103, -0.05083716, 0.021487951, 0.13197637, -0.16761672, -0.021982133, 0.03266555, -0.06610775, -0.019705236, -0.15327346, 0.1625346, 0.21933413, 0.19286257, -0.0665552, 0.21716166, 0.014157772, 0.12586671, 0.19608533, 0.22370476},
   {-0.22422814, -0.11294341, 0.014517784, -0.114373684, 0.0437423, -0.20869726, 0.18713921, -0.19397783, -0.13711333, -0.21993577, 0.22506833, 0.17580813, -0.1488741, 0.013005495, -0.2303099, 0.20249152, 0.15520716, 0.086230755, 0.22599334, -0.16129571, -0.042668283, -0.13208383, -0.20816576, 0.12419462, 0.017849088, -0.13942635, 0.18836862, 0.19305742, -0.20563745, 0.017349243, 0.18033308, -0.101890266},
   {-0.096146554, -0.10162929, -0.21574509, 0.077757634, 0.014257848, 0.0050470545, 0.08404338, 0.21873134, 0.13172656, 0.24197406, -0.18500051, -0.16894591, 0.16233885, -0.1557743, -0.03483469, -0.24245888, 0.042835385, -0.10907023, 0.1345551, 0.18840235, -0.15703902, 0.15759964, -0.005009275, 0.10030543, -0.1062397, -0.11064029, 0.11145489, -0.2199336, 0.022540689, -0.039585292, 0.0015669465, 0.06849891},
   {-0.008665562, 0.09557688, 0.17975998, 0.13313389, -0.19761151, 0.24309123, -0.105280995, -0.05242158, -0.049639348, -0.13361245, -0.24636382, -0.06752085, 0.22425246, -0.07979715, 0.20559745, 0.06542057, -0.042705663, -0.10895896, 0.15411398, -0.19224566, -0.15959416, -0.19440834, -0.009012251, -0.20486186, -0.1954144, 0.08619673, 0.21536936, 0.13823204, 0.041397393, -0.19322765, 0.016624033, -0.05330181},
   {0.14393057, 0.2328653, 0.2403217, -0.17712702, -0.10715628, 0.01734158, 0.14486468, -0.18148853, -0.05340587, -0.031475604, 0.011494215, -0.19958639, 0.1560342, -0.007656634, -0.035649657, -0.21877182, -0.24322106, -0.08300453, -0.12454579, -0.016540706, 0.11250681, -0.193514, -0.049501278, 0.13537958, -0.10376407, 0.21403575, -0.17578888, 0.22817539, -0.09136754, 0.11673093, 0.10905981, -0.20855314},
   {0.048404098, -0.018881142, -0.12822193, -0.12662482, 0.15891516, -0.084922016, -0.04598075, -0.107859075, -0.2244274, -0.04558158, 0.13975471, -0.1661669, -0.10318977, 0.22867906, -0.1289674, 0.24545985, 0.16436791, -0.16422856, -0.16786838, 0.14690161, 0.07443762, 0.047185063, -0.121955276, 0.14786822, 0.19283313, 0.009857237, 0.058428943, 0.13182831, -0.111715615, 0.15295094, -0.022218823, 0.10035348},
   {0.0684188, -0.09812845, 0.016499877, -0.12102501, 0.033058107, -0.07523899, 0.097504854, 0.10939474, -0.14056802, -0.14085245, 0.1744641, 0.20675313, -0.055987384, -0.035790086, 0.111884914, 0.09088975, 0.032131344, -0.2160925, -0.17905925, -0.22171926, -0.15696427, -0.13346836, -0.19626117, 0.179682, -0.18196744, 0.10491338, -0.17462593, 0.1287322, -0.24264306, 0.08963847, -0.24638194, 0.21919072},
   {-0.20690024, -0.22661489, 0.08485752, 0.1820064, -0.19383192, -0.16267842, 0.025340557, 0.20618188, -0.19831884, -0.018591166, 0.22868706, 0.085540906, 0.24071155, 0.06620711, 0.22357482, -0.13579269, 0.0548283, 0.24491386, 0.05385141, -0.12177491, 0.111781254, -0.22122051, 0.109030835, -0.0066593965, 0.0929583, 0.19518282, 0.09074361, 0.18147466, -0.1445911, -0.11498201, -0.09534854, -0.023838758},
   {-0.06861472, -0.015578568, 0.21802276, 0.14017802, -0.119568646, 0.18064034, 0.19837284, -0.112596095, 0.11807823, 0.14158922, -0.16981274, 0.15158105, 0.18206728, -0.010259569, 0.17107439, -0.034730434, -0.09601122, -0.120453775, -0.06522393, -0.101691365, -0.21284634, 0.06653702, 0.13559991, -0.13423419, -0.11999643, 0.062400877, -0.034277916, 0.023706257, -0.072954476, 0.14849722, -0.24560714, 0.10626739},
   {0.21286318, -0.13134827, 0.2274918, 0.15868896, 0.010319948, -0.16439208, 0.09688079, -0.1766582, -0.24582337, 0.21500003, 0.010000947, 0.22609766, 0.21766192, 0.16098696, 0.120762415, 0.18103765, -0.24248382, 0.14724772, 0.059371132, 0.022041678, 0.21074331, 0.2279591, -0.020973084, -0.004588698, 0.082344174, -0.01263906, 0.016067201, 0.11282103, 0.12759066, -0.14687383, 0.08592439, 0.0712719},
   {0.22675341, -0.073860705, 0.2127896, 0.00011488714, 0.24060065, 0.1730724, 0.16654998, -0.024750648, 0.11554041, -0.07093823, -0.034122173, -0.09249518, -0.035433676, 0.1719473, 0.20127653, 0.065184206, -0.09612548, -0.004203818, 0.11650617, 0.15535456, -0.06342202, 0.14292204, 0.039509237, 0.15694669, -0.00884676, 0.24940181, -0.041572064, -0.04811528, -0.23679292, 0.037555456, -0.12540066, 0.21744525}};


 const ap_fixed<32,24> layer1_weights[625][64] = {{0.027129063, -0.07439418, 0.0699734, -0.08124446, -0.017400276, -0.008653817, -0.032310575, -0.08198576, 0.010836466, 0.0050993236, 0.07944935, -0.06689705, -0.08082991, -0.07199544, -0.065616466, 0.08865174, -0.056062214, 0.089762755, -0.049012072, -0.05621529, 0.02074859, 0.021263802, -0.035672285, -0.08884132, 0.026015395, 0.018106902, 0.026572658, 0.013312275, 0.03288246, 0.057874314, 0.047260746, -0.013524457, 0.07749627, -0.0048124855, -0.0018059536, 0.0857069, -0.038497012, -0.08717346, 0.026047438, 0.038081624, -0.07417827, 0.031335264, -0.05988021, -0.05530367, 0.076701045, -0.017755263, -0.02475866, -0.029297236, -0.0068805534, -0.0372194, 0.05469541, 0.06786949, -0.06875423, 0.009585418, -0.024406083, -0.045392837, -0.06833306, -0.08193581, -0.017279424, 0.06341475, -0.016105667, -0.08737152, -0.087709635, -0.06906644},
   {-0.0063366964, -0.07057132, 0.032231975, -0.07318568, 0.056175254, 0.04806513, 0.049853068, -0.06362562, -0.009627463, -0.038352333, -0.024319313, -0.07441918, -0.041330904, -0.017987719, 0.06214813, 0.033553354, -0.07950293, 0.082317, -0.027988873, 0.0116043035, -0.06280663, 0.053946223, -0.027949162, -0.037632313, 0.002863235, -0.00991291, 0.018203743, -0.07367158, 0.049376152, -0.011863783, 0.0018585845, -0.025298612, -0.048405215, 0.06617895, -0.0064593013, -0.096029, 0.02535524, -0.05570083, 0.08173148, -0.022036523, -0.04769986, -0.092051595, -0.028224068, -0.059294097, 0.012217303, 0.050255474, 0.05908623, 0.050422102, -0.0051175933, -0.07068218, -0.011163926, -0.06204761, 0.045267053, -0.06963215, -0.06546299, -0.063005775, 0.08316726, -0.0037372755, -0.068706155, 0.0027256433, 0.09296608, -0.08855471, 0.08342174, 0.07366389},
   {0.059272733, 0.048883375, -0.07305657, 0.009236444, -0.050423518, 0.035436913, 0.0007706639, -0.039405983, -0.02014555, -0.05936163, 0.07447866, 0.021679131, -0.00033491105, 0.08902977, -0.07026838, -0.0044691563, -0.052882534, 0.047245808, -0.051919274, -0.063517675, 0.060806833, 0.08132872, 0.039800923, -0.01284878, -0.0703194, 0.07294456, -0.04575664, -0.07994881, -0.05463, 0.08106428, -0.06881331, -0.093487926, -0.021857418, 0.08250268, 0.01287785, -0.091545485, 0.04580147, -0.05841771, 0.07560889, 0.06707794, -0.097735845, 0.0057196915, -0.064239025, 0.050570644, -0.06457718, -0.09359557, -0.08184348, 0.020414332, -0.05812518, -0.06444668, 0.046913274, 0.06399024, -0.031035705, -0.04006546, 0.018715113, 0.019435344, -0.019221704, -0.06713359, 0.07712636, -0.09332711, 0.0064011626, 0.04713828, 0.028526716, -0.01744336},
   {-0.001071935, -0.028554117, -0.08078162, 0.035687666, 0.08905513, -0.06394483, -0.037660252, -0.0981339, -0.045744926, 0.06980912, -0.017997593, -0.035002008, -0.07723856, -0.064891696, -0.01772026, -0.088268876, 0.069563225, 0.05307933, 0.032490246, 0.0008654199, 0.03265085, 0.086696334, 0.033234317, -0.022207461, 0.013929084, -0.063422196, 0.011687611, 0.07391481, -0.058864363, -0.014661431, -0.07075918, 0.0032893752, -0.024518304, -0.08330091, -0.023161113, 0.05446538, 0.02294252, 0.035311744, -0.02986425, 0.06017048, -0.052022897, 0.064198025, 0.026669841, -0.05503228, 0.01708567, 0.007440924, -0.07011284, 0.016586488, -0.047190566, 0.035621557, -0.019227948, 0.09208112, 0.0459757, 0.032089494, 0.010574535, 0.030129699, 0.047678076, -0.0632327, 0.054121725, 0.032404058, -0.060446557, -0.07176541, 0.046531994, 0.083952464},
   {0.06316062, 0.05927737, 0.04409758, 0.08288239, -0.049699664, -0.047350373, 0.012550942, 0.00093749294, 0.04440066, 0.063947015, -0.04869151, 0.033778124, -0.055719588, -0.02957711, -0.06766769, -0.064661525, 0.04042716, 0.087555, 0.06014725, 0.082939126, -0.050892368, 0.086048454, -0.028518913, -0.036948387, -0.045718715, -0.063130446, -0.03950109, 0.0062426515, 0.06649075, -0.037333112, -0.001291144, 0.0049631605, 0.066100396, 0.07533272, -0.05984383, 0.069247015, -0.03885094, -0.07576306, -0.09239491, 0.07715873, 0.030062584, -0.040078476, -0.024351943, 0.055435292, 0.016461603, 0.058052145, -0.089534506, 0.067414135, -0.007323209, -0.041509684, -0.06730762, 0.06533631, 0.036151595, -0.01135128, -0.07513625, -0.04422698, 0.04241722, 0.083612844, 0.013345391, 0.063364856, 0.07002713, -0.06164161, -0.03512885, 0.054881647},
   {-0.010189948, -0.069178246, -0.010997898, 0.012932542, -0.048677832, -0.03524587, 0.07280271, -0.056448124, -0.06706816, -0.079817764, 0.057210438, -0.025088359, -0.0010301396, -0.07782169, -0.06595945, -0.06301254, 0.08450294, -0.018164031, -0.03723335, -0.043708015, -0.09757293, -0.07040676, 0.01664296, -0.053388763, 0.010462772, -0.029407207, 0.075458884, -0.09003091, 0.025301285, -0.03895004, 0.09171776, -0.0067141643, 0.07149237, 0.018479658, -0.0024532399, 0.04181942, -0.041756228, -0.028720109, 0.050206024, -0.07846829, 0.075166635, 0.08375583, -0.046072084, -0.04745637, -0.071465775, -0.025111306, -0.030573132, -0.033053555, 0.0136990845, -0.024897365, -0.040736694, -0.004907012, 0.041855622, -0.011026897, 0.049762584, -0.08537544, 0.07912106, -0.07954979, -0.08621714, 0.073205546, 0.046277955, 0.037083007, 0.06053487, -0.06180317},
   {-0.017359935, 0.0038803979, 0.029031279, 0.019222654, -0.07786863, 0.08616482, -0.04934467, 0.029436069, 0.058113895, 0.05138514, 0.084061585, 0.040421534, 0.07480512, -0.075546, 0.043135636, 0.08655492, 0.08039277, 0.0042819977, -0.017498642, -0.016167985, 0.036668673, 0.007955292, 0.07182955, -0.072345674, 0.0599746, -0.016560445, 0.05262623, 0.07891239, 0.01814112, 0.008082688, -0.0326789, 0.0030777971, -0.07085634, -0.022809597, -0.09411269, -0.023148125, 0.06188915, -0.09359862, -0.010874731, 0.063530065, 0.03795677, 0.073655374, -0.032831118, 0.068698905, 0.05967429, -0.058385726, 0.041846927, 0.015243224, -0.090143435, 0.009947617, -0.039932266, -0.009235397, -0.08396579, -0.03998908, -0.073417306, -0.069907136, 0.018188266, -0.0076782824, 0.021076374, -0.06811326, 0.05806474, 0.027538285, -0.028276501, -0.047331367},
   {0.0070580905, 0.04097579, -0.04520545, 0.032978278, -0.05828588, 0.031289242, -0.01125012, 0.043107178, 0.050272778, -0.042664688, -0.09256594, -0.047149044, 0.013957433, 0.045213073, 0.093079574, 0.020659186, -0.08923123, -0.07428864, -0.008948304, 0.05328148, -0.09734205, -0.028669072, 0.031984635, -0.06825573, -0.0402657, 0.07899209, -0.012923316, 0.033613775, 0.0306561, 0.04828643, 0.070198156, 0.031221054, -0.009394988, 0.07882471, -0.030766888, 0.022155207, -0.013560324, -0.01465677, -0.0720092, 0.058855914, -0.030282577, 0.017047435, -0.06790567, 0.09023274, -0.0024373266, 0.0673267, 0.053206954, 0.02186419, -0.009387093, 0.088218585, 0.04733654, -0.053387493, -0.08383337, -0.0025005639, 0.011138074, -0.0499814, 0.08604974, 0.06727423, -0.015253156, 0.07782592, -0.008085958, -0.05486417, 0.032855175, 0.0204103},
   {0.05423146, 0.03810756, -0.09626077, -0.039967805, 0.00042574215, -0.029804569, 0.03532107, 0.047466632, 0.067619585, 0.0059401724, 0.037185796, -0.04691483, -0.0005181059, 0.08184201, 0.06767876, -0.013703354, 0.060708765, -0.005651191, -0.07519962, 0.05127709, -0.07245537, 0.08081695, -0.0052176886, 0.05215355, 0.058812533, -0.027845146, 0.016126925, 0.011946727, 0.08508744, 0.04940688, 0.043453008, 0.08324149, -0.0649383, 0.035473473, 0.056215987, -0.04196915, -0.08529911, -0.047742125, 0.038751047, -0.010500796, -0.014881275, 0.0566717, 0.0007406389, 0.01820486, 0.02163388, -0.08668054, -0.06158776, 0.08159126, 0.013951458, -0.009500512, 0.0660184, -0.07113968, 0.0735343, 0.073025726, -0.061741285, -0.032585017, -0.025306718, -0.007258302, -0.07826799, -0.03471914, -0.0070290156, -0.017391399, 0.0090828, -0.040344745},
   {-0.077467754, -0.05117133, 0.019401364, -0.0059565627, 0.08325443, 0.019251592, 0.09375082, -0.05328606, -0.07886075, -0.077895015, -0.07913275, -0.04951074, -0.050925713, 0.06856277, -0.0634004, 0.060076542, -0.054381277, -0.015547268, -0.02453123, -0.013074828, -0.034821957, 0.043654364, 0.023887644, -0.030051708, -0.02663163, -0.08689473, -0.04337649, -0.0052412516, -0.020546809, 0.029439472, 0.04215664, -0.07748755, -0.085652575, 0.049450852, 0.007861557, -0.043711156, -0.06705652, -0.037416495, -0.09396708, 0.05924108, 0.038061332, -0.00088112056, 0.03655778, -0.08593992, 0.035981495, -0.092649356, -0.09362545, 0.027696574, 0.06354076, 0.08348014, -0.03325376, 0.065187015, 0.049940437, 0.030705422, -0.05539667, 0.05828401, -0.03694795, 0.054015126, 0.058658145, 0.008081354, -0.022641035, -0.03935223, -0.08310142, -0.076053455},
   {-0.08285789, -0.0114615355, 0.010005141, 0.04532991, -0.054196116, -0.031757105, 0.017365552, 0.054642897, 0.07627497, 0.04986521, -0.0728002, 0.068708755, 0.03144522, 0.081669025, -0.087123424, 0.06644637, 0.072639294, -0.032606136, -0.056813203, 0.05768722, 0.025180154, -0.070632055, 0.03688864, -0.008050472, 0.05651453, -0.05557466, -0.07259785, -0.05984621, 0.03900624, 0.030220225, -0.026894895, -0.05971185, 0.03449353, 0.083537206, 0.087426774, 0.03931215, 0.048193883, -0.07597262, 0.03749666, 0.08048061, -0.0769404, 0.06622171, -0.07293463, 0.009172261, 0.048144896, 0.032768916, -0.049563486, 0.0020954777, 0.08927386, -0.02812149, 0.07796044, 0.091565676, -0.057284243, 0.054630913, 0.010044768, -0.01181153, -0.051153716, -0.067207836, -0.065282024, 0.046448596, -0.027571065, 0.07669527, -0.019216154, 0.03462141},
   {0.047278397, -0.07154249, -0.012398752, -0.035277765, 0.07375589, -0.005873509, -0.016132722, -0.05900117, 0.0013984423, 0.05571789, 0.00907921, 0.034098353, 0.08251851, 0.014579645, -0.0802342, -0.043543678, -0.049222168, -0.034570035, 0.040468223, 0.05942908, 0.035864193, -0.06601413, 0.02080714, 0.09204545, -0.058518734, 0.037544936, -0.078370586, -0.034038242, 0.07259675, -0.0121803135, 0.08808712, 0.06735625, -0.08663059, -0.0048130937, 0.03005403, 0.03785171, 0.05882645, 0.087643616, -0.06699409, -0.0045707896, 0.0489092, 0.037224583, 0.05355529, 0.06293338, -0.0031519465, 0.015652006, 0.061671894, -0.09534827, -0.019198565, -0.015348545, 0.046319503, 0.059018575, 0.02810509, -0.039448168, -0.07453956, 0.04488366, 0.04207002, 0.007166377, -0.022161156, 0.028660022, -0.08096429, -0.016604953, -0.074602224, 0.07337},
   {-0.04093529, -0.07806519, -0.058477398, 0.07436688, 0.08262903, -0.04117314, 0.050389495, 0.0127813835, -0.08163385, 0.06218076, -0.08840346, 0.05140877, 0.09066234, -0.06890416, -8.188188e-06, 0.0029107854, 0.039177623, -0.060655836, 0.073345, -0.07752318, 0.043277163, 0.020082746, 0.0103411535, -0.049810246, -0.05885225, 0.08227781, 0.042059917, 0.035526954, -0.05371524, 0.08718819, 0.036155216, -0.066259794, -0.02102153, 0.04575019, 0.087265, 0.052674226, -0.049243595, 0.010451111, -0.0058108517, -0.027594313, 0.0494448, -0.009206831, -0.08950387, -0.05699569, -0.042286973, 0.07810641, -0.020933555, -0.017837195, 0.062515266, -0.06643054, -0.080773704, -0.06463986, -0.08025994, 0.05886007, -0.03349591, 0.04584128, 0.06299951, -0.004068204, 0.011035971, 0.081474446, -0.05929975, -0.019635811, -0.034266066, 0.022395842},
   {0.009564644, 0.02289885, -0.026379092, 0.0048246155, 0.07862164, -0.071078986, 0.047580793, -0.0309537, 0.022805989, -0.02500925, -0.08630133, -0.081789225, 0.030487716, 0.0062139104, -0.09308507, 0.03769087, 0.05873271, -0.035698827, 0.005529508, -0.008036326, 0.05108942, -0.05019906, 0.071612656, 0.012690656, 0.039866198, 0.07401223, -0.049155567, -0.06055225, 0.025087923, 0.08729438, 0.08587542, -0.08156164, -0.07540032, 0.033371847, -0.03201352, 0.06712752, -0.031488013, 0.06540668, -0.08243827, 0.033585392, -0.028372752, -0.06313742, 0.029646456, -0.06694111, 0.062614374, 0.055447217, -0.06288285, -0.068333484, 0.08054597, 0.060724504, 0.017810537, 0.026881374, 0.057750206, 0.047939546, 0.042446174, 0.090943, 0.05658084, -0.047711506, -0.0028829277, 0.03484101, 0.072970875, -0.07911242, 0.0563486, -0.017704437},
   {-0.028498346, 0.015498822, -0.059909474, 0.046193685, -0.07639798, 0.05722671, -0.019881168, -0.06720638, -0.006029302, 0.026485696, 0.05015164, 0.02750493, 0.07530636, -0.018029727, 0.07402041, 0.08740199, -0.02161482, -0.049078975, 0.070780806, 0.03429528, 0.056405645, -0.07145918, 0.010740788, 0.06493487, 0.009142775, 0.080018535, 0.09291691, -0.043173004, -0.06399075, -0.018512249, -0.09204355, -0.02365112, 0.07364342, -0.06163141, -0.028323913, -0.05844794, 0.024298176, -0.060711958, 0.0068473476, 0.08083176, 0.02193195, 0.069151945, -0.07888476, 0.010204911, 0.03664706, 0.044966217, 0.0005419135, -0.09407763, 0.016326472, -0.039533854, -0.06248557, -0.04906932, 0.031794403, -0.072311565, 0.068275906, -0.05886296, -0.02239627, -0.057925347, -0.08744178, 0.0030980469, 0.05583851, -0.081733726, 0.07954198, -0.098974414},
   {-0.08393843, 0.09482269, -0.07334533, -0.09787318, 0.017732928, 0.06680117, 0.09268935, 0.08029307, 0.037622165, 0.025185928, 0.06462286, -0.07350605, 0.022279434, -0.06406808, -0.029643446, 0.011762105, -0.03819069, 0.00859604, -0.056580305, 0.011079124, -0.01744398, -0.021109104, -0.045779504, -0.07377856, 0.08503395, 0.05732545, 0.019101663, 0.03900122, -0.000606142, -0.031437386, -0.06769983, -0.058838908, -0.04078494, 0.04939612, -0.0012966443, 0.07855326, -0.08012523, -0.022636976, 0.04264758, 0.07866707, -0.089401126, -0.052367344, 0.016527383, 0.0029818043, 0.031610664, -0.03709923, 0.007023201, -0.004074646, -0.07654428, -0.0846102, 0.039786566, 0.040938042, 0.07202316, -0.005819276, 0.06424319, 0.069581494, -0.058072537, 0.080388, -0.070866354, 0.08816169, 0.085481204, -0.09204966, -0.017389577, 0.029328473},
   {-0.070609644, -0.058987714, -0.045400996, 0.01538522, -0.056156646, 0.072204016, 0.042736836, 0.06095416, -0.0018064082, -0.078639, 0.04006917, 0.08494512, -0.088856116, -0.011978917, -0.00233116, -0.09328429, -0.036072854, -0.005324602, -0.080659576, 0.014555509, -0.03925559, -0.02247292, 0.040122464, 0.05872526, 0.062878735, 0.08750648, 0.024891274, 0.08420384, 0.06534881, 0.039979912, 0.06639306, -0.011750146, 0.08615909, 0.07560948, -0.044139456, 0.07856822, 0.030911181, 0.09035447, 0.030590788, 0.06216327, -0.04981852, -0.041688465, 0.051867045, -0.029105783, 0.035776142, -0.08311598, -0.057026956, -0.09276518, 0.034882948, 0.00074454007, -0.03773509, -0.078452386, -0.038482554, -0.006236151, 0.04662382, -0.02075548, 0.019461889, -0.06161744, 0.023947537, 0.0052953362, 0.046583872, -0.012602799, -0.006910831, 0.020667829},
   {-0.015829708, 0.05462142, -0.059809797, -0.018715313, -0.04453166, -0.04212254, 0.028733563, -0.044912867, -0.008739316, 0.06775834, -0.04003438, -0.005956867, -0.02126322, -0.064903826, 0.052350618, 0.060228415, -0.01076681, 0.056661136, 0.066462524, 0.03919858, 0.03127274, -0.06615399, 0.020846823, 0.040773146, -0.09299129, 0.041849896, 0.057279866, -0.0041091647, -0.045571186, 0.08436226, 0.055771086, 0.08412108, -0.025653325, -0.03516426, 0.01579496, 0.00026140604, -0.08519702, 0.026465554, -0.07862772, -0.04901868, -0.09403266, 0.036099367, 0.021060491, -0.032246973, 0.07541858, 0.08278596, -0.064399965, -0.0671401, 0.036207132, 0.060608067, -0.037503216, 0.045470007, 0.02620916, -0.0038058758, -0.028670326, 0.045358527, 0.08379969, 0.07133102, -0.071076736, -0.069570996, 0.033836342, 0.08920989, -0.068632305, -0.024967484},
   {0.017998738, 0.05592442, 0.00562617, 0.047266692, -0.09072911, 0.0307933, 0.0050140517, -0.033104934, 0.037294753, -0.01745308, 0.013406403, 0.06023707, -0.04828536, -0.0290281, -0.028712958, 0.011983834, -0.06747955, 0.07403847, -0.07484159, -0.060570605, 0.0837144, 0.088186264, -0.06439959, 0.07019351, 0.061061814, -0.052548088, 0.092510276, 0.04839529, 0.05752646, -0.031598154, -0.07736574, 0.013767262, 0.09315615, 0.07597529, 0.0012059653, 0.04766741, 0.061805535, -0.058861457, 0.08434581, -0.063698776, -0.07761779, -0.0056078956, -0.06719531, -0.0829781, 0.05602943, -0.08995191, 0.009743546, -0.053281512, -0.08235566, -0.040511683, -0.019307878, -0.060859457, -0.012229342, -0.012431435, -0.08990185, -0.088203475, -0.0024224988, -0.08180674, 0.032259323, 0.0794595, 0.02377294, -0.048943922, 0.032969553, 0.04719244},
   {0.012460522, 0.018073743, -0.058671262, -0.038369108, 0.026996285, 0.0044072866, 0.051306527, 0.07625247, 0.06777172, -0.025907261, -0.03695139, 0.07053255, 0.05627107, 0.04648341, -0.026153259, 0.02940803, -0.056247104, -0.013284698, -0.024026677, -0.06815352, 0.018562507, -0.04047297, -0.056993175, 0.053579427, 0.0032146529, -0.06882643, 0.03532185, -0.027835857, 0.0046228915, -0.057845436, -0.02804104, -0.022091983, 0.08540917, -0.013328539, 0.0006615797, -0.049599778, 0.087449566, -0.069255605, 0.037093777, -0.01686275, -0.005046195, -0.06403431, 0.022727778, -0.042462077, 0.015277546, 0.055533346, -0.044155158, 0.06975235, 0.049104705, 0.050036743, -0.07103356, -0.040448364, -0.096403494, 0.033558138, -0.06855399, 0.09293131, 0.031155888, 0.089970596, -0.06444095, 0.019295407, -0.013628039, 0.075318016, 0.04676113, -0.072410375},
   {0.005078351, 0.07371832, -0.06329001, -0.091999695, -0.053602636, 0.032881986, 0.0058946772, -0.003935075, -0.0072512794, 0.040123396, 0.058114268, 0.013571988, 0.03560234, 0.025386287, 0.010631219, 0.057689257, -0.04633877, -0.06845081, -0.06902543, 0.0664111, 0.055709258, 0.022641947, -0.09680597, -0.05384444, -0.06446899, -0.0043595796, 0.049823508, 0.03354587, 0.00076090544, -0.017279178, -0.050326433, 0.040537797, -0.021539286, -0.0035764587, -0.056210686, -0.051778316, -0.059280016, -0.0019175876, 0.0094606895, 0.024108306, 0.05195006, 0.024944901, 0.013660387, -0.08731884, 0.091002576, 0.08551713, -0.037785303, 0.0347689, -0.025084497, -0.023114843, 0.054524124, 0.029078528, 0.033178143, 0.0027754009, -0.008725792, -0.02385601, -0.051478524, 0.028510565, 0.07007808, -0.08492956, -0.048615657, -0.087510504, 0.016745543, 0.016710218},
   {0.031405896, -0.0028583382, -0.048280925, 0.035148583, 0.014332649, 0.04439819, 0.076148674, 0.018634818, -0.022995556, -0.03927942, -0.034693938, 0.039523605, 0.049084447, -0.033567548, -0.0893703, -0.0561394, 0.021142855, -0.042200767, 0.0597061, -0.08382343, -0.064622745, -0.048805192, -0.066125974, -0.0140976235, 0.0025387087, -0.084904395, 0.05361938, -0.085956335, 0.09277623, -0.035659783, 0.0540515, -0.06519345, 0.004552655, 0.07207163, -0.08798464, -0.014445119, 0.012188334, 0.04326107, -0.0319086, 0.0106434375, 0.029704055, 0.035004623, 0.023388634, 0.04579734, -0.08112132, 0.015616539, -0.0005135624, 0.0061911833, 0.051100638, -0.006824056, -0.0218698, 0.07786288, -0.020442666, 0.052399002, 0.045254342, 0.051203046, 0.06720797, 0.0636733, -0.068277396, -0.053152245, 0.067043476, -0.084572285, 0.03188289, -0.009015465},
   {0.032066815, 0.013038008, -0.06607811, -0.072390296, 0.07088349, 0.06600256, -0.08127602, 0.0239456, 0.06765113, 0.056832265, 0.025725193, -0.026882024, 0.08866086, 0.07605376, -0.007899359, -0.03538592, 0.07001312, -0.03648837, -0.025028385, -0.017676428, 0.040320363, -0.04245707, -0.09747129, 0.04916448, 0.03503575, 0.04155144, -0.05956282, -0.042817846, -0.02383469, 0.0073234066, 0.058422524, 0.07103443, 0.026900724, -0.007057973, -0.06748301, 0.0018661029, -0.060177185, 0.006912274, 0.084656954, -0.004425101, -0.028843557, -0.02726265, -0.071056314, 0.045276083, 0.028857723, 0.029889677, 0.073537804, 0.0040034684, 0.003497665, 0.08938053, 0.08553128, 0.06980912, -0.072443455, -0.08813014, 0.05165174, -0.02079863, -0.055084154, -0.03400547, 0.01687, -0.09597592, 0.006889685, 0.012612499, -0.03639408, -0.033794865},
   {0.049529526, 0.09776395, -0.052099448, 0.052608516, 0.026661841, 0.07143516, 0.067269, -0.030830085, 0.06679588, 0.08976027, 0.002489373, -0.06743057, 0.0038875043, 0.09196339, 0.009226926, 0.08960024, 0.0411212, 0.07233892, 0.06480176, -0.0048576947, -0.06537666, 0.077322856, -0.05324085, -0.09303377, 0.024653321, -0.038299613, 0.005303207, -0.06298293, -0.022122204, 0.06516976, -0.07144893, -0.03272058, 0.07733076, 0.008876699, -0.013601142, -0.032330543, -0.020652939, 0.07551916, -0.050103206, 0.03291165, -0.07822689, 0.039737098, -0.013290981, -0.043041147, 0.052867334, -0.044506717, -0.04222808, -0.051468145, 0.08136678, -0.019923324, -0.010649148, -0.07402572, 0.007946198, -0.00979954, 0.0361064, -0.07342125, 0.045766108, -0.007027251, -0.0010193512, -0.09107194, 0.07246976, 0.0036731139, -0.08463696, -0.05574889},
   {-0.06795595, -0.074065015, 0.027686149, -0.039284687, -0.05561643, 0.07758888, 0.064024046, 0.03187124, -0.051324137, 0.017674906, 0.039316766, 0.06878643, 0.03289164, -0.0011622922, 0.052098595, 0.040537395, -0.09490045, -0.07401538, -0.04291613, -0.08616117, -0.041612063, -0.050069924, -0.020282643, -0.03257817, -0.0679691, -0.06309311, -0.053076018, 0.09123277, -0.075610705, 0.08396081, 0.017974416, -0.076921955, -0.065759346, 0.0008828089, -0.046315994, -0.06076692, -0.003647271, 0.05162021, -0.018793762, -0.038664766, -0.0028684689, 0.08135926, 0.034731247, -0.003507182, -0.060752943, -0.0026705908, 0.06052974, 0.047877364, -0.03069756, 0.06669741, 0.039926358, 0.07903146, -0.05803074, 0.07133325, 0.0012103096, 0.09170161, -0.077137016, -0.088940054, 0.08344888, -0.02809867, -0.07983768, -0.08331352, 0.025321748, -0.06889523},
   {0.04349033, -0.037581973, -0.09563338, 0.017880835, -0.024127997, 0.086448, -0.090171956, 0.06561082, 0.026368909, -0.0049971305, -0.044155296, -0.057053, 0.041888393, -0.07414065, 0.023462221, -0.056785792, -0.09670208, -0.020827323, 0.014288411, -0.05173059, -0.036316924, -0.069363885, 0.061713953, 0.033957087, -0.04209761, 0.030947125, -0.031306434, -0.015903499, -0.06588345, 0.062498786, 0.052619338, 0.059330046, 0.023907065, 0.074055776, -0.02566101, -0.059412178, 0.026538922, 0.040878452, 0.002693362, -0.051495057, -0.09439554, -0.052089855, -0.047072608, -0.08904278, 0.076827936, -0.086789206, 0.0002495983, -0.0012342406, -0.049743418, 0.04432945, -0.021695195, -0.044737037, -0.003379887, 0.0549907, -0.07022877, -0.032295696, 0.09170973, -0.001982403, 0.08093765, -0.010246428, -0.008377711, 0.0171585, 0.055568915, -0.005975354},
   {-0.038710706, -0.0115290955, 0.033336934, 0.03897466, -0.0819179, -0.08815304, 0.066139415, 0.07151317, 0.0060817366, 0.063481495, -0.0054695085, 0.085322626, 0.021879576, 0.05381424, 0.035539486, -0.07492006, -0.09461338, 0.030387491, 0.018116623, -0.08706672, -0.02757941, -0.057295974, -0.08967699, -0.006935075, -0.06439519, -0.059056617, 0.016783161, 0.03897808, 0.06450287, -0.07252013, -0.052792415, -0.06181264, -0.07291509, -0.085895926, 0.02714629, -0.02075402, 0.05575244, 0.008169234, -0.07208303, 0.003783606, -0.062041726, 0.07215055, -0.04451883, 0.029913925, -0.051898498, -0.009306838, 0.086739644, 0.010988433, 0.01343475, -0.042067964, -0.060028598, -0.0559063, -0.030848632, 0.054519914, -0.014033124, -0.07404075, -0.079097204, 0.0057565793, 0.077923484, -0.010653998, -0.05905338, 0.0025985688, -0.031296536, 0.056509767},
   {-0.012630706, -0.039945304, -0.08927585, 0.044752236, -0.03771036, -0.0017274129, 0.028945211, -0.0618178, -0.082923, 0.024041286, -0.03325362, 0.015543912, -0.059775162, -0.004491897, -0.09025614, 0.07253922, -0.031524185, 0.071268566, -0.06857847, 0.062430557, 0.04065268, -0.04693768, -0.0045641484, -0.067068554, -0.033408165, -0.0038224878, -0.071558535, -0.01365973, 0.03985835, 0.067579724, 0.08255154, -0.05924675, -0.01720164, 0.091287315, 0.05627564, 0.08009573, 0.040473815, -0.028567348, -0.033359885, -0.08826632, -0.05895484, 0.07668198, 0.06906527, -0.05659045, 0.02883652, 0.085774966, 0.056433536, 0.08177181, -0.07074813, 0.012732472, -0.049356025, -0.07063125, 0.052637856, 0.074032016, 0.06303152, 0.054700945, 0.068986505, -0.074424304, -0.003018871, -0.02997259, -0.06287274, 0.055500455, 0.04123714, 0.057523083},
   {-0.08664205, -0.061289273, -0.010776334, -0.05543353, -0.0077894176, -0.011147163, 0.05828585, -0.09197804, -0.03506532, 0.02594501, 0.010256328, -0.009913864, 0.017419524, 0.05369112, -0.07229698, -0.027369797, -0.042201854, -0.056584198, 0.07751674, -0.009936766, -0.07746171, 0.087076604, 0.0573493, 0.08182163, 0.06497857, -0.024515979, -0.0029703856, 0.08376771, -0.07258192, -0.061405797, 0.061961953, -0.056552224, 0.08194951, 0.044335563, 0.050464008, -0.058299523, 0.0051825424, -0.057084702, -0.08818527, 0.014645524, -0.035587743, 0.04783798, -0.027064519, -0.07838882, -0.025634833, -0.0413942, 0.079971835, -0.06423237, 0.017700495, 0.071674235, -0.06991527, -0.052842245, 0.04579135, -0.024698079, -0.04943224, 0.09005459, -0.070224725, -0.06526037, -0.04443441, -0.02750764, 0.011622471, 0.06985416, 0.03517816, -0.06578722},
   {0.050287947, -0.05014651, -0.08160247, 0.06573937, 0.018643819, -0.057102576, -0.06372783, -0.032613106, 0.08954212, -0.03804747, -0.057577007, 0.079957545, -0.06845559, 0.067987934, -0.056704342, 0.0661936, 0.0072142063, 0.07559077, -0.014875151, 0.043839887, 0.054955207, 0.0923623, -0.020664888, 0.037602894, -0.04102894, 0.03073901, -0.06286377, -0.051262587, 0.01904738, 0.038105346, 0.061846577, 0.06617024, -0.0807075, 0.01895839, 0.01160777, 0.027163332, -0.04440669, -0.024239324, 0.00018693169, 0.07910212, -0.0339184, 0.02727513, -0.0705449, 0.040179662, 0.056859218, -0.05720182, 0.004889603, 0.0063921465, 0.083268166, -0.0105923945, -0.08282583, -0.05411305, -0.06531974, -0.06837997, -0.063489705, 0.04057, -0.028123632, -0.08274697, -0.08546718, 0.049999088, -0.062180594, -0.05089305, -0.0036195, -0.009786239},
   {0.03790258, -0.036448628, 0.062514715, -0.016574644, -0.08680777, -0.005822492, 0.050686024, -0.037930556, -0.028913852, -0.008810171, 0.04367671, 0.026187526, 0.012514494, 0.092384584, -0.022971526, -0.088627085, -0.05751867, -0.080634214, -0.025976382, 0.087367, -0.0949015, -0.030156046, 0.020666381, -0.080534406, -0.003698837, 0.03498315, 0.07755472, -0.04405313, 0.0628246, 0.050738774, -0.051570784, -0.036427256, -0.039664272, 0.011961949, -0.05797515, -0.016806958, 0.07460564, 0.06752997, 0.014571245, 0.021783017, 0.0072612897, -0.09318225, 0.08156323, -0.002527617, -0.01374732, -0.039438467, -0.06690846, 0.0067792567, 0.008293917, -0.008681879, -0.043997232, 0.04516422, -0.0831402, 0.0027678162, -0.057663888, 0.04477231, 0.0068404907, 0.09166354, 0.012005173, 0.0007040452, 0.076957785, 0.008952305, -0.031937893, 0.048599124},
   {-0.06475047, 0.01676169, 0.043208107, -0.05117218, -0.057236284, 0.07405926, 0.050040793, -0.059420448, 0.03938951, -0.0852454, 0.03856767, 0.08952134, 0.035435565, 0.06278252, -0.029522322, -0.063650854, -0.048226867, 0.028441899, 0.09074139, 0.052184623, 0.011804502, -0.014074596, -0.09432222, -0.031699564, -0.030677672, 0.015240149, 0.060837947, -0.025012048, -0.023352385, -0.012422912, 0.07364229, -0.04371282, -0.018579394, 0.018901477, -0.019489571, 0.08512985, 0.07085073, -0.04595902, -0.07757752, -0.049123004, 0.0037664974, 0.031943016, -0.080728054, -0.0719033, -0.025940837, 0.07173624, -0.06170234, 0.052816797, 0.08520852, 0.068579, 0.06005854, -0.06102394, -0.07506629, -0.052846115, 0.079264976, -9.8293895e-05, -0.0882897, 0.041193478, 0.018453315, 0.010866066, -0.08328696, -0.078235686, 0.022216862, 0.08441376},
   {0.038876086, -0.01605718, 0.026383853, -0.0020358565, -0.07881598, 0.08476406, -0.01584345, -0.04826529, 0.07220101, 0.05744222, -0.06396961, 0.0071047284, 0.012341909, 0.06829424, 0.010853089, -0.031378627, 0.08131028, -0.025415845, 0.0906572, 0.009557266, -0.039258894, -0.07063586, -0.07510343, -0.0014871284, 0.0012287033, -0.07699946, 0.060141012, -0.034701243, -0.07002168, -0.015820213, -0.025324477, 0.019631272, 0.04572799, 0.024038699, -0.06321931, 0.039246406, -0.09413375, 0.04939961, 0.00083583704, -0.07315192, -0.016746987, -0.0056579113, 0.029948018, -0.01180324, -0.08564981, -0.053405203, -0.08882057, -0.035960842, 0.014262522, 0.033137143, 0.056444723, 0.06810375, -0.052443758, -0.061473165, 0.049740456, 0.09414296, -0.007860117, 0.035320822, 0.006212592, 0.05425129, -0.014279061, -0.06302724, -0.011095845, -0.06741304},
   {-0.06372046, 0.03772603, 0.042907976, -0.077433415, 0.03877113, 0.06806841, -0.07102906, 0.018588161, 0.06709515, 0.06413179, 0.03221286, -0.02128384, -0.018230848, 0.04955413, -0.06479442, -0.0068996996, -0.05702797, 0.010928199, 0.07352262, 0.07996873, -0.022657, -0.023670504, 0.04435336, 0.018793166, 0.05215688, 0.030863669, -0.038147893, -0.005932448, -0.03159117, 0.09213161, 0.06131716, 0.08007384, -0.092874974, -0.054590553, 0.048859857, -0.079099186, 0.08817758, -0.057022594, 0.062464997, 0.041099213, -0.071885616, -0.022549644, -0.015523704, 0.02700378, 0.057508785, 0.030472418, -0.03289843, -0.059718885, 0.0391899, -0.00645294, -0.01267449, -0.074594915, 0.07420364, 0.042028137, -0.053524923, 0.009002953, 0.01179033, -0.026844682, 0.048200585, -0.070688024, -0.012379536, 0.027785048, 0.068510145, -0.03252144},
   {-0.027381556, -0.023572633, -0.015694862, -0.072321735, 0.00048145308, -0.051665805, 0.073961794, -0.04557023, 0.02827533, -0.036037065, -0.015915886, 0.028806457, -0.078319736, 0.06182222, -0.07348739, 0.016109273, 0.073001996, 0.025857374, 0.06434632, 0.014753006, -0.071507715, 0.057975214, -0.03599221, 0.073007815, 0.04279932, -0.011965232, -0.07819218, -0.0023890794, 0.06153644, -0.07748532, 0.09216812, -0.03482799, -0.016224809, -0.020406611, 0.08382836, -0.09462041, -0.022093566, 0.022324499, -0.04735715, -0.04621727, -0.07208636, 0.068524204, -0.0847339, 0.013433851, 0.06035047, 0.08020937, -0.080955796, 0.05644092, 0.04012128, -0.07417082, 0.045385562, -0.07751987, -0.037361104, 0.06965981, 0.06527852, 0.08392427, -0.07007275, -0.024749324, 0.09052541, -0.05411863, -0.084252715, 0.07254665, 0.06673494, -0.0061519053},
   {-0.0063491496, 0.0374122, -0.06162601, 0.03900188, -0.06199444, 0.027667103, -0.080031596, 0.04689617, -0.00470029, -0.04673254, 0.03432385, 0.0071007283, -0.0052505806, 0.06987346, -0.020052731, 0.03892561, -0.056728747, -0.07038616, -0.08468002, 0.053190492, 0.0478601, 0.020546589, 0.037065297, -0.020051934, 0.034197364, 0.079027325, -0.057543065, 0.015517905, -0.050965246, 0.05652877, -0.082135536, 0.03142551, 0.0928305, 0.05106653, 0.02225373, 0.012854764, 0.033947192, 0.054295316, -0.08501817, -0.0035521984, -0.013917018, 0.035213687, 0.06261358, 0.015957355, 0.025210975, -0.022536213, -0.090017095, -0.086436, -0.06411994, 0.08070505, -0.06426916, 0.028888434, -0.024304021, 0.0103289485, -0.023287974, -0.05917126, -0.029392194, 0.051699247, -0.062710196, -0.039158497, 0.004003897, -0.07625376, 0.07191663, -0.009301422},
   {-0.03520858, 0.09937119, -0.059109755, 0.020302026, 0.06792977, -0.07694275, 0.08611703, 0.0005161698, -0.036165148, -0.032052286, 0.0051946193, 0.084549986, 0.00814376, -0.08006127, -0.020074427, 0.088113986, -0.00014780248, -0.043061838, 0.065912955, -0.07468546, 0.036679532, 0.087642394, 0.038774546, 0.085414566, 0.07867803, 0.04001109, 0.03784028, 0.0737788, 0.023698814, 0.05350534, 0.010166067, -0.036557272, -0.023968853, 0.045650896, -0.052853245, 0.055202726, -0.03342904, 0.014982393, -0.06708944, 0.028742217, 0.060261384, -0.050325505, 0.005955769, -0.009753637, -0.07293188, -0.075406, 0.084266, -0.06412253, 0.030347917, 0.07362446, 0.057844017, -0.034660034, -0.009301648, 0.012489997, -0.07968492, 0.034399446, 0.028456185, -0.07952784, -0.0718962, 0.0025783826, -0.034308054, -0.06478612, -0.021511858, 0.026405787},
   {0.04847116, 0.016894147, -0.0013278433, 0.07890135, 0.001028027, -0.0072278315, -0.06068127, -0.06611572, 0.024227615, 0.07213583, -0.0058191866, 0.013223316, 0.0050303787, -0.04826645, -0.081924394, 0.024033636, 0.032692727, 0.032593586, 0.021909438, -0.083997, -0.019146841, -0.068703644, 0.038114924, 0.065830894, -0.07037157, -0.019371765, -0.04456679, 0.06357297, 0.072936185, 0.042904027, 0.0649032, 0.001908357, 0.031519488, 0.048387, 0.080004275, 0.04897827, 0.06991249, 0.060977414, -0.09478728, 0.022558302, 0.06836363, -0.053235047, -0.06570254, -0.0549937, -0.013620548, -0.07855206, -0.06416388, 0.015079889, -0.046579573, -0.033408873, 0.06564907, -0.025759362, 0.07591547, 0.0069805756, 0.016213082, 0.040752277, -0.0017676319, -0.057632793, 0.07647271, 0.089567386, -0.06156453, 0.015865222, 0.021894235, -0.072049454},
   {0.07765686, -0.065727815, -0.074370176, -0.08820304, 0.035835396, -0.07060611, -0.002683867, 0.083928116, -0.047996674, -0.071832165, 0.045375116, -0.0048424494, 0.0074471757, 0.055088304, 0.022494555, -0.01596383, -0.017061435, 0.008592121, -0.019499138, -0.06648191, 0.048974898, 0.027385296, 0.06747794, 0.00020840764, -0.04603191, 0.06937993, -0.087732896, -0.09231509, 0.06750425, -0.021207266, -0.042395655, 0.016332777, -0.09247728, -0.08152645, 0.016049985, -0.062044196, 0.06269127, 0.051255085, 0.068627805, -0.08493733, 0.0037987807, -0.025808178, -0.053744365, 0.024643965, -0.056197923, 0.082385786, -0.04056357, -0.09357227, -0.037956927, 0.022278404, -0.038722005, -0.008512422, 0.08576497, 0.044654585, 0.004222885, 0.00066720054, 0.082547806, -0.008339001, 0.0790839, 0.071314596, 0.09029912, 0.018008426, 0.087139495, -0.04456905},
   {-0.076358795, 0.02495861, 0.027146542, 0.0034573644, 0.0024960788, 0.029540626, 0.091213614, 0.07692612, -0.030389998, -0.040452987, 0.007533677, -0.07116059, 0.00955338, -0.07227037, -0.0028457046, 0.04043571, -0.042381335, 0.017941654, 0.06301556, -0.06724729, 0.048342403, -0.023566807, -0.01782971, 0.011587828, 0.048768207, 0.08614206, 0.08624443, -0.041745774, 0.0051550195, -0.0053810477, 0.048197888, 0.023986796, -0.062045183, 0.042032417, -0.08002964, 0.089759655, -0.08353303, 0.011933802, -0.09431612, -0.090930566, 0.036150552, -0.0067333058, -0.004707309, 0.07708698, -0.08101932, -0.028334599, 0.06565108, 0.07224903, 0.08518807, -0.04239246, 0.07953553, 0.08666817, 0.07979349, -0.0126154795, -0.05377015, 0.038535696, 0.08923374, -0.08250041, -0.023816288, -0.030230008, -0.042518657, 0.026845597, 0.03249373, -0.057588983},
   {0.024174275, 0.009266012, -0.07665026, -0.060355384, 0.084077395, -0.069284506, 0.085406266, 0.02027597, 7.5359017e-06, 0.061625384, -0.08439472, -0.088167265, 0.050251536, -0.054630518, -0.07987199, 0.043005504, -0.00658272, -0.04865638, 0.02205383, -0.030144572, 0.04637039, 0.082191154, 0.033181764, -0.06308206, 0.001496216, 0.050267205, 0.032171838, 0.004375348, -0.03823194, -0.019896343, 0.007797637, 0.08140571, -0.0065431446, 0.05992716, 0.003487331, 0.012609138, -0.07351501, -0.05844466, -0.091700666, 0.022820927, -0.08279409, -0.025982298, 0.081824325, 0.06386169, -0.065073475, -0.0055550556, -0.09647452, 0.019316839, -0.015162605, -0.017703488, 0.04158743, -0.02643691, 0.018103188, 0.06125746, -0.015569672, -0.009645136, 0.029568985, -0.01358545, 0.020397589, -0.04848267, -0.04747454, -0.0034357235, -0.076300465, 0.029062402},
   {-0.025038546, 0.010220059, -0.0940305, -0.022903237, -0.0452026, 1.0282363e-05, 0.068171896, -0.06793548, 0.014695089, -0.07445707, -0.020588502, -0.04722571, 0.010200843, 0.083470486, -0.045040645, 0.019561522, 0.006174544, 0.028053656, 0.047193967, 0.04792356, -0.08802402, -0.016305694, -0.029539114, 0.06211894, -0.030488791, 0.033994447, 0.050564762, 0.050570916, -0.050917856, 0.009919837, 0.053506467, -0.07207582, -0.06649082, 0.07924282, -0.013538867, 0.08897279, -0.053956997, -0.048888043, -0.05487016, -0.07902905, 0.032789726, 0.080310576, -0.07112563, 0.047574557, 0.08496388, -0.037021406, -0.0079939095, 0.008765637, 0.0030897895, -0.030358892, 0.07970748, -0.039628007, -0.036109425, 0.02665659, -0.043888714, -0.00011712633, 0.0938722, -0.012673577, -0.0031972378, 0.055880763, 0.06551193, -0.0671717, 0.07615974, 0.01564034},
   {-0.05870346, -0.035658903, 0.026183112, 0.061592802, -0.026764393, 0.024184972, 0.09028858, 0.03645682, -0.018253304, 0.080589615, 0.0013982877, 0.026617484, 0.07555475, 0.0682358, 0.058969893, -0.05471746, -0.012425069, 0.08561813, -0.029723294, 0.078647226, 0.054701146, -0.07634062, 0.07506096, -0.08824267, -0.08212804, -0.015526716, 0.06128022, 0.017711656, -0.035103116, 0.02112241, -0.061165713, -0.06303469, 0.08235317, -0.043163955, 0.05141158, -0.063766025, 0.043319397, -0.019696355, -0.06794637, 0.09216591, 0.009535863, -0.018441632, -0.023051867, -0.018009558, 0.052492198, 0.046270173, -0.011292871, -0.07562343, 0.060888976, 0.06944324, 0.03281794, 0.07861432, -0.009466521, -0.02797325, -0.0458525, -0.043727815, 0.0097689, -0.030350268, 0.034761958, -0.0071050865, 0.08105332, -0.08714491, 0.057572428, 0.02701565},
   {0.060915764, 0.010134614, -0.078476004, 0.07499509, 0.012417958, -0.07194283, 0.05569658, 0.028730113, -0.022527892, 0.015888916, -0.09113984, -0.03300697, -0.05313664, -0.08725659, 0.08876183, -0.05353974, -0.0020259519, -0.05449061, 0.07613208, -0.07706575, -0.044798087, 0.068967566, 0.0072325403, 0.0011851713, 0.079697005, 0.018446244, -0.05845449, -0.044354834, -0.04367379, 0.08885374, -0.00089397543, -0.09341034, 0.0015194342, 0.07116525, -0.04186503, -0.08275373, -0.013954248, 0.0878011, 0.033106867, -0.015654638, -0.03783579, 0.06872017, -0.052629877, -0.029561192, -0.06702775, 0.07497799, 0.013791587, -0.08420121, -0.06683855, 0.06259956, 0.087715775, -0.05859404, 0.07565934, -0.056256697, 0.08632105, 0.039855357, -0.052207965, 0.0032751376, -0.035239413, -0.06973104, 0.08065366, -0.06009232, -0.07232645, -0.085713744},
   {-0.05662733, 0.046884507, -0.023437852, 0.0448567, -0.07675239, -0.060426608, 0.012721048, 0.07230718, 0.038787078, 0.04960014, -0.0634479, 0.048131615, 0.020350978, -0.07117806, -0.019440092, 0.05046948, 0.052973982, -0.011923939, 0.014376178, 0.07892884, 0.07032385, 0.051709276, 0.045275606, -0.061398055, 0.07034256, 0.04077081, -0.07553288, -0.0918284, 0.02118902, 0.027014866, 0.08254843, 0.06168825, -0.06846611, 0.07058733, 0.08484959, -0.060672093, 0.08008676, 0.0030785925, -0.026030162, 0.011639625, 0.059338886, -0.074319854, -0.0010995041, 0.02479475, 0.060228493, 0.0523816, 0.028444132, -0.0024629922, -0.0063531203, 0.06717525, 0.021329233, -0.031414893, -0.00093042, 0.0037331656, -0.07697627, -0.002609953, 0.06966825, -0.03328143, -0.019343197, -0.09633221, -0.041998237, -0.07868949, 0.03741719, 0.0074797096},
   {-0.09257807, -0.014722193, 0.036045767, 0.08030387, 0.027289493, 0.024581727, -0.051046837, 0.0017586085, 0.08701261, -0.044995897, 0.0676096, 0.07130328, -0.05341735, 0.011392562, 0.063959785, 0.022172436, -0.023904733, -0.07208249, -0.07057396, 0.04276116, 0.012553155, 0.031249292, 0.010987139, -0.054273263, -0.04881047, -0.030357681, -0.054983757, 0.07346243, -0.0336284, 0.07213596, 0.060339138, -0.038045354, 0.041598268, -0.03551396, 0.08265966, -0.010869347, -0.02783359, 0.037776347, -0.0041689863, -0.059267733, -0.004582221, -0.07220749, 0.029221136, -0.010181464, -0.08314173, 0.05517986, 0.026916962, 0.012619174, 0.010472417, 0.06372453, -0.066661134, -0.043591626, 0.02195094, -0.007898025, -0.055136293, 0.041808896, -0.0851533, 0.04112233, 0.06737814, -0.080083475, -0.026933014, 0.07111282, -0.056621555, -0.033425502},
   {0.046359975, 0.02082466, -0.07986199, -0.05462849, 0.09148627, 0.056058362, -0.042104043, -0.008413326, -0.015324455, -0.039883435, -0.0392126, -0.008815376, 0.037817515, -0.05958418, 0.028757252, 0.08286009, -0.024403483, -0.06169383, -0.031072795, -0.07015134, -0.02270337, 0.039527167, 0.03764768, -0.0031137168, 0.03963188, 0.00087861123, 0.07713474, -0.013427558, -0.030886017, 0.076181, -0.05919003, 0.028814573, -0.06727658, 0.008986732, -0.059350617, -0.037900615, 0.06433513, -0.015147622, -0.03847715, 0.003842339, 0.071557745, 0.027404465, -0.013493217, 0.012032874, -0.083594136, -0.09036837, 0.047455568, -0.013247013, -0.021440683, -0.066603966, 0.029483022, 0.052993797, -0.027004667, -0.086348675, -0.018526733, -0.05708855, -0.07299895, -0.014772276, 0.07296001, -0.08904749, -0.0138468845, -0.03588843, 0.051221285, 0.044956315},
   {-0.08625876, 0.088482134, 0.0075865397, -0.09198265, 0.038463697, -0.020547202, -0.07146041, 0.042648744, -0.022322146, -0.016974596, 0.04229223, 0.06023408, 0.06620515, -0.025782436, -0.07126256, -0.08734131, -0.08112813, -0.0556374, 0.025687233, -0.08126891, -0.067426324, -0.08149152, 0.065840006, 0.0044503137, 0.0479409, -0.0013061633, 0.03379002, 0.030321512, 0.0018669143, -0.06943525, -0.04517167, 0.019796817, -0.0167149, 0.086989745, -0.077894546, -0.061017584, 0.026025238, -0.041418277, -0.047556505, 0.03423003, 0.08484037, -0.0519205, -0.01142032, -0.05105867, -0.06803219, -0.04602139, 0.06158976, 0.022716612, 0.06290741, -0.035496205, 0.035458244, -0.04037623, -0.09599099, -0.06842488, 0.014224067, -0.057022702, -0.06889282, -0.027520584, 0.037229516, 0.05173682, 0.025668316, -0.045710575, -0.025243415, -0.068422526},
   {0.072391346, -0.031899795, 0.0032828813, -0.031179463, 0.06739656, -0.040187888, 0.025392879, 0.07028661, 0.04510442, -0.034395494, 0.010802336, 0.019366717, 0.058090158, -0.019819256, -0.081947625, -0.07371293, -0.06822554, -0.07255404, 0.06518363, -0.02702393, 0.047397476, 0.025728773, -0.008648867, -0.03408083, 0.029769043, 0.01679149, 0.06919619, -0.020276045, -0.05350906, -0.0073174015, 0.057441026, -0.04979055, -0.0027740225, -0.03770927, -0.02748865, 0.006100295, -0.06535732, -0.019526064, -0.031763304, -0.07178994, 0.04158873, -0.05582478, 0.05360589, 0.048600443, -0.03259344, -0.06817205, 0.07187081, -0.07986305, 0.08783366, -0.059191782, -0.003215318, 0.08222555, 0.022337835, 0.059309117, 0.05667766, 0.038212143, -0.08901567, -0.0009903088, 0.04519961, -0.06568593, -0.0773764, 0.018732354, 0.0014460726, 0.03450642},
   {-0.06791687, -0.020235626, -0.048454586, -0.009804335, -0.0031119753, -0.05537377, -0.04115571, -0.09390972, -0.060015757, -0.044316143, 0.04285655, 0.055365365, -0.074398816, -0.031658676, 0.0042686313, 0.043389075, -0.066785075, -0.011777431, 0.010649398, -0.090033226, 0.0665334, 0.024637846, 0.022773726, 0.009391323, -0.041398473, -0.013617043, 0.06001378, -0.019145029, 0.07753313, 0.08741561, 0.04104366, -0.021116495, -0.08876694, 0.0042046877, 0.050571725, 0.05285996, 0.07754881, 0.015913464, 0.026189739, -0.075717896, 0.0049041198, -0.08028891, -0.010893483, 0.056290694, 0.082611166, -0.013240225, -0.0028576811, 0.038638942, -0.04550881, -0.029980442, 0.053201396, -0.010612376, 0.031364627, 0.014863275, -0.03880509, 0.047438733, 0.062041715, -0.06507811, -0.010904878, -0.019338887, -0.04232666, 0.062014632, -0.052426856, -0.017495513},
   {0.033403296, 0.0001475544, 0.055470143, 0.009933684, -0.062865816, -0.041504875, 0.0917984, 0.06645198, 0.034299467, 0.005077398, -0.04535135, 0.030626137, 0.04513807, 0.019250175, -0.006133899, -0.015921958, 0.02033329, 0.05468435, 0.03242532, -0.027741935, -0.09520799, -0.06501039, -0.066874385, -0.07878469, -0.005387044, 0.057479337, -0.08151404, 0.013907799, 0.0054619163, 0.041568764, 0.05457579, 0.068441406, -0.039810244, 0.06036697, -0.03309766, 0.061847348, -0.08665812, 0.04912588, 0.008740278, -0.036053784, -0.0871618, 0.06637857, 0.039652232, 0.031831674, -0.0056218645, -0.0023146546, 0.022524854, 0.008371967, -0.048266236, 0.08741666, 0.06413194, 0.070125155, -0.08074395, -0.044726845, 0.09264008, 0.08970437, -0.08643333, -0.0030778698, 0.010825433, -0.048834063, 0.09200206, 0.011188023, -0.002616671, -0.059036825},
   {0.06818356, 0.0833007, -0.08688895, 0.068870366, 0.028908439, -0.07250227, -0.045666154, -0.01859037, 0.0505284, -0.05678687, -0.08984558, -0.040365044, 0.080459155, 0.02420382, 0.07561564, 0.00950294, 0.024139851, -0.07246364, -0.084906265, -0.057766657, -0.028415151, -0.0128658675, -0.07088664, 0.009064399, -0.0800433, 0.031507764, -0.027678141, 0.018946217, -0.011850856, -0.09322958, 0.01777906, -0.07037268, 0.01597593, 0.07404826, 0.024627216, 0.0048602126, 0.01104237, -0.04017472, 0.017094372, 0.03146337, -0.046135005, 0.007727824, 0.08145973, 0.06355295, 0.020937856, -0.033429284, -0.04684715, -0.059437323, 0.02207775, 0.0052313223, -0.04660188, 0.012533627, 0.07402582, -0.0037045106, 0.052002467, -0.03002411, -0.026590958, -0.055852104, -0.025623135, -0.026597612, -0.008278835, 0.04058156, 0.07787012, 0.066967495},
   {-0.06133084, -0.06096192, 0.005157337, 0.05354098, -0.023062633, 0.001346485, 0.06932834, -0.09437252, -0.050196625, 0.053900614, -0.07374276, -0.0149096865, -0.08033505, -0.071918644, -0.0090845525, 0.08329096, 0.079953216, -0.04635283, 0.022198759, 0.03656446, -0.020606048, 0.056428604, 0.025352022, -0.085863076, -0.047047157, 0.03637272, 0.04556824, 0.0011583895, 0.091273196, 0.050509818, -0.03372523, 0.056780268, -0.030950606, -0.0668115, -0.07261343, -0.010590849, -0.03639894, 0.043623615, 0.03147339, -0.03360991, -0.05609303, -0.08958289, -0.08296066, 0.026324242, -0.051059246, -0.011711202, -0.057755444, -0.04143285, -0.06965093, -0.06261448, -0.013326326, 0.01128836, 0.03615832, 0.057021074, 0.012107208, -0.058976747, 0.052737962, 0.08664885, 0.065085925, 0.061993886, 0.075107075, -0.08930643, 0.043831937, -0.013940412},
   {-0.030431796, 0.09798494, -0.047418144, 0.00636041, 0.056999628, -0.05994792, -0.010925448, -0.09620622, -0.064516716, -0.06891462, -0.059156913, -0.065544516, 0.06318968, 0.0066165784, -0.0049349144, -0.045625407, -0.0795754, -0.067118526, -0.015412636, -0.06462726, -0.0046571866, 0.02484467, -0.0341924, 0.07829594, 0.010165961, -0.04572889, -0.0042844703, -0.06938335, -0.032657463, 0.044263132, 0.013754928, 0.009081756, -0.041936293, 0.00946564, -0.0928473, -0.0896978, -0.036792494, -0.08151067, 0.080754824, -0.073809825, -0.0010088462, -0.024528876, -0.0020921952, 0.00485152, -0.07075027, 0.06086787, 0.049310554, 0.07849898, -0.07432532, 0.06811913, -0.04485026, 0.08699905, 0.07657515, -0.020508856, -0.007944703, 0.023198307, 0.07754318, 0.017782552, -0.07798974, 0.014122118, -0.027474752, -0.020559162, -0.064840935, 0.0066235675},
   {0.08923518, 0.0073746117, 0.028537324, 0.02616145, 0.025283998, -0.02088103, 0.06790017, 0.027887154, 0.058258854, -0.08501676, -0.077750236, -0.0032527228, -0.07640023, 0.027470069, 0.07188026, -0.04148235, -0.053950965, 0.07707966, -0.015388295, 0.08112388, -0.07320062, 0.008214634, -0.0036169537, 0.020016134, 0.02842366, -0.05273862, 0.06427423, 0.022901723, -0.08410277, 0.009010933, -0.027672205, -0.039347056, -0.010299668, 0.03609559, -0.053860944, 0.03716107, -0.093434505, 0.047801934, 0.073319666, 0.070636906, -0.00011922861, -0.059451688, -0.008946453, -0.08005732, 0.031521127, 0.071583815, 0.063735135, -0.037829645, 0.07176542, -0.04246232, 0.010307777, -0.021474697, -0.043102153, 0.00045959651, 0.07882772, 0.06886629, -0.047151443, 0.09087981, 0.044202484, -0.023328457, 0.02481, -0.07572725, 0.0498136, -0.019038051},
   {0.06161437, 0.07541173, 0.07672659, -0.058012586, 0.05879897, 0.059341256, 0.05081251, -0.07491747, -0.0004020613, -0.08789156, -0.013755217, -0.083203435, 0.07079736, -0.014785153, -0.023448765, 0.08748337, -0.061922323, 0.090648256, 0.0057910234, 0.06983075, 0.065844685, -0.061318886, -0.08367771, 0.084809996, -0.039257593, -0.06951844, -0.03208173, 0.04841557, -0.029647537, 0.08747736, 0.013702419, 0.059769325, 0.044547893, -0.03362788, 0.0023593223, 0.07051467, -0.09724654, -0.01869935, -0.08498823, -0.08640456, 0.03987039, -0.006563209, 0.050919257, 0.04209555, 0.061259277, 0.0025787682, 0.043119032, -0.029451363, 0.037248906, 0.08310504, -0.046129774, -0.043575693, 0.0029348803, 0.0065087005, -0.08658191, -0.059811514, -0.034296654, -0.06036247, -0.078237176, 0.021763576, 0.054886818, 0.006725207, -0.04833496, 0.07740117},
   {0.02861123, -0.0017882464, -0.06860669, -0.0155316945, 0.07747613, 0.065866135, -0.035373062, -0.052525774, 0.042073548, 0.06861064, -0.018638998, -0.036260255, 0.0017321333, 0.075974576, 0.0005581081, 0.091282316, -0.05586347, -0.031642076, 0.0022883117, -0.049907975, -0.025723396, -0.028052751, 0.053243756, 0.07332789, -0.080807626, 0.01633955, -0.027581578, -0.065118164, 0.032732137, 0.065447755, -0.02198478, 0.08131661, -0.07455549, -0.00947501, -0.06836876, 0.011055021, -0.07515499, -0.034275312, 0.017751046, 0.044713296, -0.033226717, 0.013473302, -0.049734656, 0.007608995, -0.003752896, 0.06757378, 0.03360385, -0.014942841, 0.0068317433, -0.06291149, 0.0061259484, 0.040398262, -0.08039345, 0.025963098, 0.09155444, 0.07431366, -0.035798594, 0.038239233, 0.013082147, -0.013561911, 0.0662381, 0.036135174, -0.0305937, -0.022065952},
   {-0.024460742, 0.09938632, -0.08517129, -0.019268394, -0.006128075, -0.037426934, 0.07740951, -0.0863412, -0.044305444, -0.039917834, 0.00030133873, -0.006932441, 0.058951892, -0.06059793, -0.046457358, -0.08250146, 0.08547621, -0.028881244, 0.006431967, 0.06273262, -0.050194282, 0.07151429, 0.06816572, -0.045977004, -0.090391226, 0.09402975, -0.06594254, 0.011452204, -0.068106525, -0.051463354, 0.052606978, -0.059698913, -0.07708102, -0.04613595, -0.030150514, -0.051896237, -0.012988605, -0.058200892, -0.012101601, 0.02750051, -0.07373175, 0.0038736463, 0.023444865, -0.07822843, -0.033956375, -0.060896255, 0.076764286, -0.009063523, -0.02000602, 0.013372044, -0.08571323, -0.0787066, 0.02941945, 0.02677992, 0.01791051, 0.025948085, 0.003926505, 0.07298961, -0.07234087, -0.047320895, -0.08833701, 0.07313395, -0.018821701, -0.06094668},
   {0.07900572, 0.045107502, 0.0668182, 0.012402504, -0.094032176, -0.083858855, -0.07889906, -0.015539524, -0.04525006, 0.071272984, 0.09236685, -0.0632764, -0.05438633, 0.085375436, -0.03703084, -0.01249373, -0.06242766, -0.034749985, -0.07094207, 0.07012075, 0.006769037, 0.07356231, 0.04033934, 0.067114346, 0.086719155, 0.011400721, -0.038846105, -0.07919528, 0.040291823, -0.06564884, -0.038111884, 0.024257697, -0.039657686, 0.084485486, -0.063721195, -0.073091924, 0.028825488, -0.04285527, -0.054970335, -0.07847995, -0.005396178, -0.02147387, 0.06350854, -0.03814637, 0.08210791, -0.00616309, -0.018368261, 0.056957707, -0.026070483, 0.021137405, 0.07214851, -0.06684703, -0.060304623, -0.030451655, -0.07638505, -0.061730392, 0.004267744, -0.05084346, 0.008356929, 0.0010459828, -0.077705316, 0.015001148, 0.053553633, 0.067256995},
   {0.05441602, 0.08892676, -0.009263318, 0.046389084, 0.040174134, 0.03235538, -0.056204397, -0.036231175, 0.01452885, 0.085432276, 0.06445793, 0.013335319, -0.08507473, 0.004162201, -0.019196868, -0.052115753, -0.020602101, 0.033356525, -0.034954317, 0.086149655, -0.01996852, -0.0696504, 0.06208312, -0.006324172, -0.06608818, -0.079174615, 0.07154793, 0.06932162, 0.08398085, 0.04084178, -0.0050816047, -0.015913462, -0.0059557557, -0.007909415, 0.04007549, -0.027707638, -0.080098815, -0.08286748, 0.06533675, -0.054556623, 0.043341372, -0.087548666, 0.002761206, 0.04971037, -0.010958067, -0.002366206, -0.034029506, -0.015084122, 0.021921035, -0.040650647, 0.067588195, 0.032601394, 0.06612534, 0.089416586, -0.03315279, -0.060737908, 0.006767062, -0.066527925, 0.023495488, -0.020396335, -0.036393877, -0.09092238, -0.002106695, -0.037239596},
   {0.02963131, 0.09095814, 0.032186426, -0.07567536, 0.023759095, -0.004366098, 0.02768487, -0.05948083, -0.04363805, 0.08928544, -0.024555616, 0.005799982, 0.015480876, -0.07109031, 0.06329643, -0.05535669, 0.049964827, 0.0031132698, -0.08782617, 0.029236553, -0.037442133, 0.031046096, 0.078987725, -0.042011827, -0.027626289, -0.04796617, -0.0143994745, 0.06382778, -0.079863265, 0.0834784, 0.062554896, 0.055698283, 0.04803262, 0.07462693, -0.03412029, -0.022748202, 0.034310676, -0.034421977, -0.020327356, -0.019483209, -0.021112947, -0.06438057, -0.08076855, 0.06475826, -0.085880905, -0.059214827, -0.020669162, -0.016092699, 0.022970602, 0.02295871, -0.042260267, 0.07891906, -0.07968917, 0.024768628, -0.078345105, -0.023287557, 0.091484025, -0.07561021, 0.022346579, -0.08621487, -0.013037268, 0.014993936, -0.016019892, 0.051960967},
   {-0.08770646, 0.079775736, -0.029718738, 0.08769335, -0.08656515, 0.0021672524, 0.09032335, -0.0152015425, -0.008359864, -0.022950096, 0.055769406, 0.07846887, 0.064572774, -0.0082523655, 0.025016166, -0.08498547, -0.06668214, 0.02555345, 0.034159206, 0.08342831, 0.02347492, 0.042865165, -0.0020084784, 0.0855886, 0.039603915, -0.00038531472, -0.042377267, -0.08339961, 0.0034132972, -0.021451466, -0.025090901, 0.07649716, 0.09081634, -0.07342381, -0.031611953, 0.0067757023, -0.07111399, -0.042041384, 0.05101125, -0.08262797, -0.05529894, -0.06878331, -0.02428637, 0.08554592, -0.08387492, -0.08241227, 0.017528094, 0.0033963711, -0.029796116, -0.04412627, 0.021957468, -0.069805466, 0.047863856, 0.06683009, 0.019148342, -0.06559341, -0.01735207, -0.012047193, 0.05714061, -0.03098097, 0.073802434, 0.077630185, 0.021958275, -0.07308567},
   {0.055868965, -0.03349883, 0.07452757, -0.06637213, -0.010215427, -0.039372418, 0.0548396, -0.008943272, -0.056019668, -0.053266723, -0.06880009, -0.007832263, 0.02599658, -0.071746945, -0.009684913, 0.06667293, -0.0052547357, 0.051051684, -0.026512355, 0.06346752, 0.0015454456, 0.022706375, 0.033379648, -0.055517413, -0.050463624, 0.06983588, 0.03471353, -0.07825571, 0.07480683, -0.04859295, -0.04520905, -0.062320318, 0.07888069, 0.06336751, -0.05076114, 0.0792066, -0.020858515, -0.0025051234, 0.06331062, 0.03347469, -0.08775524, 0.067838736, 0.09379507, -0.023133256, -0.07832192, 0.056476798, 0.079911105, 0.05007693, -0.027701765, -0.067998454, 0.027032414, -0.027919874, 0.037745375, -0.05550313, -0.0681684, -0.08017696, 0.075883046, -0.06456826, -0.009280212, -0.045708325, 0.05038644, 0.0533695, 0.060896114, -0.009474534},
   {-0.063465565, -0.083293386, -0.06317945, -0.019526169, 0.08231961, 0.0026822311, 0.054470316, 0.06252662, 0.066789754, 0.042392697, 0.012294292, -0.032323245, 0.08932955, -0.068196855, -0.022691905, 0.092761286, 0.08064064, 0.023451656, 0.03744758, -0.0762439, -0.081865355, -0.004241363, 0.06848688, -0.082021534, -0.0055131866, 0.046959393, -0.022342203, -0.0683605, 0.014971025, 0.008328959, 0.044486247, -0.07035297, -0.014399454, -0.0027987997, 0.07590327, 0.023164988, 0.08432425, -0.08499259, -0.04621455, 0.06074763, 0.017435716, 0.04763136, 0.032441165, -0.09071758, 0.00456529, -0.0152221685, -0.035130408, 0.053535372, -0.021442465, -0.018758707, -0.0038647777, -0.015131101, -0.03387054, 0.04363983, -0.06378608, -0.048856907, -0.01949488, -0.06775943, 0.085609995, -0.07711976, -0.08108259, -0.05171703, -0.06314829, 0.0835545},
   {-0.04200313, -0.045491908, 0.02388704, 0.04477274, 0.002833266, -0.07299735, -0.054980997, -0.049498606, -0.08867703, 0.05811018, -0.081966, 0.00069377926, 0.014959723, -0.065453775, 0.08037821, -0.09247183, 0.003011172, -0.0010441989, -0.024424814, 0.044065677, -0.038257673, 0.014020526, 0.026494494, -0.038703993, 0.055964336, -0.059364855, -0.014578971, -0.027444635, -0.028924145, -0.018485375, 0.08112826, 0.08355852, 0.015104048, 0.027556552, 0.03354288, -0.06925124, -0.08267237, 0.027698776, 0.07360512, 0.051724516, 0.010439792, 0.015832253, -0.040581703, -0.06497034, 0.09442449, -0.009710592, 0.0023257567, 0.0030938534, 0.03135104, -0.025492374, -0.044942826, 0.053033344, -0.039664213, 0.0712272, 0.0918855, 0.0023344106, 0.029339062, 0.069004, -0.010543786, -0.01123362, 0.032279953, -0.08183435, 0.0758745, 0.011603363},
   {-0.017912414, -0.05954131, -0.01871545, -0.005264107, 0.067200884, -0.071422465, -0.07644882, 0.0184336, 0.0017183118, -0.02226995, 0.00110621, -0.053947326, 0.04954537, 0.07983666, -0.078843005, 0.04685379, 0.015949056, -0.04043668, 0.015931323, 0.041532017, -0.03837767, -0.0073062214, -0.036004175, -0.020928107, -0.0042006797, 0.022152066, -0.036064424, 0.0882388, -0.042368364, -0.061718013, -0.0081123235, 0.0800001, 0.071007706, 0.04782309, 0.04784358, 0.0461497, -0.049758453, -0.027813165, 0.07000742, 0.051264115, -0.09444026, -0.07561941, -0.030808996, 0.057976507, 0.07775421, -0.041982546, -0.061677597, -0.0628496, 0.0050204345, 0.059252497, 0.062656246, 0.020455994, -0.056894407, 0.03348518, 0.0017781854, -0.076583244, 0.08153121, -0.048519593, -0.038429264, 0.035460383, -0.020167338, 0.03483235, -0.05198173, -0.074956015},
   {-0.06810849, 0.017165074, -0.06278002, 0.07437478, 0.051669184, -0.076725684, 0.041078288, -0.014340025, 0.06590016, -0.048802603, 0.025002353, 0.078475244, -0.009715751, 0.074423306, 0.06947022, 0.040077426, 0.08567759, -0.009518474, 0.0011958256, 0.020981194, -0.005265584, 0.011266989, -0.096248426, -0.07757376, -0.0814244, -0.058624152, -0.023722664, 0.053462945, -0.008347362, -0.011860959, 0.07609597, -0.0743615, 0.08722966, -0.020286756, -0.052714966, 0.0691063, -0.008346954, 0.034483742, -0.0449611, 0.060518466, -0.05811191, -0.059318617, 0.055965185, 0.01635094, -0.063205555, -0.08157952, 0.0047671823, -0.007447524, -0.05601593, 0.0011298413, 0.07388368, -0.017991804, 0.073120005, 0.07070338, -0.07579541, 0.024895117, -0.037125964, 0.018585522, -0.015533894, 0.033871155, -0.08681375, 0.01715701, -0.0049435217, 0.07011681},
   {-0.012304585, -0.062408123, 0.019142086, -0.032918278, -0.0023501685, 0.030002894, -0.07723321, -0.07522485, -0.033866048, 0.048398353, 0.0063052773, -0.05105074, -0.029522479, 0.022824982, 0.015769355, -0.08870849, -0.069314964, -0.025405921, -0.015603691, -0.06314936, 0.02237029, 0.024903284, 0.06132425, -0.021131195, 0.052092236, -0.0047091944, -0.067645356, -0.045715746, 0.08464923, -0.07640552, -0.064691246, -0.016394468, 0.06974884, 0.014769394, 0.07678933, -0.039144117, -0.033322386, 0.08434405, 0.004960586, 0.055581965, -0.05969255, 0.06590984, 0.058316264, -0.031224888, -0.066537514, -0.09515628, -0.06841204, -0.08799502, 0.012156575, 0.078156695, -0.06910277, -0.055401232, -0.06585674, -0.042991664, 0.031954713, 0.025911305, -0.021015635, -0.0660048, -0.04294768, 0.0001708736, -0.08975212, 0.069746904, -0.055246387, -0.09399983},
   {-0.0006083722, 0.05272288, 0.07285596, 0.024745917, -0.041766886, 0.031452116, -0.024032805, -0.019694887, 0.0382491, 0.01732891, 0.07154941, 0.047032773, 0.06836086, 0.07321005, -0.083140135, -0.07819608, 0.074650474, -0.076171376, -0.06578725, -0.07464276, -0.025882289, 0.0019452196, -0.0066446057, -0.037497908, 0.07563813, -0.0636869, 0.012914891, 0.026767524, 0.03040538, 0.010676697, -0.05432401, -0.051390026, -0.037311617, -0.062485367, -0.0571044, -0.054027356, 0.049852025, 0.084540635, 0.08740579, -0.068378896, 0.0633768, -0.07315887, 0.06536758, -0.042654905, -0.07347206, 0.011781125, 0.020908391, -0.047737345, -0.019859692, 0.04468604, -0.021144705, -0.069873035, -0.046324693, -0.03714019, 0.08831317, -0.033980194, 0.049840398, 0.028254187, -0.055597197, -0.016567934, 0.082707964, 0.09250582, -0.048397977, -0.06829235},
   {0.05327572, 0.06925993, -0.08060037, -0.09519242, 0.029588332, -0.08877532, 0.0041135587, -0.0051949974, -0.090775445, 0.07572358, 0.07319722, 0.0016598951, -0.048424993, 0.02001221, -0.02913241, 0.014216788, -0.06863213, -0.068535015, -0.0181892, 0.047729176, -0.07324735, 0.016689187, -0.042775847, -0.07628119, -0.010896374, -0.0715183, 0.07155663, -0.083225876, -0.057001717, 0.020559646, 0.033396684, 0.08801701, -0.091691315, -0.06574009, 0.07363504, -0.08680588, -0.052195482, 0.06892369, 0.06097089, -0.08858508, 0.045223676, -0.01639492, -0.08350544, 0.032117, -0.035233807, -0.07126901, -0.010854162, 0.05368106, 0.06882275, -0.08466141, 0.03952751, -0.043044195, -0.022217046, -0.07769462, 0.07168459, -0.0033245238, 0.012373849, -0.021005558, 0.013511546, -0.049579937, 0.0128483735, -0.08071108, 0.07653895, 0.062730916},
   {-0.08328147, 0.08742121, 0.07284674, -0.06785879, 0.04856686, 0.01708248, 0.011946011, -0.056233596, -0.014781684, -0.08121739, 0.020997815, 0.071354836, 0.0050496235, 0.059112888, 0.055029146, -0.069981344, 0.06248331, 0.05635286, -0.024619207, 0.08030156, 0.019408923, -0.06902261, -0.016462153, -0.086014636, -0.07597177, 0.08114694, -0.031093705, 0.05122707, 0.041347496, -0.057541672, 0.020022323, -0.03399924, -0.028228626, -0.024864532, -0.06974759, -0.037479077, -0.043404523, -0.07575758, 0.06470649, 0.038888074, 0.076835915, 0.016775846, -0.038075954, -0.0027982295, -0.040288664, -0.04164339, -0.008323858, 0.06960494, 0.07653741, 0.043283958, -0.061959825, 0.00458692, 0.00088376424, -0.02324617, 0.008651413, 0.004365766, -0.04293067, 0.043546148, -0.053907048, -0.042968266, 0.0518094, -0.03269066, -0.068869606, -0.018522428},
   {-0.056451432, 0.09304461, 0.014218838, -0.06713421, 0.05743896, -9.897529e-05, 0.086560816, -0.058372926, -0.022622518, -0.021712704, 0.02142971, -0.02334692, 0.08183002, -0.08066588, 0.029759586, 0.06764192, 0.056974735, -0.06601977, 0.0013369545, 0.0697997, 0.06709538, -0.029571297, 0.06932901, -0.07411254, 0.04362416, 0.014956971, -0.07626021, -0.056178536, -0.057738442, -0.006571196, -0.021835072, 0.036817018, -0.07609584, -0.05714151, 0.02642718, 0.00488535, -0.052308824, -0.07450602, -0.0121365, -0.008720115, -0.018916624, 0.01321622, 0.06798135, -0.062678695, 0.035979692, 0.07274092, -0.084963426, -0.07099317, -0.08574495, -0.040801376, 0.075584404, 0.071022935, -0.08558613, -0.061041694, 0.020688266, -0.041050404, 0.081268124, 0.0761413, 0.09240217, 0.046949144, 0.03969607, -0.015156068, -0.061508864, -0.03390449},
   {-0.04219873, 0.046831056, -0.022815028, -0.07052307, 0.04722232, -0.02664987, 0.022755003, -0.05093612, 0.016467508, 0.07203662, -0.08944693, 0.005490884, 0.0008436069, -0.031665884, -0.010521203, 0.07568727, -0.01149245, -0.003121525, -0.0570257, -0.055530462, -0.054732498, -0.051160946, -0.009182963, -0.061121993, 0.06142915, -0.06641138, 0.07289338, 0.0051938556, 0.0071394965, -0.088265054, 0.0009309616, -0.012244154, 0.08517321, 0.07546318, -0.018117147, -0.094136596, 0.019804798, 0.08539772, 0.07713099, -0.023198508, 0.009789856, -0.090955906, 0.054164324, 0.09221407, -0.042409353, 0.053062644, 0.013957779, -0.017708937, 0.053879227, -0.009484135, 0.036560267, 0.0546534, 0.010972605, -0.018483438, 0.031007543, 0.058350995, -0.071003914, 0.06067341, 0.04197382, -0.03300211, -0.06193635, -0.02681607, -0.03312635, 0.00398723},
   {-0.061304893, -0.040451653, -0.026192663, -0.051363792, 0.05011933, -0.07797612, -0.011516684, -0.067963, 0.028092455, -0.059663188, 0.0055355877, 0.05557749, -0.08618143, 0.055637885, -0.08371153, 0.038488038, -0.0988018, -0.013326012, 0.08051316, -0.08285554, -0.0123655535, 0.062361587, 0.039445177, 0.07481689, -0.07433806, 0.04402442, 0.05760604, 0.022125924, 0.077713765, 0.043584414, 0.063313276, 0.051007856, 0.078831084, 0.033789817, 0.052401237, 0.08763965, 0.07965118, -0.07830821, -0.06553801, 0.010208048, 0.08643155, 0.06606176, 0.093608126, -0.028586335, -0.0039853496, 0.039032694, -0.08297894, -0.045570385, -0.05033732, 0.02900266, 0.06671904, -0.081589326, 0.0040395698, -0.010573998, -0.08256654, -0.042067576, 0.053245094, -0.015163939, 0.06090822, 0.06353243, 0.077996895, -0.011315197, 0.043470077, 0.039467897},
   {0.017037923, 0.073572464, 0.010557375, -0.085604884, 0.07663865, -0.051135544, -0.071783386, 0.076833986, 0.04317137, -0.08223621, 0.0035616532, 0.009322104, 0.06666625, -0.083229214, 0.074005656, -0.033194706, -0.044813015, 0.02111718, 0.050766744, -0.09369473, 0.0043512685, -0.05169737, -0.00019513353, -0.060353052, -0.0916317, 0.006488465, -0.028841067, 0.063111074, -0.08409532, 0.017849773, -0.07366747, -0.04850954, 0.03171035, -0.07039238, 0.024349676, 0.08694814, -0.08783254, 0.08252309, 0.016294569, 0.030698262, 0.041953884, -0.044113602, 0.0039545423, -0.009418815, -0.06781368, 0.011854163, -0.052575007, 0.074678764, 0.03135143, -0.018898582, -0.09603672, -0.0037908107, -0.07260786, 0.06288465, 0.07009628, -0.06403486, 0.058821823, -0.050983857, 0.00820902, -0.0078062587, 0.0808902, -0.041493475, -0.054798074, -0.01897837},
   {0.0019485619, 0.08194237, -0.05983043, -0.09446031, -0.012498269, 0.06773265, -0.05699698, 0.08321891, -0.031459585, -0.05524834, -0.073446274, 0.08066237, -0.065320954, 0.013245099, -0.018855706, -0.00068575144, -0.04586518, 0.012823015, -0.05677102, 0.05043097, 0.043056652, -0.065269545, 0.043350894, -0.009570643, -0.010154429, -0.08905755, 0.009312167, 0.055674665, -0.06798623, -0.018764839, 0.0796774, 0.020633057, -0.07088923, 0.08300752, -0.03854631, -0.048595667, -0.0060997168, -0.026194215, 0.025004799, -0.015135884, 0.040468942, 0.08718256, -0.049164437, 0.090058215, -0.020284997, 0.018638996, -0.08848066, 0.066903956, 0.021176647, 0.020513797, -0.009220796, 0.05958534, -0.03833413, -0.005624555, -0.032038458, -0.08703069, -0.019239537, -0.04456137, 0.035388388, -0.062399592, 0.041782144, 0.04144279, -0.06985891, -0.08220196},
   {0.05210443, -0.054957133, -0.017925415, 0.028578408, 0.013422866, 0.0057916427, -0.090498686, 0.04953557, 0.0825388, -0.023441665, 0.061146177, 0.08468744, 0.06438836, 0.064465985, 0.037445687, -0.005816944, -0.018217808, -0.055530697, -0.08822672, -0.042379458, 0.0038408376, 0.011904797, -0.07252683, -0.08032248, -0.06768645, 0.032652702, 0.004829347, 0.01165436, -0.076671034, 0.035775058, -0.06990523, -0.095891915, -0.017554283, -0.055585545, -0.0782471, 0.03853846, 0.07589322, 0.0691145, 0.07170759, 0.016428515, -0.010511603, 0.05071246, 0.08740872, 0.0334521, 0.037003253, -0.08160101, 0.055721678, 0.06036891, 0.07947578, -0.027856816, -0.053590663, -0.025276475, 0.022047993, 0.041512676, 0.016373523, -0.030358728, 0.07752483, 0.016570982, -0.08638732, -0.046496965, -0.08053111, -0.012826487, -0.030025542, -0.037697908},
   {-0.01877696, 0.08853213, 0.06147044, -0.08907398, -0.015396631, 0.0046645217, 0.023259904, 0.0019338612, 0.026536103, -0.0408386, 0.04097054, 0.08495103, -0.08068879, 0.043289576, -0.016491793, 0.024377763, -0.08004055, -0.077219754, -0.052023377, 0.057690173, -0.09786495, -0.05074835, -0.058938444, 0.036505677, 0.08954647, -0.07056163, 0.08070764, 0.07368532, -0.062180497, 0.08614861, 0.036392577, 0.010212615, -0.028982721, -0.061560117, 0.007199862, 0.0874339, 0.06780206, -0.08262636, -0.03951472, -0.055147126, 0.0787476, 0.07676054, 0.093383744, 0.068651, 0.0762445, 0.08727393, -0.08239052, 0.008493883, -0.010475161, 0.03906082, 0.047645103, -0.059395842, -0.05009006, -0.077545926, -0.03153199, -0.025202982, 0.0043271305, -0.006520558, -0.02169589, -0.072000355, 0.027340805, 0.09047472, 0.00446884, 0.020314317},
   {-0.060382083, 0.029255198, -0.015573834, 0.039136343, 0.01788597, -0.059229277, -0.0752719, 0.061040513, 0.08535851, -0.048225645, -0.0027486607, -0.032062158, 0.0032829195, 0.05674238, 0.020044036, 0.047507696, 0.06768198, -0.0067937747, 0.040064864, 0.06044962, -0.060121607, -0.051686607, -0.049725253, 0.020408288, 0.06615391, 0.0572781, 0.026672712, 0.0371773, 0.034688927, -0.068592355, -0.08047303, 0.057738163, -0.017827012, 0.046152715, 0.0068219583, -0.046689756, 0.037818033, 0.020408647, 0.009507827, -0.088178106, 0.00442764, 0.044123687, 0.07065742, -0.03548942, -0.015050582, -0.075541824, 0.06804014, 0.013065755, -0.010444797, 0.0064154635, -0.071173504, 0.047247387, 0.027872542, -0.053621817, 0.051034637, -0.076884076, 0.047351442, -0.058548473, 0.01806505, 0.012875789, -0.012285699, 0.07744164, 0.04815455, -0.005622958},
   {-0.05130041, -0.035701714, 0.035630796, -0.014995493, -0.03158722, 0.033588592, 0.08875021, -0.07098777, -0.039072875, 0.022916904, -0.0067216456, 0.07637796, -0.010071263, 0.08901459, 0.02607432, 0.016396523, -0.09215063, 0.058003165, -0.018611014, -0.093986295, -0.0037262891, 0.07797645, -0.0463431, 0.053616427, 0.08951537, 0.014783571, 0.08415256, 0.03632892, 0.0047972575, 0.0819995, -0.010645516, -0.0932934, -0.007544823, -0.051532306, 0.048662458, 0.022108236, 0.041152038, 0.043075427, 0.07596735, -0.034251545, -0.060936112, -0.023197688, -0.030613055, 0.028027669, 0.008832358, 0.073724784, -0.010764788, -0.028468737, -0.047675923, -0.05302181, -0.06682163, -0.073230684, -0.0884897, 0.006163001, -0.06517823, -0.007860493, -0.02942797, 0.011650406, -0.044786807, 0.008016064, 0.07486052, -0.06529495, -0.048853554, 0.0841196},
   {-0.03009914, -0.031359557, -0.06814459, 0.013407145, -0.030556364, -0.05798251, 0.08975018, -0.09902916, -0.039840978, -0.06421515, -0.003953181, -0.012245724, 0.0054276586, 0.017179316, -0.0031264871, 0.03210547, -0.08281074, -0.050610937, 0.034327634, 0.020876618, -0.0121838655, -0.028666751, -0.033862904, 0.048540525, -0.076154165, -0.063392244, -0.00438741, 0.08054824, 0.018109992, 0.069248505, 0.015934732, 0.016433625, -0.09055879, 0.079177216, -0.028887842, -0.08226531, 0.047808845, 0.06811395, -0.08307206, -0.0006112829, 0.073547766, 0.0071995035, -0.00062362937, 0.009190813, -0.0048859776, 0.07852765, 0.012286995, 0.006293127, 0.0522188, -0.07401518, 0.015820948, -0.063594274, -0.065521546, 0.08565413, -0.00496684, -0.030347927, 0.0025013795, 0.020192005, 0.01604475, -0.026450869, -0.027578041, -0.034005295, 0.012909414, -0.085628755},
   {0.01036089, 0.022110827, -0.0988609, -0.0039092004, -0.08755145, 0.018492404, 0.09123407, 0.08093149, 0.050487183, -0.06219729, -0.036159042, -0.023853973, 0.05963727, -0.034427173, 0.0079585835, -0.08871094, -0.03641775, 0.042741053, 0.044389807, -0.06336814, -0.023564765, -0.03216896, 0.037855275, -0.03757164, -0.013067022, 0.02902201, -0.08522594, -0.05733038, -0.04617233, 0.06513249, 0.017761335, -0.021809718, -0.019421048, -0.04285547, -0.020929845, -0.075922474, 0.07804324, 0.03945874, -0.07259052, 0.083795436, 0.011832837, -0.058231607, -0.003848268, 0.050218575, 0.047767773, -0.04536047, 0.049401183, -0.058786623, 0.008956587, -0.062187836, -0.02568619, 0.022446118, -0.055302564, 0.007508181, 0.0931538, -0.081089675, -0.049945176, 0.008481276, 0.051015325, 0.087587565, 0.07813256, -0.06817772, 0.003714184, 7.5333555e-05},
   {0.0795621, -0.0023145436, -0.06709455, -0.04477361, -0.018665355, -0.04004891, -0.08630044, -0.034783296, 0.032083824, -0.021831315, 0.0017300397, -0.0070705754, -0.007901162, -0.024353083, -0.013002694, 0.01727771, 0.073328964, 0.08656358, 0.016629249, -0.018127382, -0.054294698, 0.024898443, -0.049471095, 0.057088666, 0.0683463, -0.07282115, -0.06462745, 0.0864653, -0.04536038, -0.024483867, -0.09120047, -0.076890714, -0.03532351, -0.023644459, 0.006559165, -0.055535574, 0.03743409, 0.0031670164, -0.07492606, 0.063392125, -0.0609623, -0.08985424, -0.077856064, 0.01897598, -0.008114439, -0.077947475, 0.053200826, -0.0698922, 0.0033154602, -0.086762294, 0.027624862, -0.07050441, -0.064475894, -0.023328617, 0.015664607, 0.009705329, -0.0037346706, 0.005165413, -0.034367617, 0.08052794, 0.031695627, 0.08654026, 0.053658772, -0.04920285},
   {0.04347069, 0.031374954, 0.04051549, -0.008709691, -0.0059226323, -0.004172734, 0.06952582, -0.07179282, -0.025091603, 0.05706743, -0.05678715, 0.029425923, -0.013933696, -0.0010748368, -0.036854383, 0.044950373, -0.09739319, -0.056176133, 0.039998315, 0.023051258, 0.005719687, 0.015658878, 0.008555726, 0.074549325, 0.049975235, 0.016943786, 0.07234987, -0.07602397, -0.041201863, -0.01584164, 0.067585334, -0.09342661, 0.07599027, -0.055277366, 0.020076228, -0.03066366, -0.0008674343, 0.043414894, 0.008137244, 0.07703278, 0.021023538, -0.07194233, 0.078261025, 0.014886275, -0.08782902, -0.03169742, 0.073243946, -0.06792854, -0.055694137, -0.08829102, -0.03635833, -0.056316234, 0.0040494744, -0.0022526458, 0.015757002, -0.024651999, 0.00323348, -0.023165513, -0.074038655, 0.02549268, 0.016767059, 0.09005227, 0.024476646, 0.03985102},
   {-0.084987156, 0.032963496, -0.03681488, 0.05255511, -0.089123584, 0.013657406, -0.038478274, -0.020821474, 0.07514395, 0.0047323657, -0.038645677, 0.08233653, -0.050366577, 0.051565748, 0.044399716, 0.06327648, 0.05322319, 0.08714212, 0.044756256, -0.011492245, -0.077718586, -0.065528095, -0.038846724, -0.050020944, 0.061319303, -0.07788263, -0.0123190405, -0.07211513, 0.028765038, -0.06438453, -0.026180184, 0.02829859, -0.048482575, -0.07677738, -0.082051314, -0.011286929, -0.061133564, 0.03571195, -0.033324007, -0.050350312, -0.040664047, -0.06566962, 0.017397612, -0.042051565, -0.02876426, -0.077927366, -0.007458521, -0.08063163, -0.026432795, -0.033066615, 0.011207789, 0.02562765, 0.02565035, 0.0011480376, 0.070838325, -0.03939777, 0.020193346, -0.024832089, -0.024916515, 0.0060259993, 0.029144527, -0.02154155, -0.054738, 0.044839006},
   {-0.046578556, 0.02861529, 0.023407502, -0.036671918, -0.090707794, 0.050629742, 0.0053750616, -0.075981215, -0.016765954, 0.03499748, -0.055941675, -0.0142196715, -0.014587209, -0.08943856, -0.017003447, 0.025107145, -0.0624107, 0.020041563, -0.07154825, -0.058250405, 0.033211563, 0.07469448, -0.091847055, 0.08354711, 0.090546116, 0.05033713, -0.00907603, 0.04959987, 0.06973461, -0.07115425, -0.011758084, 0.05761662, -0.013427734, -0.07882743, 0.052392516, 0.022372222, 0.053534374, 0.08020861, -0.019452065, 0.030979864, 0.066240184, 0.08659751, 0.05828016, -0.009376012, -0.058078423, 0.04510839, -0.06152014, -0.005957595, -0.051853493, -0.024558395, -0.0030831613, -0.04321235, 0.029419515, 0.00096677244, 0.014870681, 0.06648635, 0.09364157, 0.04280346, 0.057867773, 0.042768016, -0.08954613, 0.046446897, 0.038733207, -0.047676887},
   {0.058039285, 0.03330177, 6.1184706e-05, 0.079799175, 0.08263285, -0.08392288, -0.059981436, 0.03580537, -0.034993317, 0.0687402, 0.046959825, 0.036234625, 0.057600744, -0.06173635, -0.022583395, 0.07107549, -0.07823777, 0.06722125, -0.0802441, 0.060848914, -0.078970924, 0.0015766125, 0.066554576, 0.018542819, 0.08346133, -0.016979314, 0.046160087, 0.026530055, -0.021382116, -0.042861864, -0.014977701, -0.088008374, -0.041170046, 0.068469025, -0.022479456, -0.09123204, 0.059894532, 0.074369505, 0.004494667, -0.0009079501, -0.033773478, 0.04970903, 0.08584546, -0.09159227, -0.01022428, 0.0038007824, -0.03758119, -0.011586183, 0.03644034, 0.033387527, 0.028096419, -0.035978805, 0.02448039, -0.082685195, 0.015803881, 0.08862552, 0.0016640427, 0.016646992, 0.046741746, 0.048062854, 0.029871915, -0.09313667, 0.059759613, 0.061167847},
   {-0.087034635, -0.035746, 0.07234439, -0.07625512, -0.075752966, -0.015851777, -0.060505074, 0.08340687, -0.0020660432, 0.07555918, -0.002230905, 0.034482054, 0.06765417, -0.06037407, -0.04452463, -0.08074219, 0.06963145, -0.00021287799, 0.013627306, -0.04583834, 0.03677212, 0.08861778, 0.052733917, -0.021034367, 0.05731409, 0.08296324, 0.03842924, 0.048236713, -0.03352401, -0.087520964, -0.020128585, 0.08069264, 0.01658713, -0.021026678, -0.012666137, -0.022722183, -0.0033839638, 0.041162156, 0.015867576, 0.06776301, -0.039688386, -0.021350369, -0.009553458, 0.0048505664, -0.021237135, -0.014256238, 0.010271384, -0.087558016, -0.061494756, 0.075265154, 0.014257168, 0.031459615, 0.05097285, -0.002734065, -0.009046711, 0.03608876, -0.005799125, -0.0036736932, -0.004412867, 0.054733012, 0.0016681735, 0.039536156, 0.032062113, -0.09430346},
   {0.07132142, 0.08898449, 0.020385092, -0.07536524, 0.09029695, -0.080883056, 0.09330865, -0.044224802, -0.040239505, 0.09251771, -0.016199686, 0.023285225, 0.0471688, -0.04977386, 0.043810524, -0.025325917, -0.026080817, 0.0904047, 0.013904639, -0.06448522, 0.018260678, -0.07435367, 0.064953886, 0.000109262764, 0.00838649, 0.06823834, -0.0895394, 0.08538269, -0.06848456, -0.028897151, 0.0713444, -0.088696495, 0.0071293116, 0.05810404, -0.051580932, 0.023318017, -0.07756392, -0.09337407, 0.08370254, 0.057413258, -0.09195475, 0.05898433, -0.06852898, 0.01498317, 0.069726974, -0.012069314, -0.005465073, -0.02838304, -0.0422466, 0.030269103, 0.003911281, 0.037491344, 0.030962601, 0.026352562, -0.07899886, 0.04414171, 0.013500168, 0.06279447, -0.066759765, -0.0701785, 0.08506854, -0.014652774, 0.054929253, 0.017515063},
   {0.074833564, 0.07998576, 0.015371468, -0.009776091, -0.07066239, -0.002151114, 0.07006901, -0.058629837, 0.059003282, -0.055851206, 0.016263679, 0.027340198, -0.02578006, 0.09516967, -0.07328279, -0.067244165, 0.040419545, -0.09081525, 0.062031142, 0.081486, 0.037184138, 0.023177328, 0.077408545, 0.062135406, 0.077400245, 0.048511337, -0.018507583, -0.07036894, 0.012804262, -0.055937804, -0.09058202, -0.014798253, -0.04047704, -0.029782481, -0.025770517, 0.07667218, 0.080770336, 0.006152486, 0.035673987, 0.026255868, 0.03821945, -0.079183124, -0.035178233, 0.008460186, -0.060010534, -0.007493861, -0.025060367, 0.06791156, 0.020739606, 0.08411363, 0.07084635, -0.068975165, -0.055356674, -0.038849544, 0.048146926, -0.07708167, -0.066221185, -0.04963583, 0.040181153, -0.0352296, 0.045160905, 0.029984921, -0.0033024882, 0.07644009},
   {0.0135088945, 0.06554907, 0.0062282286, 0.044267785, 0.07104629, -0.04883614, 0.07302429, 0.055523064, 0.05428703, -0.04255601, -0.05171968, -0.022590093, -0.03284313, 0.07639442, 0.019863375, 0.040806808, -0.016938439, 0.07412008, 0.035828628, 0.015305502, 0.018218307, -0.037481934, 0.0070384596, -0.03707703, -0.07744311, -0.07428841, 0.060444202, -0.022025503, 0.042185836, 0.06641998, -0.07355164, 0.02665507, 0.044944488, 0.02718149, 0.06492404, -0.07688176, 0.024014696, 0.054872394, -0.086027235, -0.024918184, -0.0495058, -0.038173046, -0.06679052, 0.08677813, -0.08425587, -0.03671662, -0.09473096, -0.07443432, -0.049297206, 0.06938678, 0.067382075, 0.040060185, 0.05483367, -0.079520196, 0.04144571, 0.03337226, -0.014186474, 0.041159663, 0.0221093, -0.081389725, -0.06906843, 0.0019884408, 0.024070602, -0.023006879},
   {-0.035876866, -0.015458207, 0.05824825, -0.04895858, -0.014529792, 0.06334116, 0.020238563, -0.036796268, 0.046532616, -0.08531166, 0.016430743, -0.0360151, -0.055087812, -0.05314504, 0.055862986, -0.052375287, -0.06559882, -0.03876678, -0.06383999, -0.01539965, -0.093841575, 0.061242804, 0.05881366, 0.011671439, 0.0049657635, -0.0714715, -0.06070243, 0.03679483, -0.0574792, -0.032817967, 0.0701583, 0.015995068, -0.0249914, -0.060110103, -0.05020165, 0.015833972, 0.027013935, -0.064400874, -0.071681336, -0.06880438, -0.05136923, 0.04592801, -0.040859696, 0.06449262, -0.05010588, 0.0272647, 0.08612212, -0.06753099, 0.08093991, 0.039773844, 0.07066867, -0.026337214, -0.016436955, 0.023340099, -0.0315796, -0.08394193, 0.030412769, 0.09155461, 0.0060027167, -0.0117682805, 0.055092815, 0.0833284, 0.08274938, -0.093000755},
   {0.047640447, 0.011594369, -0.086443625, -0.038584422, 0.052945018, 0.054710455, -0.06479581, 0.03503708, 0.045361985, -0.061638337, -0.04457395, -0.038540866, 0.012983091, -0.012255925, -0.048549764, 0.07531101, -0.08818298, 0.017151117, 0.07956173, 0.038881253, -0.06046082, -0.06824725, -0.09315731, 0.044625096, 0.07388136, -0.078869045, -0.065323204, 0.040488403, 0.024852306, 0.011030652, 0.055295188, 0.078219965, -0.019546106, -0.050534043, -0.03760287, -0.057360575, -0.04828856, 0.028941445, -0.050119996, -0.0071175843, -0.031143852, -0.044309705, -0.08209169, -0.08230403, 0.07031129, 0.0547557, -0.002945465, -0.084269755, -0.043963652, -0.051054236, 0.054729972, -0.019514292, -0.03909432, 0.076341294, 0.072471775, 0.04192816, 0.09430226, 0.058046333, -0.069331855, 0.009769949, -0.023002, -0.0794318, -0.036436714, -0.05496018},
   {-0.01240417, -0.04519465, 0.043401055, -0.001287043, 0.0041810055, 0.087206736, -0.022068722, -0.06660834, -0.027961694, -0.00054030505, -0.054457482, -0.05844535, -0.07731472, 0.008328008, -0.028391682, -0.03256945, -0.030486785, -0.049034897, -0.034947686, -0.026220398, -0.04644363, 0.029094676, 0.044680458, -0.03421034, -0.02422658, 0.022532698, -0.036799427, -0.08797045, -0.025849693, 0.04038351, -0.035314977, -0.07792592, 0.06913892, -0.040056877, -0.085070394, 0.059948146, 0.019314576, 0.09015807, 0.020491527, -0.029001035, -0.06601529, -0.08677123, -0.021860017, -0.08241055, 0.06982136, -0.04700599, 0.044164084, 0.060152322, 0.04362304, 0.018928142, -0.05578235, -0.017400876, -0.086892575, 0.036976434, -0.08519948, 0.07996227, 0.052887972, -0.025826128, -0.015597552, -0.022391368, -0.06410271, -0.03206825, -0.06632929, -0.033154402},
   {-0.06895441, 0.08374014, 0.019853288, 0.078544155, 0.0211398, 0.004406701, -0.05013028, -0.03107293, 0.029107248, -0.026804253, -0.00491865, 0.018115066, -0.020269237, 0.00027087962, -0.0226489, 0.042106412, 0.0072292043, 0.076214604, -0.051340096, -0.020229833, -0.10156955, -0.06987636, -0.08548826, -0.08824861, -0.061059877, 0.07349362, 0.0073339837, -0.062750556, 0.018625073, 0.056238808, -0.059954043, 0.024434024, 0.0017242357, 0.042911906, -0.086248204, 0.009008145, 0.08477933, 0.08906263, 0.06438907, -0.040469587, 0.046769135, -0.082724795, 0.025956113, 0.039175354, -0.009177859, 0.06899961, 0.07085326, 0.027598856, -0.04389411, 0.07508936, 0.04274685, -0.027454413, -0.023992449, -0.014314614, -0.052869476, -0.04025793, -0.03572377, -0.014505311, -0.017709203, 0.04234019, -0.0064476426, -0.036708187, 0.024136769, 0.07965023},
   {-0.00034876296, -0.083904296, 0.011222517, -0.009670269, 0.038886413, 0.07573528, -0.039666086, -0.042647142, -0.08374275, 0.072069496, -0.078169584, -0.07999527, 0.056133263, 0.048115853, 0.05077871, -0.018092707, 0.0820216, -0.0731618, 0.058504485, -0.027549833, -0.0014426606, 0.092364445, 0.018273022, 0.04183399, -0.050624996, 0.07796965, 0.06119131, -0.04733023, 0.04835891, -0.038261686, 0.084277414, 0.034541797, -0.048845563, 0.00471854, 0.022305476, -0.028289268, -0.05425885, -0.09275276, 0.047485646, 0.054447137, 0.00045956924, -0.04908518, 0.06699624, 0.028238945, -0.048915733, 0.00030843273, 0.01909799, -0.09285246, 0.06897502, 0.006810529, -0.017162055, -0.0010559708, 0.06785348, 0.050671704, 0.071406014, 0.041668735, -0.039161425, 0.017893817, 0.06507132, 0.02606211, 0.010160164, 0.055287443, -0.079890475, -0.09734495},
   {-0.010148733, -0.087040104, -0.004011079, 0.07654594, -0.02341969, 0.060215995, 0.012677078, 0.061772864, 0.053998183, -0.08056236, -0.021627925, -0.028062303, -0.022398531, 0.05031556, -0.06178338, 0.08487717, -0.027519956, 0.07698197, 0.060789265, -0.09760414, -0.045443468, -0.060044203, 0.037785783, 0.022093013, 0.04949347, 0.07638495, 0.06352045, -0.07161984, -0.048440456, 0.010526806, 0.06835156, -0.09399215, 0.036130317, 0.06601799, -0.0572894, 0.032801863, -0.0038595689, 0.018015295, -0.09502877, 0.028173849, 0.030772232, 0.055104904, -0.05696993, 0.04269258, 0.07243034, 0.07107661, -0.019987676, 0.022240097, -0.06450266, 0.08622981, 0.07511979, 0.07284672, -0.076324336, -0.03299974, 0.03775499, 0.07855092, 0.07872116, -0.017392332, 0.093062915, -0.018506633, 0.07008148, -0.047404952, 0.067829914, 0.07535813},
   {-0.03499319, 0.060565986, -0.09403895, -0.030163437, -0.008774952, -0.07377385, -0.07576177, -0.04750505, 0.08517098, 0.07777573, -0.02752345, 0.05061722, -0.051671647, -0.013304051, -0.08747097, -0.062308874, 0.04321645, -0.059159692, 0.06500738, 0.08204708, -0.08712658, 0.05146656, -0.047328506, -0.041594665, 0.0033577215, 0.05700301, 0.07993728, -0.020885233, 0.07816032, -0.009142175, -0.04274621, -0.04672168, 0.07671585, -0.08455555, 0.056681708, -0.04449807, -0.081405826, -0.025497869, -0.0010543371, -0.011084855, -0.07479317, 0.014207736, 0.08676928, -0.006658189, -0.058900382, -0.0984911, -0.03314521, -0.01753596, -0.011531824, 0.03260549, 0.02892831, -0.056365427, -0.058718003, 0.09106738, 0.062104963, -0.029885245, -0.088200934, -0.03173838, 0.004971266, -0.058764353, -0.020475404, -0.04433518, -0.08785159, 0.072716914},
   {-0.04097388, 0.0011065444, -0.01423572, -0.03153958, -0.06994815, -0.09299012, 0.086516246, -0.024358027, -0.03467603, 0.074479215, -0.014189132, -0.014383595, 0.06660616, 0.090396844, 0.01260785, -0.012972839, -0.07669204, 0.046807997, -0.019765213, -0.053555496, -0.0916265, -0.028787995, -0.05299348, 0.02642814, 0.061846655, 0.044819877, 0.02134933, -0.0508605, 0.06541108, 0.019092761, -0.06037998, 0.020798832, -0.06573541, -0.05982311, 0.020039067, 0.0019612315, -0.042409122, 0.019507756, -0.018982586, 0.023253866, 0.031480487, -0.087927185, 0.04768317, -0.07459229, 0.078555286, 0.047162797, -0.021405537, 0.046478264, -0.0345191, -0.005916918, -0.010943879, 0.035986207, -0.05892651, 0.044317074, -0.04411447, 0.08077111, -0.00243869, -0.013066879, -0.023303077, -0.009143428, -0.018208135, -0.06317195, -0.07172106, 0.07209151},
   {0.008771322, -0.012346641, -0.08685085, -0.043958332, 0.08941725, 0.054140992, 0.09170889, -0.07793989, 0.090986304, 0.08088703, -0.065520525, 0.034123804, -0.038195472, -0.08344079, 0.030265965, 0.027024053, 0.07620079, -0.07923839, 0.06187264, -0.096754886, -0.035346113, -0.07006691, 0.04417811, 0.08750864, 0.047560703, 0.07349565, 0.05189101, 0.037754633, 0.077517845, -0.033106066, 0.09018831, -0.049789917, 0.046090163, -0.01645376, 0.07315703, 0.0067618554, 0.06970818, 0.014647694, -0.016612126, -0.08883809, 0.07602859, 0.050770752, -0.062037762, -0.06562939, -0.06388603, 0.007384524, -0.020655587, -0.08350139, -0.06850116, -0.07492347, 0.0218562, -0.09034645, 0.04063206, 0.07605354, 0.059849136, 0.005231318, -0.08478413, -0.045912918, 0.0024419576, -0.013442751, 0.030227304, -0.011550255, -0.0040386757, 0.0465024},
   {-0.0076170275, 0.05348597, 0.06734441, 0.002788509, -0.02687105, -0.0037394038, 0.08626779, -0.068740554, 0.062352944, -0.047872066, 0.0076575354, -0.04455773, 0.022567332, 0.0056901677, 0.062344678, 0.032370366, -0.05286315, -0.051978122, 0.07287934, 0.08684719, 0.03877112, -0.017280392, 0.0826691, -0.08545194, 0.04306951, 0.008910639, 0.031012787, -0.09209474, -0.042897396, -0.04726363, -0.046139996, -0.08224669, 0.019503854, -0.05264373, -0.00048377734, -0.08873194, 0.007958936, 0.056535307, 0.059045337, 0.036348887, -0.027680935, -0.0043614507, -0.079407945, 0.07760515, -0.00826687, -0.010231857, 0.017780976, 0.051704258, 0.06933622, 0.06644497, 0.08711001, 0.036481045, 0.02053066, -0.07621149, 0.04788328, 0.0955761, -0.07598688, -0.04473351, -0.03102298, -0.0845258, -0.0035801588, -0.025843441, -0.011524191, -0.02491388},
   {0.024350317, 0.03491943, 0.029779725, -0.023976162, -0.006831388, -0.09726565, -0.034053124, 0.048488762, 0.086622395, 0.029262245, 0.034346662, 0.039145987, 0.007164642, 0.05618021, 0.041552328, 0.0442364, -0.03155543, 0.031093597, -0.05508857, 0.034572985, -0.049894918, 0.07489297, 0.030253252, 0.060054757, 0.06384898, -0.016076034, 0.08386568, -0.076668, 0.09011822, -0.07501375, -0.005452355, 0.06678826, -0.04191302, -0.046154376, 0.08276514, -0.021454224, -0.08829311, 0.03132355, -0.04815102, 0.05831235, -0.020856714, 0.054148085, -0.056614757, 0.02870962, -0.047778748, 0.03347486, -0.0058516683, 0.065805145, 0.009700142, 0.0030575867, 0.01951606, -0.020416208, 0.07771238, 0.018526196, -0.090235494, -0.053770773, -0.0741755, -0.084618375, 0.03162027, 0.03955923, -0.049586374, 0.022744812, 0.08096245, 0.011974206},
   {0.07163245, 0.010884825, 0.053642135, 0.037839785, -0.07497066, -0.07678553, -0.0542456, 0.033264946, -0.028181687, -0.074463636, -0.06647255, 0.06052826, 0.047053598, 0.008340434, 0.010614134, 0.038699113, -0.048893016, 0.047938235, 0.08112023, -0.07185875, 0.070383064, 0.06584094, -0.07526716, 0.052243, -0.048664603, -0.02012918, -0.07918467, -0.047865175, 0.0042214617, -0.030357204, 0.026570607, 0.021538801, 0.06502474, 0.04507803, -0.027416384, 0.07444966, 0.07555164, 0.06752563, -0.018267114, 0.023484536, -0.08844526, -0.045596864, 0.06496471, 0.06469234, 0.04497544, 0.03444844, -0.018789977, -0.066292, 0.048211373, 0.08886037, 0.072117135, 0.0920727, 0.041744974, 0.060324796, 0.07572315, 0.092459604, -0.044850167, -0.01315585, 0.08538114, -0.08913586, 0.0061456678, -0.008969419, 0.009038733, -0.073471844},
   {0.033090457, 0.09007021, 0.048246957, -0.031244682, 0.016132966, 0.0048774234, 0.017234685, -0.018630547, 0.08043777, 0.045145374, 0.07399469, 0.034842607, 0.009727702, 0.010479743, -0.03919084, -0.064016335, -0.073968485, 0.03030935, -0.0573027, 0.009765084, -0.09693966, 0.014222341, 0.03089852, 0.018573813, 0.019592684, 0.027259521, 0.08748928, -0.0074724723, 0.037691377, -0.025434025, 0.012874093, 0.06713212, -0.026642643, -0.003982656, 0.08245534, -0.085364856, 0.035441406, -0.041166645, -0.01446093, 0.07013246, -0.065706804, -0.008179963, -5.2811025e-05, 0.058291472, -0.0223882, -0.002843705, -0.042498585, 0.014541617, -0.05774986, 0.0365064, 0.037660964, -0.018313564, -0.079750314, -0.06732103, 0.010796331, 0.05443893, -0.08317762, 0.069447264, 0.07928529, 0.06407154, -0.058076452, -0.061103348, 0.044696435, -0.06351949},
   {-0.06629005, 0.0021678212, -0.0777886, -0.013320185, 0.052145675, 0.06751567, 0.079811364, -0.005666321, 0.06494283, -0.0026442106, -0.07602313, 0.04200056, 0.007845543, 0.06176576, -0.04033654, 0.047772236, 0.053035628, -0.015122563, -0.035521284, 0.032956023, 0.03782839, -0.017764574, 0.08488585, -0.059779566, -0.08226503, -0.080405064, 0.04647468, 0.033441767, -0.038590368, -0.057878096, 0.057532273, 0.084244825, 0.07535698, -0.03355699, -0.083994515, 0.034057934, 0.008823507, -0.0126497755, 0.037123974, -0.05063176, 0.041817497, 0.04690095, -0.0684213, -0.041179545, 0.031603787, -0.047554176, 0.033801936, 0.07862071, -0.07919808, 0.049889524, 0.020891245, -0.011949062, -0.042053, 0.056658827, -0.07400728, 0.059300262, -0.019651543, 0.028740168, 0.016818002, 0.0002397688, 0.0065810606, -0.056432173, -0.018105717, -0.08696906},
   {-0.0040696985, 0.051155955, -0.09796395, -0.0035355557, 0.008030663, 0.07266847, 0.065837204, -0.04271135, -0.04237776, -0.04951975, -0.028397761, -0.058596995, -0.062250406, -0.020277848, -0.0749248, -0.02452033, -0.081741095, -0.075022355, 0.004151866, -0.06612617, 0.01924052, -0.0765477, -0.037713524, -0.048958898, 0.060586635, -0.033900384, 0.06802228, -0.032770474, 0.053830244, 0.09243908, -0.034384146, -0.011962899, -0.03538808, 0.023692152, -0.055777214, -0.063630134, 0.0031852592, 0.02127452, -0.039917372, 0.081227206, 0.017979233, -0.026424445, 0.06877368, 0.068044804, -0.03212143, 0.037171837, 0.08032522, -0.060720295, -0.0076140277, 0.056590475, -0.035261907, 0.035744764, -0.078558125, 0.08311019, -0.0747345, -0.029253611, -0.038676444, -0.009462014, -0.09329148, -0.031465773, -0.08920677, -0.07141839, -0.02360575, 0.038538188},
   {0.05586303, 0.082510434, 0.08147458, -0.044842403, 0.056406952, 0.053649597, 0.026223836, -0.0035522396, -0.054194987, 0.0012032868, 0.06394812, -0.043711048, 0.07571102, -0.004135279, -0.045080714, 0.06924277, -0.05899963, -0.024454273, -0.08219643, 0.027242951, -0.042772107, -0.008278938, 0.062185615, 0.03581614, -0.0053609707, 0.06582162, -0.08285271, -0.04204233, -0.070987746, -0.062277123, -0.05378949, 0.01845539, -0.06131756, 0.026720693, -0.02110699, 0.06456154, 0.022960942, 0.08281669, -0.040591184, 0.03828562, 0.03924031, 0.013297066, 0.071888894, -0.036926627, 0.0952296, -0.05582111, -0.0023694756, 0.06098557, 0.0057801567, -0.07530259, 0.00736477, -0.023949362, -0.0040168744, -0.061613467, 0.036871202, -0.06344808, -0.05703006, 0.004281721, -0.042398047, 0.06427208, -0.09046291, 0.07226605, -0.070133284, 0.055813238},
   {-0.03998521, 0.028422797, -0.08879422, -0.068516284, -0.0852533, 0.066333055, 0.07324227, 0.02431873, 0.04437891, -0.09017971, -0.042448394, 0.014989141, 0.02634377, -0.02670603, -0.012848511, -0.033481248, 0.06485564, -0.044609684, -0.06770876, 0.052968476, -0.09814713, 0.085958265, -0.017411597, 0.08715268, 0.018686686, 0.0071260217, -0.055008445, 0.017426968, 0.08251109, 0.06398984, -0.017667077, -0.059790768, -0.08575068, 0.051344693, 0.011141202, -0.055312876, 0.05665603, 0.038897824, -0.0009006901, -0.004727684, -0.07037756, 0.056914933, -0.03995085, -0.057765007, 0.054412477, 0.055034723, 0.027934618, 0.087979175, -0.010838396, 0.025290733, -0.067489944, 0.034549184, -0.060321804, 0.072609104, -0.053611983, 0.07929833, 0.026896046, 0.070611276, 0.036367916, 0.056481477, -0.028844247, -0.06457184, 0.046359908, -0.060351927},
   {-0.09378286, -0.033400472, -0.083916776, 0.071416974, 0.006337215, -0.054291595, -0.06716055, 0.0055703823, 0.066725336, 0.08499204, 0.026501209, 0.07590475, -0.057839073, 0.0967412, -0.012675554, -0.0101817325, 0.07276378, -0.08570188, 0.032318108, 0.04937247, -0.09222764, -0.07148453, -0.070829235, -0.018176027, 0.065661944, 0.04354673, -0.037499912, 0.03537146, 0.060735263, 0.073598616, 0.0062231338, -0.060029525, -0.0795183, -0.079357155, -0.079899676, -0.0469163, -0.06194001, 0.05039584, 0.074939124, 0.05979026, -0.029538164, 0.016083553, 0.070515834, -0.015276477, -0.058358822, 0.025944185, 0.043293733, 0.048921946, 0.03495825, -0.0579958, 0.06370426, 0.008640289, -0.09338815, 0.0809608, 0.025476426, -0.07178373, -0.0735092, 0.04618487, -0.074312225, 0.03366097, 0.06024666, 0.029346094, 0.042739622, -0.07166551},
   {-0.015834577, -0.03900069, 0.024349697, -0.029711813, 0.0005375434, 0.051296968, -0.08230463, 0.018811695, 0.012002996, 0.08548778, 0.06359937, -0.052789412, 0.013288662, -0.017740011, 0.03976824, -0.0024649426, -0.07078288, 0.07216274, -0.07744612, -0.0053290757, 0.023538647, 0.0685562, 0.07042916, -0.04112381, 0.046098117, 0.041300405, 0.011178269, 0.07520234, 0.029343419, 0.030946314, -0.04632382, -0.031817924, -0.063097484, -0.0049041286, -0.07221105, -0.026979571, 0.029531006, -0.06384866, -0.09135381, -0.01820217, -0.012438786, -0.056088295, 0.065045394, -0.0585121, 0.07239099, -0.01722169, 0.00021827788, 0.029477542, -0.07181289, -0.060683623, 0.009533835, -0.057381637, 0.022618381, -0.014545828, -0.04259904, 0.0156233935, -0.049028777, -0.052688953, -0.032064933, -0.068776265, -0.07314048, 0.08590496, 0.021211939, -0.023469292},
   {-0.055175237, 0.01765716, 0.053023953, -0.038953487, 0.032168526, 0.055079184, -0.087735236, -0.040076118, -0.02745947, 0.0072736014, 0.014686681, -0.077331245, 0.07707857, 0.0768006, 0.08611841, -0.052586917, -0.043808796, -0.004671328, -0.049966924, -0.0005499128, -0.06284748, 0.051451594, -0.0016595735, 0.028708793, -0.06654603, -0.033830844, -0.03608772, 0.028057082, -0.040081725, -0.025313102, -0.008985939, 0.053742047, -0.09032313, 0.092098296, -0.04112153, 0.035480563, -0.03918984, 0.08155228, 0.049407594, -0.022915907, 0.020237723, 0.038880892, -0.009118343, 0.06890566, 0.07832533, 0.061188065, 0.06114674, 0.028792268, -0.074267134, 0.052324854, -0.02214007, -0.0077179223, -0.045348153, 0.06941547, 0.044723354, -0.07875856, 0.03551937, 0.08120174, -0.031659942, 0.07032258, 0.064967856, -0.009480044, -0.068896085, -0.026920572},
   {0.03753025, 0.04699098, -0.095920995, -0.09612804, 0.06402522, -0.05890165, 0.008783763, 0.032582533, 0.03159329, 0.07332183, -0.09009294, -0.087421514, 0.076130815, 0.071348, 0.06809712, 0.036248572, -0.053115167, 0.019247726, 0.0032574236, -0.035575647, -0.06777427, 0.04553345, -0.054805275, -0.07281998, 0.039433215, 0.075235754, 0.07287875, 0.071838126, 0.08963669, -0.06045971, 0.073235534, -0.03298893, 0.011790827, -0.071792245, -0.042975746, 0.045064252, 0.068155594, 0.040340293, -0.07255302, -0.048743486, -0.034606762, -0.061247963, 0.027561696, -0.018882804, -0.0813345, -0.04947698, 0.0615974, 0.08645966, 0.008775798, 0.023081152, -0.02963765, -0.006136082, -0.021749215, -0.007069014, -0.04360295, 0.0792375, -0.047815472, -0.0025834234, 0.03332319, -0.042462334, 0.038614944, 0.068619736, -0.037212286, -0.023378387},
   {-0.011660458, 0.03949026, 0.06556213, -0.03018809, 0.012289319, -0.041248854, -0.077910386, 0.068726316, 0.06092587, 0.023044193, 0.04566314, -0.037608378, -0.08355276, -0.0057769646, -0.029885292, 0.048909478, -0.0986886, 0.069813825, -0.04555786, -0.062277067, 0.049369298, 0.046481103, 0.049065426, 0.012335964, 0.04383371, -0.026401786, 0.043874346, -0.048330173, 0.033819787, 0.022326156, 0.055007488, -0.009648861, 0.086018436, 0.001721639, -0.043678515, 0.025428241, 0.04156918, -0.037577227, 0.005251334, -0.06564232, 0.03951162, 0.018193603, 0.027348239, 0.017852977, 0.001633849, 0.020234747, 0.034957625, 0.04345648, -0.08730749, 0.022310985, -0.021059107, 0.015608072, 0.060844615, -0.0076179355, -0.0029560179, 0.008328538, -0.065719225, 0.08537495, 0.044181816, 0.0027624073, -0.0046035596, 0.07749707, 0.068039194, 0.0074124835},
   {-0.02002869, 0.08739112, -0.054053754, 0.05971276, -0.08292802, 0.052239977, 0.05823038, 0.07321202, 0.09092088, -0.004264738, 0.086664535, 0.013227165, 0.059599288, -0.040762875, 0.021264046, 0.0006162226, -0.04155942, 0.08172352, 0.00059931725, 0.024516655, -0.075088516, 0.02121766, -0.03222448, -0.030043699, -0.05604952, 0.034404088, 0.021075645, -0.017291604, 0.044164903, -0.0749594, 0.053110924, 0.014565417, 0.06629261, -0.0028781116, 0.07710468, -0.018362518, 0.018056087, 0.030583158, 0.020475177, 0.07029138, 0.018350659, 0.037145354, 0.00034182484, -0.0807014, 0.03190725, -0.013769857, 0.0062017874, 0.025813723, 0.08619555, 0.036815044, 0.059896182, 0.076213695, -0.041863535, -0.040530216, -0.03364876, -0.07889561, 0.029113555, -0.04798227, 0.06243848, -0.038224537, 0.021645306, -0.07595925, 0.034173228, -0.043502506},
   {-0.045680527, 0.03039834, 0.083322875, 0.052198928, -0.03804077, -0.006434101, 0.08467916, -0.042936932, 0.05338832, 0.04388818, 0.048769154, 0.010524094, -0.082646705, -0.034599174, 0.040175654, -0.086451374, -0.00012599472, 0.057592712, -0.008976132, 5.850625e-05, 0.054581862, -0.042206425, -0.0077877087, 0.010384306, -0.054307688, 0.093848325, 0.018773552, -0.07235876, -0.015492603, -0.008613169, 0.091093354, 0.067693084, 0.07868502, -0.010009039, 0.053839467, 0.049431697, -0.074797876, 0.082359724, -0.027134469, -0.0013804734, -0.04979787, -0.0580305, 0.06693081, -0.08398534, -0.039727036, 0.06566147, 0.030776834, -0.0230728, 0.08698432, 0.03800026, 0.06349167, -0.008601353, -0.06548638, -0.0861744, 0.025956646, 0.07074653, -0.0050156047, -0.07281289, 0.049499057, 0.016088797, -0.057564087, -0.07269436, 0.04502857, -0.0007381984},
   {0.05054778, -0.024398882, -0.0073878462, -0.044456854, -0.0098655075, -0.08632286, 0.08258027, -0.034532197, -0.08157019, 0.0021049392, -0.044473745, -0.05142131, -0.006546393, -0.05882985, -0.032774247, -0.07896133, 0.047626775, -0.030920926, 0.04356184, 0.0064224307, 0.052961536, -0.022359623, 0.011744801, 0.021568805, -0.048592795, 0.09140869, -0.0015142707, -0.036139343, -0.07211763, 0.024464041, -0.05720956, -0.06122456, -0.009239316, 0.079436146, -0.056140307, -0.032460146, 0.027934063, 0.05811895, -0.07326081, 0.0559965, -0.053555805, 0.01783324, -0.032372937, 0.082970135, 0.026769793, -0.0028794396, 0.057759676, -0.05752299, -0.0037440304, 0.044715874, -0.022263726, 0.0019081458, 0.031881135, -0.07132666, 0.04103569, -0.005972861, 0.0514248, -0.0068996563, -0.0047554746, -0.08894636, -0.029265376, -0.080915794, -0.08123979, -0.070567355},
   {0.058062833, -0.06819887, 0.018469447, 0.016773736, 0.035855766, -0.074187905, 0.049006384, 0.056512933, -0.022272257, -0.033398077, -0.08194271, -0.06579891, -0.073490664, -0.07861078, 0.0065442324, 0.061935626, -0.0010189235, -0.053409964, -0.0038541332, 0.07323084, -0.06772703, -0.07065281, -0.053027324, 0.03851626, -0.09179941, -0.024603778, 0.051303558, 0.04875368, 0.0029901043, -0.010519043, 0.0108639235, 0.019583095, 0.017097764, -0.087963656, -0.048417173, -0.029074712, -0.041432273, -0.0680277, -0.016222447, 0.0075360388, 0.05898964, -0.0068795234, -0.045155916, -0.025973931, -0.007900784, 0.037572738, 0.03186376, -0.041231148, 0.06984623, -0.04436728, -0.033888143, 0.0041990355, -0.097109236, 0.016652405, -0.084481895, 0.09291707, 0.07205204, -0.079041556, -0.032865714, 0.014851054, 0.031624496, 0.012466565, -0.012635813, -0.09097322},
   {-0.0051835515, 0.0007566738, -0.06256386, 0.04279858, -0.0017742984, 0.045294836, 0.03577223, 0.017395206, -0.08410836, -0.0106506385, 0.08217203, -0.012100379, 0.0066143572, -0.034924664, 0.09306996, -0.02871912, 0.04175813, 0.0052608326, -0.005230956, 0.00024625676, -0.018747203, 0.09277814, 0.08376119, 0.089519076, 0.057445943, 0.034279633, 0.06864163, 0.04757161, -0.013364948, -0.0538035, -0.06349497, -0.08699425, 0.0065376237, -0.04193941, 0.07487976, 0.025578318, -0.08470799, -0.05462642, -0.09345336, -0.049466036, 0.0037199173, 0.020367533, -0.050598178, 0.011858933, -0.05941996, -0.010605125, 0.07314884, -0.06040883, -0.024921443, 0.035948005, 0.024496019, -0.032857213, -0.030164663, -0.0069224834, 0.08199384, 0.0692951, 0.054071445, 0.06807845, -0.010753036, -0.027401961, 0.062467523, 0.05548569, -0.08837496, -0.0053568613},
   {0.028423984, 0.07251557, 0.045290053, -0.01801565, 0.06382518, 0.06879926, 0.038515616, 0.04934935, 0.0073511787, -0.0032465092, -0.05232727, 0.012726772, -0.06624715, -0.07922296, -0.07382914, -0.041459568, 0.06775055, 0.053353913, -0.0488679, 0.0582582, 0.04882786, 0.018588027, 0.017907755, -0.06022541, 0.08675044, 0.02686676, -0.004013162, -0.03248625, 0.046892293, 0.023379281, 0.069753386, 0.070538685, -0.00060999393, 0.008312143, -0.09479858, -0.07212298, -0.07666259, -0.011731915, -0.06016647, -0.06715976, 0.08275692, -0.012376368, 0.07162389, -0.060490437, 0.012400038, 0.05777996, -0.067571975, 0.084122665, 0.06639113, -0.044166453, -0.056694366, 0.09248497, 0.03547053, 0.028839596, -0.09126421, 0.08685404, -0.01456828, 0.0047957795, 0.05498732, -0.032093413, 0.023040887, -0.069839016, 0.04472545, 0.05135526},
   {0.042436548, 0.076267615, 0.026003089, 0.018429868, -0.09115005, -0.041388717, -0.058617707, -0.078849375, -0.0030606012, 0.021859957, -0.0892151, -0.07863862, 0.0687679, 0.038269065, 0.020899229, -0.01824084, -0.019407673, -0.01754336, 0.09291796, -0.030460654, -0.100951746, -0.025976889, 0.043587957, -0.011030257, 0.023799008, 0.020542162, -0.08747309, 0.026190476, 0.057890795, 0.0022138655, 0.010610282, -0.05512302, -0.009192236, -0.049382515, 0.039793372, 0.027250916, -0.03497996, -0.03236846, 0.07859216, -0.071293086, 0.012754255, 0.026815757, 0.06820204, -0.031772118, -0.035005957, 0.033148255, 0.07003921, -0.08427807, 0.041302003, 0.054171123, -0.017283678, 0.07647491, 0.0843998, 0.059123807, 0.09007532, -0.008756703, 0.012563784, 0.022744266, 0.008252539, 0.011857406, -0.013250207, 0.026643753, -0.035537798, 0.055621047},
   {0.021570522, -0.07863636, -0.0103541445, 0.054586403, -0.04964286, 0.004721193, -0.005282766, -0.034347594, 0.048189256, -0.029792741, -0.008328848, -0.028125, 0.090471976, -0.08599965, 0.03717319, -0.08101447, 0.038130756, -0.07610469, -0.061153207, -0.07228583, 0.08099274, 0.010646193, 0.07644566, -0.087996535, 0.08698593, -0.047980465, 0.07925445, -0.067396, -0.06660569, 0.013948873, -0.07758112, 0.006093955, -0.07769602, -0.056621257, -0.057640046, -0.037434142, -0.0075570163, -0.02764009, 0.08508182, -0.055532455, -0.060140885, -0.07637826, -0.09066711, 0.020734705, 0.062803075, 0.0026090026, -0.007199691, -0.007655971, -0.07664494, 0.08614103, -0.030200476, -0.09301699, -0.094624475, -0.01326067, -0.010100298, 0.057428114, 0.04588859, -0.082462355, 0.057057, -0.006219258, 0.018683136, -0.05170809, -0.047886133, 0.0541108},
   {-0.09027939, 0.03944686, 0.017024888, -0.08872978, 0.0016947577, 0.003389885, -0.06298755, -0.09041283, 0.038618233, -0.0075152316, -0.083006464, -0.009787525, 0.07320332, -0.049774818, -0.01961781, 0.007755831, 0.083799876, 0.06849448, 0.087888755, -0.0041524433, 0.07236299, -0.061096612, 0.051659502, 0.075110845, 0.04629811, -0.067099944, -0.08585353, 0.027586846, 0.042301245, -0.04549643, 0.0002940999, -0.042273574, -0.02768384, 0.008905407, -0.07262456, 0.04575325, 0.0497201, 0.050340682, 0.05474307, -0.069038376, 0.0750759, -0.0030389577, -0.015790207, -0.030551016, 0.05121, -0.06506796, 0.062407594, -0.05868956, 0.0671697, -0.04704023, -0.068160236, 0.06435979, 0.062108338, 0.016232774, -0.031506356, 0.07682437, 0.035941046, 0.061217837, -0.042824533, -0.07313615, 0.08092396, -0.013669737, 0.032290827, 0.057092104},
   {-0.014012998, -0.066806704, 0.03580537, -0.038032282, -0.0022777438, 0.06975504, 0.08291163, 0.022074498, -0.045638826, 0.0438463, 0.016956903, -0.06392317, -0.04584093, 0.06789682, -0.039383736, 0.054572023, 0.047356054, 0.05833129, -0.0007284507, -0.027539639, -0.07417114, -0.021454526, 0.05873936, 0.004939586, -0.01343083, -0.023786578, -0.017044378, -0.022297554, -0.055277526, 0.05920001, -0.026170783, 0.055249166, -0.053014025, 0.0059121395, -0.04852656, -0.04152805, -0.022911556, -0.05881457, -0.067301475, -0.043894652, -0.070271015, -0.0056568384, -0.021609206, -0.093125075, -0.08981685, 0.080719136, -0.05092948, 0.060530007, -0.049560517, -0.011519333, 0.0019122286, -0.023060434, -0.07200461, -0.06828658, -0.08129315, -7.50584e-05, -0.0366975, -0.07132409, -0.06061067, 0.08781387, -0.08513934, -0.04759994, 0.068530805, -0.06830624},
   {0.06356615, 0.00023525018, 0.004665092, 0.015808191, 0.009848452, -0.01876658, 0.079389326, 0.02752826, 0.012833559, -0.048284184, -0.011004314, 0.08004633, 0.00406456, 0.026395926, -0.07373253, -0.07098245, 0.023742601, 0.06134946, -0.06950175, -0.011495488, 0.077494875, 0.023240699, 0.06535224, 0.0666667, -0.041494634, -0.021200292, 0.0052334713, -0.08305683, 0.006232016, 0.087471865, -0.045368962, -0.06448237, 0.08567866, 0.012640205, 0.073711306, -0.036956906, -0.03782207, -0.077940196, 0.08260796, 0.07176521, -0.08825058, 0.06829905, 0.05650596, -0.04318474, -0.06008082, 0.0008407547, -0.03467108, 0.026608922, 0.08130713, 0.014724671, 0.040563148, 0.08747517, 0.05749705, -0.08133781, -0.029632784, 0.038038872, -0.041460432, 0.0918805, -0.022548668, -0.04942117, -0.012507075, 0.074114166, 0.0037271199, -0.01156751},
   {-0.09232166, 0.008769638, 0.0040620035, 0.083854616, 0.029380476, -0.006247263, 0.057792097, 0.021968372, 0.041044127, 0.05220723, -0.0928756, 0.011282924, -0.0027625859, 0.02218939, -0.060442515, -0.017673, -0.0788481, -0.019520208, -0.04553659, 0.03758374, -0.0042134887, -0.00061207294, -0.043475192, -0.0826514, -0.05040057, -0.08819568, -0.0059608994, -0.02670506, -0.03966832, -0.029621087, -0.028503515, 0.077087544, -0.027086057, -0.040627718, 0.0016885265, 0.0030091247, -0.0942104, 0.038666084, 0.07809097, 0.091704644, -0.05678413, -0.04002822, 0.006948978, -0.05718258, 0.093626976, 0.085251324, -0.019036055, -0.014377106, -0.052253667, 0.06118927, -0.088118754, -0.047548167, 0.04040963, -0.073973484, -0.07497394, -0.019515717, 0.07644358, -0.059261538, 0.07342938, 0.024564423, 0.060123157, 0.06587464, -0.06021601, -0.06805271},
   {-0.020611612, 0.03009724, -0.022006486, -0.05861852, 0.0470239, -0.032361005, 0.055574495, 0.034967642, -0.039700214, 0.012400263, 0.0028560534, 0.080088325, -0.07205139, 0.062817134, -0.062186264, 0.08088689, 0.048561852, -0.08700695, 0.05399903, 0.03764828, -0.055959128, -0.04651131, -0.003034142, -0.07034084, 0.054963958, -0.035202853, -0.076077245, -0.06971943, 0.042076223, 0.0024854094, 0.06243472, 0.030794192, -0.08077834, 0.07877336, -0.0756794, 0.00038871536, 0.06907824, -0.058391552, -0.01052887, 0.046753936, 0.030491589, -0.036330093, -0.02918055, -0.08220949, -0.06908888, -0.09160019, -0.010536469, 0.0698103, 0.0047743437, -0.059618473, 0.036903966, 0.07686903, -0.07668933, -0.042200897, -0.00084736943, 0.014375314, -0.043154128, 0.02891729, 0.07317556, -0.053141754, -0.07022631, -0.0019659474, -0.031910963, -0.07992862},
   {0.087798275, -0.027317107, -0.048080213, -0.008902396, 0.080919996, 0.08614616, 0.014906968, -0.04386444, 0.054596215, -0.08011879, -0.006796889, 0.09328802, 0.09022368, 0.05695176, -0.028730713, -0.029007912, -0.05125953, -0.012420066, 0.01612714, 0.07468775, 0.03403822, -0.044825338, -0.08167469, -0.011559375, -0.031823926, 0.07470206, 0.022382211, 0.06463599, -0.015951507, 0.047467135, -0.065512344, 0.029231897, -0.04795472, 0.059347294, -0.006878898, -0.030879352, 0.03727972, -0.052720975, 0.023249272, -0.03836492, -3.9945426e-05, -0.08216346, 0.06473792, 0.026429944, 0.029112183, -0.0043409383, 0.032746725, -0.080123425, 0.0294839, 0.05303306, 0.076945044, -0.023245074, -0.08727457, 0.056626134, -0.05734117, -0.06418471, -0.012709641, -0.019084908, -0.07173868, 0.04725706, 0.0049104556, 0.01186271, 0.027677346, 0.068380475},
   {-0.05281116, -0.023069853, 0.07627044, -0.07633121, -0.0076419367, 0.059511576, 0.08805906, 0.04868133, 0.06930289, 0.041733105, -0.03117812, 0.058211945, -0.08967534, 0.042203605, -0.09089156, 0.01748649, -0.05045604, -0.0090862885, -0.025084607, -0.044587515, -0.08400844, 0.09091503, -0.09843024, 0.055111177, -0.05312927, 0.016271949, 0.02556068, 0.09187827, 0.04011429, 0.063315235, -0.056814812, -0.0055692703, 0.08169276, 0.06774918, -0.033904906, 0.016769052, -0.05828879, -0.04826662, -2.0919506e-05, -0.014517285, -0.028327042, -0.09229873, -0.0071680727, 0.06362472, 0.0075092805, -0.09162894, 0.054491833, 0.053861085, -0.056857593, 0.0027405429, 0.08673945, 0.0667991, 0.08046936, 0.07994615, -0.065146975, 0.002201719, -0.034134105, 0.011433643, -0.050368335, -0.08048396, -0.07783683, 0.029495783, 0.0076805395, 0.0656724},
   {-0.05772471, -0.037333973, -0.05010299, 0.014199574, -0.06565269, 0.029720522, -0.015647272, -0.0010579271, -0.0006984776, 0.09542828, 0.02581118, 0.05532214, 0.075791605, -0.03896825, -0.027981527, 0.05416327, -0.08496144, 0.081609644, 0.03133315, 0.02685519, 0.049167473, -0.014587073, 0.06043865, -0.08394414, 0.061047662, -0.08601477, -0.03622073, -0.02418062, -0.03729106, 0.043465205, -0.052494906, 0.08058223, -0.050578542, 0.010130084, 0.010506469, 0.029512811, -0.024969863, 0.08767068, 0.065420784, -0.035048008, 0.007977702, -0.09045097, 0.02685879, 0.0024223775, -0.0807811, 0.06289197, 0.056164473, 0.0544031, 0.06754565, 0.06568672, -0.05426781, 0.06257533, 0.0046034735, -0.071531124, -0.06463928, 0.044539575, 0.013868948, 0.021931333, 0.06611421, 0.03960337, 0.037749045, 0.055218972, -0.042344857, 0.0035189567},
   {-0.018219424, 0.09686503, -0.074002944, 0.06936863, -0.051748157, 0.038188428, 0.093815394, 0.054065567, -0.054778907, 0.06260739, -0.01654312, 0.058938, -0.05548909, 0.07518729, 0.029595368, 0.011053726, -0.03596637, -0.018614508, 0.053749375, 0.06025906, -0.06901599, 0.019653413, -0.03886786, -0.018692978, -0.077465564, -0.0029626314, 0.05476118, 0.022088695, -0.0028346032, 0.08989885, 0.027213087, 0.037775677, -0.0051512346, -0.052250765, -0.0232254, 0.08150676, 0.02845188, -0.02836604, -0.03866821, -0.04048374, 0.006647784, -0.052698184, 0.026175117, -0.017159253, 0.0029980412, 0.06734086, -0.048455406, -0.0016502319, -0.047671754, -0.052658953, 0.036478937, 0.034067295, 0.03136591, -0.06589867, -0.035050854, 0.07454521, -0.045586098, -0.06273182, -0.04202429, -0.002712027, 0.033278294, -0.071529634, -0.07273879, -0.025977045},
   {-0.07677675, -0.030132124, -0.051970195, 0.057773516, -0.07736009, -0.090778545, -0.00418625, -0.010428002, -0.024989074, 0.018163357, 0.028962076, -0.011809084, -0.045918956, 0.049936816, -0.05865142, 0.017736815, 0.0018945519, 0.04341159, -0.012423851, -0.015854253, 0.056827, 0.04306595, -0.006963438, 0.019399464, -0.05891469, 0.01371492, 0.034178246, 0.014913136, 0.07841859, -0.02600824, -0.023056904, -0.07474244, -0.07745609, 0.07477621, 0.0041384157, 0.072054766, 0.06894999, 0.006436816, 0.067184485, -0.05937493, 0.010381215, -0.058529943, -0.03458934, -0.02538187, 0.0656018, 0.06539389, 0.07675135, 0.009885896, 0.0017829379, 0.052867506, -0.05502403, -0.03784532, 0.00028434303, -0.019285575, 0.05490864, 0.03773731, 0.05995918, -0.061216995, -0.06321458, 0.0035703136, -0.023312964, 0.09032375, -0.038638577, -0.01316044},
   {-0.024218015, 0.06466061, 0.003485086, -0.04065694, 0.04096957, 0.034388177, 0.07405978, -0.07813116, -0.017350478, 0.08270856, -0.0028932318, -0.018313045, 0.035030253, 0.057702165, -0.046939865, -0.02686967, -0.04909399, 0.03508941, 0.00766588, 0.011501376, 0.050687432, 0.055806156, 0.04543654, 0.092382096, 0.045554776, 0.075328715, 0.09442314, -0.050580554, 0.030899212, 0.011592567, -0.07805001, 0.006952919, -0.060478445, -0.042011686, -0.02315176, 0.008249355, -0.057118285, -0.04997962, -0.041186716, 0.055186085, -0.02081606, -0.03183613, 0.05814617, 0.016905174, -0.04716282, -0.08343305, 0.04374226, -0.08568243, 0.071727686, 0.09642808, -0.06942777, -0.0054159313, 0.013774105, 0.040099196, 0.024510317, -0.04701298, -0.022954362, -0.07644097, -0.08256716, -0.01333761, 0.04292115, -0.06721204, 0.06451859, 0.07782177},
   {-0.039638687, -0.0064683347, -0.03926158, -0.0009215436, 0.013410134, 0.08179669, 0.054201532, 0.056358393, 0.06408155, 0.09560366, -0.02444493, -0.04818859, -0.08210895, -0.0306893, -0.026494779, -0.040016025, -0.03188575, -0.07695994, -0.030682929, 0.07675255, -0.03313134, -0.058600042, 0.084645964, 0.033308037, 0.031686783, 0.05551406, 0.088562824, 0.06153714, -0.061339073, -0.05069924, 0.091922864, -0.08901353, -0.05009076, -0.04054173, -0.0796709, -0.020086175, -0.02598582, -0.005673821, -0.066934526, 0.035265215, 0.04586544, -0.008674018, -0.052410733, -0.005620107, 0.07249529, -0.0139600625, 0.08344048, -0.057378776, -0.06091889, 0.022816287, 0.065148495, -0.04470887, -0.06360919, -0.06367357, 0.01695092, -0.03711053, -0.0016421515, 0.042665247, -0.036456976, 0.06140119, 0.047181427, 0.062810056, -0.055645354, 0.084042765},
   {-0.03245804, 0.060506094, -0.08413392, 0.06807563, -0.09317642, 0.07304028, -0.05749049, 0.03845952, 0.07548998, 0.085063286, -0.07944626, -0.06043147, -0.038844515, -0.036083717, -0.021730848, 0.037059613, 0.086412616, 0.009806924, 0.05946701, -0.012195244, -0.028922547, 0.034228865, -0.08042935, 0.04164902, -0.0066585755, 0.02773358, -0.007397561, 0.0038465138, 0.056404717, 0.049515985, 0.017298643, -0.039889507, -0.010052219, 0.090415575, 0.08372374, 0.05781854, -0.049628638, 0.0802989, 0.0015947159, 0.031810455, 0.030690365, 0.021212935, 0.06739657, -0.02050919, -0.0074764304, 0.057890393, 0.05237515, -0.022750966, 0.009893739, -0.03666106, -0.03449062, 0.08380466, -0.08667516, 0.07172897, -0.012474291, -0.07446628, -0.02753117, -0.0306968, -0.020375118, -0.04169424, 0.08166603, 0.08923102, 0.07966452, -0.09189169},
   {0.06003573, 0.07571894, 0.03050952, -0.09330137, 0.059883002, -0.013863637, -0.048945308, -0.05118228, 0.038089164, 0.06544739, 0.08733047, -0.031447757, 0.07913967, 0.08795831, 0.089393534, -0.036942758, 0.031190272, 0.037167244, 0.0063903853, 0.020762978, -0.10024869, 0.05193281, 0.02742739, 0.05748505, 0.058324434, -0.05733215, -0.070793286, 0.0809576, -0.088989586, 0.093317054, -0.08233135, 0.033801924, 0.046497293, 0.07063788, -0.09698029, 0.01715839, 0.08704213, -0.06739092, 0.009133348, -0.06423219, 0.08637105, 0.042220436, 0.05862825, -0.02068068, 0.08218229, 0.030125473, 0.008931329, -0.055992633, 0.042761397, -0.036709618, 0.073510446, -0.08694957, 0.034365468, -0.005944006, -0.08673658, -0.03848994, 0.012387673, 0.06034888, 0.0411539, 0.02919285, 0.0897827, 0.038705952, 0.038936563, -0.009299167},
   {0.018999744, -0.033233993, 0.027897583, 0.06022692, 0.024370901, -0.071094275, -0.011284397, -0.055820953, 0.06720637, -0.03841241, -0.054424975, -0.048846554, -0.055000085, 0.015243163, -0.040028952, 0.026539162, 0.004750181, -0.09305748, -0.067905866, 0.02519877, -0.09110292, 0.025374748, 0.052170493, -0.075432405, 0.057746254, -0.060300704, 0.050874997, 0.07766585, 0.07470485, 0.06139832, -0.000655809, 0.030207705, 0.041603126, 0.08656025, -0.034286305, 0.06483208, -0.08216787, -0.04546303, -0.01544665, 0.06227065, 0.01633672, -0.08491134, -0.046623714, -0.031688552, 0.095083654, 0.057661407, 0.04864576, 0.04442435, -0.055667873, 0.007130061, -0.06523164, -0.053313494, 0.034863643, -0.04695762, -0.083363295, 0.029411104, -0.039213352, 0.08003248, -0.014012031, -0.019416474, 0.04639879, -0.078401946, 0.088024, -0.0985845},
   {0.015028853, -0.06301583, -0.08113457, 0.024139278, -0.0818468, 0.06552377, 0.002754447, -0.021739393, -0.020899981, 0.02286203, -0.057461422, 0.054657858, -0.060098015, 0.012973323, 0.04059676, -0.03135649, -0.018106014, -0.04781253, 0.047068663, -0.025043977, -0.027696496, -0.0733545, 0.038855698, 0.013812572, 0.052618228, 0.049245063, 0.083740614, 0.014553622, -0.05557159, 0.067030065, 0.06746557, 0.033235643, 0.07844367, 0.010738542, -0.04043811, -0.032057125, 0.057627734, -0.09130689, 0.059474703, -0.047597494, 0.045954015, 0.03900095, -0.014951651, 0.0785835, -0.025747582, -0.017935097, -0.05419056, -0.04678278, -0.048037827, -0.0029218476, 0.057825193, -0.060932454, 0.061226826, -0.08274822, -0.06276804, -0.050231226, 0.010593778, 0.043440133, -0.07467268, -0.057339866, -0.059588972, 0.06652271, 0.029203998, -0.049871486},
   {0.041792873, 0.082863346, -0.067537315, -0.05487767, -0.05359855, -0.0854447, 0.010388931, -0.055531006, 0.0021233861, 0.03042766, 0.023741223, 0.08227034, -0.08680702, 0.049075894, -0.004424855, 0.067237385, 0.019690678, 0.060884915, 0.083941095, -0.09373305, 0.060623318, 0.03981088, 0.0831916, -0.07305712, 0.05359052, 0.0772127, 0.066578135, -0.09263648, 0.07523634, -0.062349588, 0.008365889, 0.0058945254, 0.084862284, -0.07715352, 0.002953254, 0.042921312, -0.08054826, 0.04971147, 0.06026937, -0.03217796, -0.076985665, 0.092317306, -0.050247632, -0.06308542, 0.028882919, -0.06452994, -0.06811982, 0.075268805, 0.078601986, -0.020213678, -0.07765941, 0.08287566, 0.0037147475, -0.047751635, 0.011389546, -0.023259852, 0.027932776, -0.015522419, -0.019870289, 0.047523372, 0.021676889, 0.08526734, 0.018813606, 0.033177942},
   {-0.08302058, 0.033086237, 0.024577498, 0.0723594, 0.029117601, -0.032413054, -0.029694233, 0.031254616, -0.057552513, 0.09288878, -0.0511478, 0.047026932, -0.09275864, 0.051397324, -0.009705313, 0.029533513, -0.08467086, -0.013754018, -0.004097581, 0.02172468, -0.07322115, 0.031582873, -0.09328781, 0.040826745, -0.06793715, -0.06318343, -0.027028017, -0.027801597, -0.07013866, 0.05316519, -0.08322486, -0.019588623, -0.093146056, 0.043653097, -0.042490784, -0.0697043, -0.06841094, -0.023572588, -0.046717327, -0.08301797, -0.08626548, 0.051657625, -0.033642676, 0.08831497, 0.07137116, -0.027856965, -0.09083786, -0.07541283, -0.04088131, 0.010305209, 0.05557747, -0.023687467, -0.020514835, -0.042159002, -0.057279762, 0.04368263, -0.06708136, 0.037624266, -0.06221474, -0.039080616, 0.07649851, -0.0026441142, 0.035646405, -0.06685668},
   {0.011349551, 0.00031126183, 0.060525093, -0.017167484, 0.07635662, -0.007506275, 0.040149294, -0.09764027, 0.0009260087, 0.05482921, 0.005579345, 0.027307179, -0.06684658, 0.010815459, -0.04051402, -0.060411297, -0.089393176, -0.052295323, -0.08899148, -0.07860979, -0.05610138, -0.066901155, -0.053347316, 0.013231546, -0.08273023, 0.03339716, 0.0888083, 0.012667261, 0.026662268, 0.014140673, -0.03573402, -0.0952756, -0.0023272634, 0.06826679, 0.0015369566, -0.006630378, -0.03417907, -0.024638498, 0.069640346, 0.047557555, 0.04139831, -0.05435329, 0.07119483, 0.050426893, 0.046080336, -0.09311513, 0.0882761, -0.043450102, -0.07825254, 0.026249366, 0.07893978, -0.0010806695, -0.013528194, 0.0016026646, -0.08027783, -0.014434553, -0.059680577, 0.068480745, -0.04598168, 0.06927223, -0.0041824393, 0.060078345, 0.06341084, 0.0792126},
   {-0.06629549, -0.01829867, 0.045215607, 0.07499911, -0.031326883, -0.034001686, -0.069725156, -0.0743662, -0.07022293, 0.03921096, -0.033523474, 0.08833387, 0.001836881, -0.0436911, -0.009514153, -0.091169074, -0.011485485, 0.08008418, -0.08960543, -0.051274728, 0.06516484, -0.048131496, 0.06529429, -0.062384896, 0.07018092, 0.024978178, 0.014525964, 0.093084574, 0.08669404, -0.07982269, 0.07673697, -0.024446448, -0.05699905, 0.06039308, 0.020723183, 0.002578056, 0.08189353, -0.03555972, -0.09205125, 0.042869292, -0.002595802, -0.073670834, 0.007260759, 0.08158172, 0.05783008, 0.04206712, -0.022079386, -0.09409411, 0.0024303542, 0.094844826, 0.02262859, -0.033239424, 0.015838167, 0.090543844, 0.03315472, 0.05304058, 0.04385195, 0.09354358, -0.016750678, -0.033293467, -0.045898758, 0.073334254, -0.0795409, -0.0760469},
   {0.054665525, -0.04772857, 0.07942095, 0.06567397, 0.089134745, 0.06296941, -0.020787295, 0.012369423, -0.04928506, -0.013601852, 0.08928492, -0.07565096, -0.044519644, 0.037575983, -0.08073594, -0.035553742, 0.0677743, 0.03284257, 0.079833396, -0.033677053, -0.02931901, -0.06371281, -0.08960954, -0.088921435, -0.076351844, 0.05169938, -0.0034483266, 0.08050548, 0.06060391, -0.04744171, -0.08544362, 0.057085775, -0.0020235255, -0.032207444, 0.038939662, 0.045416612, -0.05291584, 0.008134604, -0.027440103, 0.06978286, -0.03767625, -0.0050863624, 0.0073750936, 0.0557931, -0.04554382, -0.03034524, -0.074858904, 0.074720934, 0.00791372, 0.03804349, -0.05512428, -0.06931446, -0.07001148, 0.060806297, -0.04416847, -0.017649075, -0.08222018, -0.0640279, 0.06796927, 0.024754018, 0.02053144, -0.07424009, 0.051434696, 0.05693233},
   {0.07934299, -0.016973618, 0.051920287, -0.08231772, -0.031135835, 0.03776776, -0.03060357, -0.0780888, 0.020933531, 0.057657037, 0.06866922, -0.0052624904, -0.023910582, -0.068789944, 0.023291089, 0.025648192, 0.021618687, 0.016339742, 0.032535993, -0.0025406794, -0.049815804, 0.07532681, -0.09969178, -0.005229883, 0.084686935, 0.06647679, 0.0480212, -0.0054048896, -0.0705013, 0.07546591, 0.041711908, 0.018699924, -0.07583372, 0.044135835, 0.0467322, -0.036041986, 0.06128402, -0.0028283915, 0.08868912, 0.06799909, -0.0005005755, -0.058261022, -0.007863002, -0.066982895, 0.08429442, 0.07971487, -0.010043686, -0.08974816, 0.025035815, -0.073527336, -0.05377193, -0.060294002, -0.011058429, 0.07137955, -0.053980492, -0.030345492, -0.018985176, -0.079419315, -0.018317014, 0.04727128, 0.018244222, 0.07646764, -0.044478413, -0.0311722},
   {-0.030433577, -0.08303667, -0.051172372, 0.0156085, 0.022678472, -0.055038244, 0.080880515, -0.026206367, -0.010022993, 0.045981415, 0.08513827, 0.051578186, 0.06137874, -0.009743098, 0.048493452, -0.06957468, -0.020130202, 0.08965597, 0.056629337, -0.08701333, -0.051604647, -0.04391674, -0.09012173, 0.06784465, -0.068768404, -0.078558564, 0.086031064, 0.036262356, 0.081923045, -0.07877499, -0.030926296, -0.09025905, 0.015613966, 0.025673896, -0.0125533985, 0.03297672, 0.04848488, -0.034468457, 0.017973524, -0.03935043, 0.04759391, -0.053564683, -0.02350123, -0.03648256, -0.08367988, 0.055749085, -0.030766658, -0.018966062, -0.048616327, -0.056916676, 0.04168395, 0.036865555, -0.03939897, 0.009060055, 0.056588, 0.05783635, 0.045087248, -0.0821207, -0.018250428, 0.06201477, 0.018535446, 0.04020726, 0.02621133, -0.022468856},
   {0.0014911159, -0.07216819, 0.064347796, -0.015424116, 0.03878523, -0.07381472, -0.010458572, 0.020599112, -0.021801267, -0.061776694, 0.07811304, 0.07997494, 0.07210343, 0.0017319865, -0.08041257, 0.023958169, 0.007747913, -0.09324181, -0.00318411, 0.020917274, -0.0019076674, -0.008413841, -0.086962104, 0.042484097, 0.04445734, -0.03158828, -0.02116958, 0.026390873, 0.017762065, -0.037240244, 0.08057922, 0.013956472, 0.08032524, 0.08207124, 0.06485693, -0.02193751, -0.0099063525, 0.067931905, -0.09359247, 0.0076943636, 0.0688301, -0.030752212, 0.077853344, -0.04219805, 0.020850927, -0.011501036, 0.044335663, 0.04962972, 0.0009680238, 0.041187033, -0.073118806, 0.014023267, -0.0387966, -0.0025217012, -0.06608518, -0.06988339, -0.029481882, 0.061292257, -0.016981982, -0.03493524, -0.037186656, -0.06751113, 0.060226563, -0.0107745025},
   {-0.09217688, 0.08085421, -0.02254338, 0.029884763, 0.0033733326, -0.08209482, -0.075115226, -0.05716211, 0.06330293, -0.011077279, 0.012953527, 0.0626896, 0.06584243, 0.076085664, 0.04917126, -0.0028429702, -0.0009161134, -0.030982219, 0.006604813, 0.029591702, 0.07892187, 0.09284207, 0.030995594, 0.020080611, -0.090126246, 0.011952265, -0.060208883, 0.030929424, 0.019967139, 0.029830694, 0.01623045, -0.018190619, -0.059636064, -0.038522128, -0.07117454, 0.060860608, -0.08322753, 0.08185869, -0.07851648, 0.03974604, 0.05663817, -0.08555633, -0.020673128, 0.067823716, -0.080908276, -0.083558306, -0.04910105, 0.06466494, 0.022996565, -0.02577553, -0.08349381, -0.006602682, 0.014528238, -0.003251344, -0.029964298, 0.072478205, 0.093391754, -0.050750036, 0.0016616061, -0.031279992, 0.025588008, 0.030309774, -0.0853526, -0.012903438},
   {0.026713688, 0.089331746, -0.017605485, 0.048122875, 0.0069977045, -0.074972965, -0.061223723, -0.02505061, -0.009952533, 0.036637943, 0.08507008, 0.08582155, -0.080350764, 0.0033182814, 0.039081864, -0.087222606, 0.073903054, 0.01917237, 0.07457081, -0.015206559, -0.095273755, -0.0019882317, 0.07104584, -0.07989037, -0.02135218, 0.08727713, 0.03784923, 0.016881939, -0.065538615, 0.012775533, 0.03371932, 0.03979707, -0.02160643, 0.08009847, 0.04579675, 0.07154053, 0.014944728, -0.07428103, -0.04076545, -0.061097074, -0.02701321, -0.042623293, 0.01312405, 0.04947137, -0.05096748, -0.09397743, -0.021846183, 0.005408961, 0.037541766, -0.010671458, 0.08068109, -0.057869643, -0.09582506, 0.0782473, 0.036040388, 0.08893437, 0.04377006, -0.06639876, 0.044090502, 0.044296235, 0.003122924, 0.012897618, -0.0037706336, 0.08123646},
   {0.05157813, 0.09872587, 0.034187023, 0.07676521, -0.017976543, -0.092854135, -0.0805624, 0.052324917, 0.08495954, -0.024354225, 0.048558705, 0.055903602, 0.026986048, 0.024704674, 0.058623053, 0.015121378, -0.08613326, 0.031933583, -0.01317399, -0.038121223, -0.040921845, -0.05829044, -0.0139938025, -0.041834705, -0.036637787, -0.05825711, 0.08056149, 0.0667089, -0.044921145, 0.07618926, 0.02880701, -0.062324088, -0.0875393, 0.026343642, 0.060726713, 0.07184028, 0.054921534, 0.08452041, -0.020214224, -0.052398358, -0.091592714, 0.043892555, 0.08180592, -0.037448384, 0.030737791, 0.0009263696, 0.065891236, -0.08826035, 0.044256233, -0.08360498, -0.03288741, 0.01949402, 0.019046435, 0.07903264, -0.086153574, 0.035346135, -0.011787184, -0.009388242, -0.018717028, -0.04499034, 0.0048118844, 0.068743505, -0.0806394, 0.008125477},
   {-0.08677573, -0.021318806, -0.09982852, -0.045423504, -0.064441234, -0.061714288, -0.026187353, -0.029813118, -0.036474213, 0.008121539, -0.026069336, -0.020102067, 0.08412092, 0.06915701, -0.037230343, -0.0011071861, -0.08284075, -0.028639778, 0.08485236, -0.07923394, -0.0036703737, 0.08597705, -0.062596604, -0.08266993, 0.076571226, 0.06764071, 0.06678333, 0.08675813, 0.0716955, -0.013054088, 0.08297418, 0.044697456, -0.08163592, -0.05642163, 0.036727957, 0.0394896, 0.01199672, 0.040149413, 0.053539097, 0.02867923, 0.037017155, -0.07307677, -0.0025208325, -0.081237644, -0.0382425, -0.061440747, -0.04895575, 0.008520986, -0.065071195, 0.085858524, -0.024583656, 0.044452496, -0.003205287, 0.043783657, 0.050597034, 0.03720389, -0.07109133, -0.030640937, 0.087527834, 0.061585233, 0.06305639, -0.050772484, -0.008329744, -0.06538769},
   {0.015101845, -0.008887848, -0.0117086135, -0.00030346142, -0.017758906, 0.02224549, -0.07912077, 0.043703984, -0.08212932, 0.047185205, -0.089706525, 0.09148163, -0.015983164, -0.037848674, -0.0026488304, 0.009229347, -0.01011939, 0.036310248, -0.041491453, -0.031606495, -0.028634716, 0.024587942, 0.050300244, -0.0012522712, 0.03426953, -0.032173388, -0.021286394, -0.07076317, 0.01725562, 0.05353231, 0.06670899, 0.050057687, 0.01377669, -0.025814857, 0.025294725, -0.00052659895, -0.08479046, 0.0120588215, 0.07387858, 0.041852884, 0.0860724, -0.039592363, 0.042644195, -0.03213771, -0.008022909, 0.037667062, -0.042103328, -0.067153975, -0.026115201, -0.069609836, -0.092806526, 0.06128656, -0.08289725, -0.037798844, -0.09322557, -0.06348295, 0.028887916, -0.06053389, 0.069753475, -0.023182724, 0.09205838, 0.0554773, -0.021854846, -0.086178295},
   {0.048808012, 0.09861663, -0.06266279, 0.021715455, -0.054581784, 0.021000985, 0.068598256, 0.08149749, 0.066256195, 0.032821674, -0.025662914, 0.05393099, -0.07992988, 0.032091446, 0.018154956, -0.0048310086, -0.08330723, 0.0083423555, -0.050949916, -0.043427814, -0.0468748, -0.0045467163, -0.039632156, -0.08960957, -0.012587849, -0.036125153, 0.07488721, -0.027960598, 0.027968913, 0.049661644, -0.09301742, -0.06855567, -0.016660213, 0.055370744, -0.04351357, 0.04957216, 0.0030815506, -0.051955294, 0.028254077, -0.02680052, -0.035356626, -0.022996709, 0.0657216, 0.031067744, 0.020184709, 0.0034810414, -0.07253776, 0.053616874, -0.05832901, 0.061744403, 0.08292475, -0.038970377, 0.0551276, 0.010278001, -0.038326297, 0.03523011, -0.089044586, 0.09172558, 0.056262545, 0.036748376, -0.03457652, -0.011018507, -0.0144572705, 0.07186318},
   {0.05784369, 0.020472968, 0.06546966, 0.034038864, 0.067245096, 0.056603502, -0.0025269245, 0.08235154, -0.063881494, 0.025513522, -0.032439005, -0.06519887, -0.03596864, -0.054997902, -0.0046551526, -0.017597735, -0.0632653, -0.001765132, 0.005536072, -0.011488884, -0.014730052, 0.087683864, -0.01453803, 0.012471572, 0.07121111, -0.057559524, -0.021947732, -0.020152552, -0.006853357, 0.02988191, -0.0050685643, 0.048542, 0.009133458, 0.036354985, -0.024673035, -0.054645814, -0.07252428, -0.031485334, 0.024935037, 0.02026897, 0.038866423, -0.033357166, -0.039949622, 0.011662409, -0.07136949, -0.092066124, -0.0748533, 0.005377393, 0.02440459, -0.033884577, -0.040034365, -0.004506871, 0.050386786, -0.044042964, 0.060133584, -0.05000267, 0.065112844, -0.036309298, -0.02235239, -0.058866896, -0.06841318, 0.047793277, -0.05750212, -0.020182945},
   {-0.06857214, -0.016697166, 0.024007061, -0.0018811726, -0.07971067, -0.08165527, -0.006702843, 0.06484457, 0.07169447, 0.02203301, -0.028812408, 0.02589855, -0.015111327, -0.08734602, -0.066464946, 0.016819872, -0.046639796, -0.09011631, -0.07434653, 0.0024377424, 0.08057222, 0.015502802, 0.05256444, -0.034479905, 0.06572068, 0.01592158, 0.0024542839, -0.05772491, -0.041187845, -0.036970858, 0.04617644, -0.0149677945, 1.924485e-05, 0.015899483, 0.07955581, -0.0355395, 0.06097219, 0.009133103, 0.02489631, -0.08525036, 0.06836627, 0.014960721, 0.018319115, 0.08142746, 0.042723842, -0.09788327, -0.018189738, 0.033538718, 0.06154738, 0.06081558, -0.04002502, -0.04041797, 0.025903292, 0.023093961, -0.010497265, -0.068198845, 0.029813834, 0.04391004, 0.009490013, -0.09668285, 0.087989084, 0.034724005, -0.0341184, -0.027213117},
   {0.0760924, 0.089205146, 0.056687087, -0.05496374, 0.08923711, -0.02105251, -0.069614455, -0.0523887, 0.08765178, -0.041228574, 0.022792116, -0.05539748, 0.041565515, -0.054333717, -0.025840327, 0.0098045245, -0.055340644, 0.05410283, 0.07268099, -0.08631861, 0.084857106, 0.015191952, 0.052847505, 0.02996394, 0.07112184, -0.03063, 0.025627872, -0.018790284, -0.005985141, -0.03942443, 0.03802105, -0.0834839, 0.061442412, -0.04219187, 0.05836711, -0.061868157, 0.009303249, -0.0402829, 0.030831298, -0.07741521, -0.04008713, 0.07631057, -0.042845853, -0.01278764, 0.028732456, 0.02322091, -0.003428458, -0.07690585, 0.0058822003, -0.0534651, 0.050617523, 0.068059094, 0.061460786, 0.012858123, -0.0833018, 4.2506552e-05, 0.08765572, 0.09209632, -0.06712109, -0.021702003, -0.026790127, 0.050493322, -0.006816601, 0.08622888},
   {-0.0130117135, 0.05206062, 0.053049814, -0.036657136, 0.03084261, -0.0021459179, -0.009437358, 0.0741506, -0.05079873, 0.08867882, 0.05357098, 0.03638214, -0.07460315, -0.04861619, -0.07630084, -0.08229339, 0.08349364, -0.076023, 0.04978495, 0.026275098, -0.055743307, 0.06639891, -0.07760248, -0.07805789, 0.043690942, 0.08881366, 0.02448188, -0.091003336, -0.013470031, 0.05412335, 0.064627804, 0.0054540765, 0.026367806, -0.027004857, -0.09732337, 0.030933099, 0.02020641, -0.02493931, 0.025831694, 0.07990735, 0.009164712, 0.05256573, 0.09498977, 0.05809284, -0.08150883, -0.07656438, -0.067302585, -0.054341864, 0.026934095, 0.09457681, -0.028213125, -0.043384045, -0.0947728, -0.02614209, 0.09282098, -0.045468763, 0.078040615, 0.042354655, -0.07949252, -0.02105734, -0.01790022, -0.048820063, 0.036447175, -0.085530505},
   {0.005317267, 0.08259943, 0.01555036, -0.010688382, 0.052078012, 0.0018872006, -0.02433366, 0.04016095, 0.09313116, -0.016259504, -0.033212814, 0.013041429, -0.029414639, -0.015530861, 0.063304536, 0.091739155, 0.0027640571, 0.015062086, -0.08388551, 0.04190179, 0.027103312, 0.049058445, -0.060446106, 0.08237482, -0.05346214, 0.04348971, 0.05559568, -0.0148214195, -0.061756995, -0.07605553, 0.009618825, -0.037797555, -0.05168357, -0.006531176, -0.08854352, -0.06796261, -0.025098195, -0.049318507, -0.029024558, -0.08564799, 0.055283714, 0.025447346, -0.01699206, -0.038958807, -0.04816689, -0.09651056, 0.06532418, 0.037639074, 0.087595925, 0.030939741, 0.024623115, -0.06423244, 0.03719477, 0.013585992, 0.043316446, 0.0063738064, 0.041397095, 0.04389053, -0.0006842166, 0.08417084, -0.023601998, -0.022229977, 0.0045490386, -0.08685748},
   {0.047175616, 0.076244384, 0.0337304, -0.057336714, -0.008690418, 0.02334768, -0.005507112, -0.08373965, -0.061047573, -0.051587023, 0.06397357, -0.01033994, -0.0076159984, 0.07182061, 0.08716708, 0.0031595677, 0.010378386, 0.065991886, 0.053971834, -0.07222503, 0.057027463, -0.082480006, 0.042212732, -0.065720014, -0.034887906, -0.049405903, 0.0010532931, 0.017648235, -0.052993, 0.081102885, -0.025053388, 0.080074996, -0.03773884, -0.09165245, 0.07721, -0.053740155, 0.044719145, 0.08657727, -0.06931237, 0.042344444, 0.05212614, 0.035263263, 0.08320909, -0.06745906, 0.058097735, 0.047543924, -0.012053472, 0.005657894, -0.074927256, 0.048624568, -0.009432535, -0.031934, 0.034846336, -0.09266615, 0.048574187, 0.01105616, 0.083931096, -0.04801676, 0.022716708, -0.018870968, -0.01933831, -0.08620041, -0.009610778, -0.07980556},
   {0.08911879, 0.06129929, 0.08025893, -0.046631537, -0.07041847, -0.034586005, -0.016498365, 0.080464534, -0.009441385, -0.01624593, 0.0023193434, -0.021793427, -0.01991301, -0.05024666, 0.052107252, -0.049270958, -0.04941862, -0.0825923, -0.030336231, -0.039654877, 0.035978038, -0.06698753, 0.010064256, -0.06199559, 0.0023899626, 0.0055617383, 0.07162552, 0.011296731, 0.038849764, 0.072754316, -0.0108979, -0.035446722, 0.014097646, -0.02639279, -0.018571412, -0.09005387, -0.07188988, -0.08572428, -0.07019172, -0.09255617, 0.06306497, -0.0290749, -0.07585332, -0.011592567, 0.024493687, -0.0047666947, -0.025869632, -0.04227898, 0.043252587, 0.06826453, -0.025682509, 0.030279003, 0.02295333, 0.015454665, 0.0928083, -0.05537778, 0.066487096, 0.02370751, -0.040291287, -0.08730498, 0.016637873, 0.08793216, -0.097376734, -0.0004959487},
   {0.023586992, -0.0065022507, -0.05577414, 0.07688138, 0.014378415, -0.0838279, 0.08373604, 0.08131602, -0.07873162, 0.059949018, -0.046478137, 0.0877139, 0.018564798, -0.049518343, -0.05272931, 0.059944727, -0.07915146, 0.0058750585, 0.04216536, 0.047310732, 0.08093864, -0.061628196, -0.08022294, -0.046755847, -0.0143376645, 0.07345521, -0.011962672, -0.07772413, 0.046510153, -0.04906783, -0.031846587, -0.008496795, -0.06759527, 0.03888486, 0.041052777, -0.037138965, -0.043532316, 0.048679918, -0.06207308, 0.013884485, -0.00067603786, -0.05408831, 0.014274959, -0.028471202, 0.0011955443, -0.024564814, 0.033811703, 0.07196382, 0.018255193, 0.029888872, -0.045761455, -0.059646763, 0.023631038, 0.0007478669, 0.00027490407, 0.02340838, 0.06492103, 0.05213968, -0.072120585, 0.08488299, 0.016650932, -0.005451709, 0.033556387, 0.083080344},
   {-0.030267427, 0.046634547, 0.021695074, 0.006106774, -0.053029045, 0.031562973, -0.04915729, -0.03209104, 0.04609691, 0.061104547, -0.05049402, 0.07559145, -0.083930165, -0.04322888, 0.0696469, -0.08470058, 0.06291691, -0.013014153, 0.06950302, -0.015558292, 0.08145988, -0.07851033, -0.08666681, -0.063340686, -0.029862955, -0.046354275, 0.039797463, -0.07842602, 0.0114129335, 0.042526536, -0.019489465, 0.007889408, 0.03652384, -0.0010532133, 0.033141837, -0.008127832, 0.04587999, 0.05947651, -0.046717387, 0.04709015, -0.03462932, 0.0294924, -0.087061696, -0.053738937, 0.055692036, -0.09084794, -0.040456824, 0.068497464, -0.0050564343, -0.034715645, 0.058993883, 0.04597331, -0.031680837, -0.014192201, -0.054920167, -0.08457955, 0.010697625, 0.056628413, -0.04468553, 0.018092636, -0.038623873, -0.07305339, -0.004828722, -0.096494295},
   {-0.01722434, 0.00013162532, 0.07763623, 0.044891667, 0.028103022, 0.044957116, -0.013914744, 0.013861987, -0.058426175, 0.060283095, 0.08970184, -0.027820755, -0.04968096, 0.010036573, -0.016069867, 0.026347555, -0.0235833, -0.03166121, -0.005462587, -0.021707516, 0.041068204, 0.05589922, 0.021569692, -0.0704879, -0.04248806, 0.07019379, -0.09057742, -0.048542097, -0.043416105, 0.04749275, -0.037012395, 0.017375946, 0.09206133, 0.050348997, 0.07443313, 0.049811367, 0.05130344, 0.089241885, -0.0010615998, -0.01245898, -0.009869676, -0.049045913, 0.09526536, 0.026901998, 0.05139684, 0.04712331, -0.07296331, 0.041098163, -0.09006828, -0.04653645, -0.03376546, -0.07179451, -0.02364998, 0.014363967, -0.059636418, 0.01665648, -0.06291671, -0.067564026, -0.070755355, -0.041416954, 0.038115047, 0.027840428, -0.024687562, -0.07511741},
   {-0.0227815, 0.0802262, 0.029480062, -0.02936729, -0.00043668476, -0.08131924, 0.04656159, 0.071866505, -0.08898633, -0.08254736, 0.0545033, -0.009737694, -0.0896465, 0.029879915, -0.023380391, -0.04096427, -0.0013935099, 0.049126558, 0.019920439, 0.005845434, 0.04576, 0.06810459, 0.042148076, -0.07752897, 0.070593275, -0.058354255, -0.01754032, -0.018027931, 0.017558508, -0.06526921, -0.07864607, 0.02824292, -0.07591883, -0.02655112, 0.08751261, -0.00088126794, 0.06006155, -0.08282628, -0.03455054, 0.016123489, 0.03967809, -0.06735487, 0.09525922, 0.07999026, -0.06886459, 0.06918245, 0.045091216, 0.037271377, -0.06024784, 0.088462375, 0.027567172, 0.03811712, 0.049740452, -0.040408205, -0.08318121, 0.0009946221, 0.083705485, -0.057648305, -0.05363639, 0.009797195, 0.03759513, -0.023629338, -0.03585042, -0.04409639},
   {-0.08690429, 0.055210736, -0.038284115, 0.080521315, 0.087681234, 0.008109096, 0.06586117, 0.03711016, 0.075585544, -0.016783053, -0.056601398, -0.045050044, 0.04283247, -0.07959633, -0.06982736, -0.080483034, 0.06620074, 0.05762192, 0.03189642, -0.018420048, -0.0563177, -0.044618, 0.015210252, -0.024844542, -0.019382555, 0.048131503, -0.08702016, 0.0028504664, -0.058077715, -0.0731378, 0.049717166, 0.0060740146, 0.07338718, 0.060682926, 0.037593447, 0.077569485, -0.0558674, -0.049820915, 0.035693765, 0.03453233, -0.0373607, -0.082110465, 0.05037417, 0.06544443, 0.085509785, -0.00034754642, -0.09703959, -0.07701367, 0.076285094, -0.023331033, 0.015001982, -0.06973554, 0.0047825314, -0.081754684, 0.041415535, -0.058204576, -0.022522675, -0.021068273, -0.002521813, -0.0450684, -0.02663346, 0.0808611, -0.009377991, 0.041919023},
   {-0.0406478, 0.022368275, 0.06932897, -0.013962066, -0.06680612, 0.08667984, 0.06618115, -0.010392336, 0.063131295, 0.040743846, -0.0862367, -0.038884077, -0.052766997, 0.06000474, 0.06542853, -0.00074106455, 0.041281294, 0.035640486, 0.016871423, -0.077597454, -0.07217145, -0.06639615, 0.02224971, -0.008025087, -0.02112482, 0.03837888, 0.07288551, -0.06024376, 0.08210439, -0.07537985, 0.053516563, -0.063717596, -0.009011775, 0.085955314, 0.046876796, 0.08454593, -0.029493898, 0.089715704, -0.054889448, 0.02450271, -0.05360343, -0.027319781, 0.0144821955, -0.053719934, 0.016313972, -0.05143483, 0.005483174, 0.053572766, -0.021229781, -0.08990291, 0.015579719, -0.024353862, 0.07551953, 0.026506566, -0.05264712, 0.08937408, 0.07731202, 0.076210015, 0.086527936, 0.006391871, -0.08042419, -0.08629261, 0.018955693, 0.0133991},
   {-0.06881023, 0.07645247, 0.07694444, -0.068188466, 0.06707989, 0.022940485, -0.057333536, -0.062427036, 0.03538373, 0.09374797, 0.041981243, 0.030912664, -0.0755633, -0.06547476, 0.040424563, 0.069760524, 0.048439857, 0.00798782, -0.07543042, 0.0070369197, -0.056807373, -0.077119514, -0.076454684, -0.012829043, 0.059725646, 0.084916815, 0.09163813, 0.005609131, -0.08596814, 0.015101023, 0.019238537, 0.041475806, -0.009252995, -0.058500957, 0.07232108, 0.07290643, 0.043723974, 0.08722563, -0.06524425, 0.013408937, 0.002544175, -0.088780686, 0.019004129, 0.013009481, 0.09590103, -0.0826093, 0.05224859, 0.07251541, 0.036517356, 0.015781194, -0.038402572, 0.056690462, -0.085028656, 0.092336975, 0.037500106, -0.04144542, -0.053311758, -0.038270146, -0.07917385, -0.056847144, 0.04985893, -0.04732626, 0.050692733, 0.06468011},
   {0.04388369, -0.072702244, -0.080433406, -0.08790871, -0.052081183, -0.06839917, 0.073791705, 0.06666454, 0.0017971392, -0.012344769, 0.07692174, 4.211276e-05, -0.07028806, -0.040334683, -0.017580315, 0.06008231, 0.039955687, -0.0042273104, -0.063490614, -0.010654944, -0.043037545, 0.01026595, -0.08887021, 0.013364725, 0.008846435, -0.07743621, -0.0069007087, 0.019302933, 0.039992727, -0.0059627816, -0.059599243, 0.06955879, 0.08768193, -0.046651863, -0.016457586, -0.014683804, -0.06934118, -0.013415822, -0.038211945, -0.038356442, -0.07950973, -0.0048859864, 0.020455439, -0.005784996, 0.026539188, 0.021294301, 0.074992314, 0.02399192, 0.025940116, -0.047822006, 0.049355097, -0.072751, 0.06202928, -0.07237257, -0.04637223, 0.046470046, 0.006506677, -0.06753754, 0.0009273067, -0.08971872, -0.021145271, -0.07729133, 0.022599665, 0.008526818},
   {0.060758222, 0.0771456, -0.05801125, 0.039391484, -0.067305215, 0.06215284, -0.028190779, 0.059783656, 0.0620131, 0.04748232, -0.02510523, -0.06396311, -0.03353371, -0.0747955, 0.06685663, -0.056366317, -0.093065605, 0.09260387, 0.012201451, -0.054202706, -0.019327287, 0.065115504, 0.07085801, 0.03835637, -0.063204914, 0.022137458, 0.05179312, 0.06337478, 0.08707138, 0.029800229, -0.0200417, 0.030382415, -0.07654965, -0.011392338, -0.08309884, -0.07510019, -0.06779933, 0.0890303, -0.02638899, 0.0052804574, 0.06233194, -0.0047289133, 0.06488785, 0.022951126, 0.039926093, -0.035232276, 0.003545458, -0.017589089, -0.04637323, -0.08592613, -0.018357936, 0.075297914, -0.057895303, -0.077082306, -0.07485914, -0.004176131, -0.015657598, -0.017981602, -0.064539894, -0.05567512, 0.018815028, -0.025411531, -0.06486337, 0.07177257},
   {0.06860351, 0.08550491, 0.08344991, 0.04211073, 0.05510358, 0.03135955, -0.04330158, 0.039839413, -0.05338661, -0.017202439, 0.08682569, -0.026053477, 0.07189313, 0.069398485, 0.075478144, -0.04317092, 0.009386335, 0.04796713, 0.04205028, -0.034406226, -0.07404831, -0.054445803, -0.090753146, -0.0126985535, 0.009670814, 0.064785555, 0.008887739, -0.017751766, -0.006698191, 0.05601669, 0.0507297, 0.010844708, -0.07258874, -0.008334314, 0.047646828, 0.063240245, 0.062311213, 0.013818843, -0.04140984, -0.01387278, -0.033487692, 0.037923686, -0.035461828, -0.076273605, 0.03563314, 0.06363111, -0.081724115, -0.071768686, 0.038286284, 0.03394268, -0.03947056, -0.0916019, -0.001777739, 0.025835477, 0.022398911, -0.047072917, 0.0075814985, -0.014183631, 0.062673114, 0.030863663, 0.05322388, -0.033299632, -0.044464655, -0.006437732},
   {0.025514083, 0.008053663, -0.08421847, 0.0062975627, -0.005929687, -0.026523214, -0.05037281, 0.070368685, 0.06425186, 0.0094361445, -0.047839407, 0.07706774, -0.022400737, -0.0839913, 0.019521743, -0.07049137, -0.08250956, -0.028175361, -0.026640058, 0.034978893, 0.061388195, 0.05825784, -0.04681675, 0.08157662, 0.083444335, -0.06176011, 0.085960045, -0.026911166, 0.021044828, 0.0564036, -0.046259303, 0.084489666, -0.023162425, -0.04908096, 0.0737157, -0.046598278, 0.058173336, 0.042390674, 0.016014649, -0.006917678, -0.05178075, 0.056262143, -0.07288178, 0.020660281, 0.04674039, -0.040766876, -0.03793005, -0.07556198, -0.057070658, 0.047566533, 0.00846751, -0.08293921, -0.02091431, 0.06801302, 0.057212614, -0.022319509, 0.03594044, 0.031173535, -0.074592695, 0.05703337, 0.023645008, 0.03769607, -0.095779575, -0.026590835},
   {-0.041532658, -0.07164484, -0.09162709, -0.013379227, 0.09075689, -0.066511996, 0.016709998, 0.008410725, -0.04795966, 0.075266376, -0.06177455, 0.062219482, -0.047917943, 0.07855182, -0.013925016, -0.061760396, 0.014861732, -0.08132973, -0.03187028, -0.03316536, -0.06342234, 0.02359121, -0.03799411, 0.026252039, -0.015407289, -0.063431785, -0.08325469, 0.08844874, -0.044823606, -0.055313524, -0.09128929, 0.04894278, 0.057250656, 0.068525665, -0.059861075, 0.056017615, 0.033157703, 0.07473191, 0.033865664, 0.027106732, 0.05387465, 0.046127357, -0.013298962, 0.074924596, -0.049989976, -0.09442659, -0.042731628, 0.03728628, -0.060138434, -0.046569373, -0.08550581, -0.032922693, -0.031546492, 0.011897087, 0.08038912, 0.055303156, 0.05557999, -0.009114309, -0.020738304, 0.081145115, 0.021791128, 0.0929096, 0.08240653, 0.04592127},
   {-0.059047107, -0.012411205, -0.09973878, 0.01806479, 0.020908883, -0.08732033, 0.044712648, 0.05581839, -0.050062217, 0.07795501, 0.025994599, -0.05926752, 0.09231333, -0.07588747, 0.092958875, 0.032528304, -0.04017675, -0.02954068, -0.07410629, -0.037043758, -0.029815026, -0.07948343, 0.07119445, 0.034499265, -0.02656682, -0.051273175, -0.07621411, 0.001682753, -0.0857491, -0.086770244, 0.005623844, 0.004134521, -0.0408702, 0.08784077, -0.0684892, 0.022647839, -0.016665764, 0.061497837, 0.046571966, 0.071568124, 0.048854556, -0.03285501, -0.009667891, -0.08528476, -0.027927117, 0.083487, 0.044148352, 0.040228877, -0.058883816, 0.07066606, 0.042630233, 0.021433115, -0.08214265, -0.030558668, -0.033407204, 0.04315961, -0.07450872, -0.09270166, 0.0010847598, -0.09228362, -0.06763052, 0.062791266, 0.01242455, -0.09687386},
   {-0.024669806, -0.057541076, 0.08290979, -0.06877988, -0.03142321, -0.09130445, 0.04897103, 0.027034642, -0.07560886, -0.05642726, 0.06360892, 0.0146383485, 0.089457415, -0.070027314, 0.06360505, -0.044823673, 0.059692018, -0.06893832, -0.078274414, 0.0103397835, -0.058361247, -0.08501804, -0.08516773, 0.0066678673, 0.07619661, -0.033722036, -0.08234103, 0.017698972, 0.0028680488, 0.0095091015, 0.090994455, -0.08313307, 0.05245503, 0.005116367, 0.0034422814, -0.079240225, 0.076873586, 0.07649349, 0.024503244, -0.030246496, -0.009641958, -0.0037854537, 0.070283316, 0.015945256, -0.019696437, 0.05065502, 0.018416429, 0.077077754, -0.055736244, 0.08344587, 0.01913207, -0.07997509, 0.07644687, -0.08544384, 0.06729051, -0.05525438, 0.088062, -0.09291621, -0.020248346, -0.091307506, -0.013077822, 0.037477814, 0.05207362, -0.008919261},
   {0.04932917, -0.059338417, 0.03433604, 0.01588528, -0.01206255, -0.06486641, 0.04385789, 0.043338124, -0.059722807, -0.050622538, 0.072575144, 0.04677513, 0.04550112, -0.022714997, -0.050214216, -0.08946844, 0.042222794, 0.054150514, 0.0766721, -0.09268576, -0.06559905, 0.030416615, 0.058415625, -0.037671536, 0.07816946, -0.058172453, 0.066388406, -0.07657824, 0.082596354, -0.04455284, -0.06788887, -0.048432972, 0.0060153604, 0.05529111, 0.074256964, -0.03080853, -0.019887507, 0.00941463, 0.0392733, 0.04915916, 0.08015211, 0.016088977, -0.086032644, 0.00087013096, -0.072852656, -0.06570719, -0.02800523, 0.0669348, -0.07419388, -0.035745844, -0.022031585, 0.019898504, -0.050182417, -0.057950627, 0.06540134, -0.0065515093, -0.016132288, -0.04013116, 0.034504913, 0.0708847, -0.0151063455, 0.043265976, -0.061301794, -0.059039157},
   {0.008569774, 0.05191647, -0.013764268, 0.030133976, -0.034415882, -0.05421844, 0.0032486415, 0.04896517, 0.0027648262, -0.017319296, -0.0002491176, 0.08931407, -0.04504634, 0.024939578, 0.093027644, -0.089113735, -0.058786687, -0.08699409, -0.07476897, 0.0042359666, 0.0690651, -0.0402874, -0.02386632, 0.055091374, 0.037805382, 0.00012896705, 0.07283866, 0.045622706, 0.0607043, 0.061890952, 0.040872943, -0.0021790834, 0.02875837, -0.038184606, -0.083846405, 0.06766113, -0.024559759, -0.033816207, -0.018931575, 0.04443354, -0.019725014, 0.0858612, 0.086585596, 0.07785792, 0.088369966, -0.0928323, -0.08497347, 0.05550582, -0.012115156, -0.06693549, -0.062173877, -0.05962496, -0.044173017, 0.04994666, 0.081177704, -0.04555267, -0.0046514766, 0.0878938, -0.034022495, -0.08286285, -0.064276524, 0.048574083, 0.0714394, 0.04146533},
   {0.04639089, 0.059051666, -0.08275232, 0.028866839, 0.015133288, 0.061751135, -0.07231347, 0.08092166, -0.051948365, 0.005543729, 0.019654833, -0.019623226, 0.04720082, 0.0297652, -0.05020801, -0.07434417, -0.040079784, 0.016976908, 0.06880329, 0.083611846, 0.07568634, -0.027080745, -0.046843164, 0.023670115, -0.04920182, -0.091198094, -0.08856608, 0.078616306, -0.028241947, 0.005387649, -0.081718326, -0.0030640315, -0.018483438, -0.025822144, -0.08461988, 0.015789818, -0.063615836, -0.055523083, -0.055750616, 0.055539884, -0.005482454, 0.031551234, 0.09199312, -0.01373817, -0.031211479, -0.08394103, 0.02415712, -0.046920996, 0.0406003, -0.011010042, 0.029355189, -0.07284963, -0.0049654124, 0.025369324, 0.078164615, -0.018872866, -0.028963529, 0.029017054, 0.015916482, -0.035662476, -0.0036857359, 0.058430843, -0.008442219, -0.0918037},
   {0.07318581, 0.012913934, 0.048501458, 0.07021733, -0.013395297, 0.029868135, -0.014105257, -0.09539485, 0.06248532, -0.057213217, 0.016851425, -0.028312463, 0.07868261, -0.065262556, 0.010323964, -0.002804011, -0.064313926, 0.06698138, 0.02074258, -0.06278672, -0.04753998, 0.07684351, -0.011611151, -0.06563048, -0.007632339, -0.060399346, 0.024413077, -0.014716015, 0.07946459, -0.0037273392, -0.0341716, 0.05323543, 0.08705198, -0.058213558, 0.08062692, -0.0053270073, -0.027112406, -0.09264007, -0.002894947, 0.04668451, -0.049146563, 0.070385195, -0.039619386, 0.039929293, -0.07335732, -0.0040618246, 0.008337586, 0.034941334, -0.092542596, 0.021920413, -0.094549626, 0.05577179, -0.08679254, -0.02648563, -0.03739218, -0.03470658, 0.090706274, 0.012129751, 0.06672118, -0.01313712, 0.028084511, 0.0126671195, -0.010463433, 0.01647601},
   {0.013610621, -0.069770664, 0.081720494, -0.092732385, -0.011264426, -0.034793854, -0.024476008, -0.0038552028, 0.043528084, 0.027977178, -0.07037866, -0.012016767, -0.0304159, 0.0904932, 0.0025065467, 0.046963446, 0.041088056, 0.023717374, 0.04269991, -0.024485247, -0.0029999176, -0.06367729, 0.04599365, -0.082747154, 0.03441158, -0.038411997, 0.035619505, 0.05958894, 0.019325174, -0.031621296, -0.052524865, -0.088883206, 0.021825314, 0.09376218, 0.080352895, 0.0064617773, 0.037811805, 0.009866632, 0.065781966, -0.00875438, -0.06273971, 0.021698318, 0.094224006, -0.013736926, 0.0021057907, 0.08650228, 0.085434504, -0.06633034, 0.039732758, 0.032485638, 0.03536033, 0.07463486, -0.021851398, -0.0012841299, -0.05505495, 0.065606, -0.03773574, 0.007943714, -0.06130245, 0.010283234, 0.064831406, -0.07151664, -0.03149505, -0.009713612},
   {-0.010331059, -0.031476352, -0.042520415, -0.07184415, -0.04106027, 0.018561747, 0.05013466, -0.07813981, -0.00072364084, -0.07034041, 0.0102565065, 0.055663362, -0.083062045, -0.05565115, -0.019600816, -0.04797873, 0.025294296, 0.011406258, -0.007782869, -0.030445294, 0.046619438, -0.028504932, -0.03906075, 0.06386217, 0.057599626, -0.04628136, -0.06879179, -0.053629622, 0.043927588, -0.020950846, -0.07313179, -0.03414687, -0.0709153, -0.036585413, 0.0043110093, 0.03196229, 0.020805033, -0.071490064, -0.027331827, -0.043469522, 0.039001454, -0.041346367, -0.029552074, 0.06277514, 0.016671749, 0.063283674, -0.00092343567, -0.06360939, -0.09116142, 0.015706582, 0.01656727, 0.03746233, -0.016274998, -0.02921898, -0.06592327, -0.01357471, 0.08138951, 0.087637715, -0.055174313, 0.027400143, -0.028756471, 0.06490453, -0.0012370493, 0.051562104},
   {0.04875321, 0.007845832, -0.057523586, 0.07434134, 0.08973328, -0.043721236, -0.08644531, -0.009584394, 0.026095532, 0.031709913, -0.03927892, 0.04142863, 0.07081554, -0.028766822, -0.021781042, -0.08634071, -0.0022423004, -0.03189727, 0.07158864, -0.028075397, -0.09229837, -0.08775234, 0.08371829, 0.014446661, 0.0012103011, -0.0062032575, 0.033351243, 0.028708378, 0.08603599, -0.014796749, -0.091903, 0.02589076, -0.040064704, -0.034115385, 0.012395016, -0.041987173, 0.061327476, 0.090906516, 0.04727558, -0.028292567, -0.06390901, 0.002115123, -0.036828604, 0.058527656, 0.07161165, 0.033258554, 0.028041642, -0.022147752, 0.021177812, -0.06238439, -0.053868182, -0.09131883, -0.0019477381, -0.012696549, 0.038776107, -0.040547725, 0.08016829, 0.055053715, 0.009328514, -0.049077876, 0.0836666, -0.049754668, -0.051483218, -0.0073609613},
   {-0.034322783, -0.0038257851, -0.07793364, -0.0063771666, 0.084590495, 0.062700175, -0.02244, -0.07947107, -0.0423143, 0.021575075, 0.05985368, 0.07513492, 0.08030895, 0.025007205, -0.069633506, 0.028947525, -0.04144753, 0.07198384, -0.06303369, 0.029538251, -0.0094735725, 0.064429894, 0.057091884, 0.028175563, -0.03234647, 0.09422834, 0.040736683, -0.06293696, 0.020473592, -0.038615555, -0.06485834, 0.085196845, -0.04619235, 0.066033885, -0.058997437, 0.05046515, -0.04430787, 0.004262919, -0.096657954, -0.07205902, 0.057323046, 0.018837392, -0.03796369, -0.04099408, 0.080348045, -0.02100365, 0.036426645, 0.016473532, 0.08227891, -0.009788417, -0.027704302, -0.058482196, -0.071612075, -0.0058114678, 0.016476795, 0.059972066, 0.012534112, -0.016896114, -0.02845002, -0.09272678, -0.027439984, 0.082058825, -0.08958045, -8.772775e-05},
   {-0.08952713, 0.09281019, -0.00552821, -0.060889747, -0.047244355, -0.08753533, 0.01719812, -0.027731009, -0.0103749195, 0.04472731, -0.08790438, 0.04523603, -0.04826222, 0.066556245, -0.059057172, -0.039559525, 0.033191796, -0.02673442, -0.0063246116, -0.029179018, -0.013289463, 0.0024342644, 0.029541647, -0.0014214292, 0.026207183, -0.08349171, -0.0912049, 0.060647685, 0.037962906, -0.02990447, -0.029764354, 0.04505426, -0.07698599, 0.026574519, -0.053012896, 0.0058746757, 0.07041341, -0.066957004, 0.040984567, 0.0251659, -0.042173322, 0.029567018, 0.093131654, -0.074404866, 0.06981251, -0.054874245, 0.027727205, 0.05708211, 0.060368042, 0.019602094, -0.059418004, 0.014208026, -0.049689844, -0.0067917705, -0.06725122, 0.008516762, -0.061722327, -0.024952725, -0.038235478, 0.030346457, -0.070591405, -0.021519057, 0.06270049, -0.022803253},
   {0.016367678, -0.062296268, 0.04514936, -0.04459942, -0.0761586, -0.0064200433, -0.06694763, -0.026604421, -0.08793254, -0.012440647, -0.029231668, 0.012731525, 0.024212316, -0.03244126, -0.07603833, 0.08845212, -0.03342712, 0.042607717, -0.030290619, -0.038326625, -0.04230941, -0.03567393, 0.03491202, 0.08712166, 0.037408367, -0.012687277, 0.036312442, -0.009261968, -0.030444488, -0.0320628, -0.038131673, 0.010538573, -0.08759717, 0.0894292, -0.06424802, 0.043214887, 0.059418917, -0.023655534, -0.046410933, 0.012961671, 0.024853876, -0.084414214, 0.06298847, -0.033392187, 0.05598683, 0.07006579, 0.040498715, 0.010782494, -0.012564573, -0.0262286, 0.07635034, 0.06667667, 0.06983243, -0.08168311, 0.03955365, 0.07812812, 0.016662542, -0.026662031, 0.045441054, -0.05095063, 0.010733602, 0.057823963, 0.013516991, 0.06960883},
   {0.085436895, 0.029890982, -0.08332794, 0.0017795475, 0.07465658, -0.067393385, 0.0029188255, -0.05658551, 0.055916592, 0.05642138, -0.049735937, 0.01067797, -0.00045412034, 0.00024233517, -0.07268016, -0.046137597, -0.013355275, -0.05232952, -0.08143297, -0.09683556, 0.041658994, -0.080396034, -0.095928885, -0.07899608, 0.012252548, 0.036121413, -0.0893016, 0.048097134, 0.03266781, 0.03048265, -0.012416256, 0.08341922, -0.0390636, 0.028387418, -0.04616466, 0.059022456, 0.020570023, 0.08672236, 0.057631016, -0.02513691, 0.07968919, -0.00921531, -0.014120067, -0.009558298, 0.07815901, 0.033199262, -0.043566175, -0.04076471, 0.051219955, 0.06189878, -0.037340164, 0.04396396, -0.0042708837, 0.0648771, -0.0018227547, 0.074997045, 0.0906274, 0.0832505, -0.08768754, -0.083544165, -0.01214319, 0.08138784, -0.0780644, -0.007853642},
   {-0.081897885, 0.076661296, -0.059656575, -0.0106588565, 0.024201863, -0.03540239, -0.07494232, 0.026020333, -0.027034871, -0.06781671, 0.063094236, -0.0064456174, -0.061085146, -0.051101517, 0.06177918, -0.049682293, -0.05969284, -0.0048488304, -0.07793074, 0.020597585, -0.095700584, 0.08235996, -0.024031028, 0.07811979, -0.02198954, 0.0129330745, -0.08431189, 0.036467623, -0.059031453, 0.027734697, -0.0056372792, -0.06110229, 0.028011031, -0.059274826, -0.07981634, -0.028953826, 0.02332144, 0.036130954, 0.033101406, 0.04145249, -0.07675003, 0.07229551, 0.02403405, 0.035286047, -0.058514606, -0.09544818, 0.051694646, -0.07536174, 0.07545487, -0.06949628, -0.009097544, -0.0593721, -0.018882688, 0.088393144, -0.027890421, -0.040703032, 0.07474224, -0.012431763, -0.08040476, 0.014192042, -0.044607498, -0.037147556, 0.028088832, 0.014481148},
   {0.06309809, -0.039289966, -0.061854597, -0.00021263705, 0.044659346, -0.0308627, -0.054890078, -0.03951496, -0.015702182, 0.0014302041, -0.03455633, -0.0621846, -0.0716589, -0.024166882, -0.015966125, -0.08464569, -0.03780683, -0.05086762, 0.08934002, 0.0009260601, -0.0047579464, -0.08960404, 0.009193355, -0.04327716, -0.036355034, -0.08392301, 0.0026664417, 0.061746635, 0.03642369, 0.039004244, -0.068249516, 0.06832155, 0.021942034, -0.07464303, -0.011177204, 0.0082604345, -0.021858372, 0.07979767, -0.053751774, -0.08908906, 0.08212852, 0.02007901, 0.033862196, 0.0627271, 0.019927721, -0.033255666, -0.06536299, -0.020826897, -0.07686684, 0.072225794, -0.06734448, 0.066453554, -0.08582821, 0.09104807, -0.08478196, -0.04908445, 0.076792404, 0.080404155, -0.02120462, 0.03504493, 0.00021250051, -0.014139228, 0.04346036, 0.056152523},
   {-0.08115371, -0.017293954, -0.023620714, 0.048774835, 0.064557165, -0.07183032, -0.039812934, 0.03376922, -0.03881806, 0.0019215384, 0.06768661, -0.0032704645, -0.059742454, 0.06807937, -0.024039648, -0.028675556, 0.07814304, -0.08752183, 0.01581505, -0.052019022, 0.00016281105, -0.052161887, 0.014191214, -0.030310422, -0.09057699, 0.09157992, -0.05748971, 0.067097284, -0.0050297827, 0.045677535, -0.021075131, 0.07865541, -0.08890235, 0.017157037, 0.035445906, 0.079420015, 0.04535302, 0.071655296, -0.081571445, 0.029781029, 0.04494962, 0.0700066, -0.065914735, 0.060101412, -0.004869739, 0.027892219, 0.07151346, 0.0048414674, 0.06127834, 0.020080669, -0.08947182, -0.080405205, 0.010410538, -0.0027527958, -0.0036630854, 0.049146768, -0.029648349, 0.06573877, -0.040404066, 0.08232647, -0.055432975, -0.077612005, -0.010254496, -0.0060847118},
   {0.054388937, 0.013186332, -0.011510299, -0.09756608, 0.035541996, 0.002495496, -0.022054784, 0.041773435, 0.024404136, 0.09212526, -0.070844635, 0.06802018, -0.044594467, 0.04919539, 0.037409462, 0.020692118, -0.059079107, 0.078940116, 0.048968248, 0.082911395, 0.052203853, -0.028074726, -0.09143224, 0.0038457662, 0.047623664, 0.04018053, 0.028110083, -0.06465228, -0.015048452, -0.06975565, -0.086231455, -0.016338639, -0.04061843, 0.04794281, 0.006651358, -0.08618287, 0.010169546, -0.046408195, 0.06738567, -0.041721527, -0.023394085, -0.06310714, -0.03970556, 0.007561311, 0.06378978, -0.08448443, 0.02744686, -0.067782335, 0.015251158, -0.017196158, -0.0072816247, -0.077139795, 0.018425366, -0.029230863, 0.035180785, -0.017355992, 0.07565048, 0.06707487, -0.01432997, 0.032255013, -0.058961965, 0.028456204, 0.05778062, -0.002401606},
   {-0.06047819, -0.017099716, -0.04481781, -0.058093127, 0.08559232, 0.017104926, -0.07764424, 0.08130852, 0.06607735, 0.056579784, -0.08118674, -0.08139849, -0.05747179, -0.031549443, -0.06550233, -0.027763471, -0.09668454, 0.084357984, 0.02105651, 0.05657772, 0.07012225, -0.06920915, -0.021138715, -0.050491504, -0.053975794, -0.04801708, -0.019024441, -0.07541524, -0.018855192, -0.027404703, -0.01808929, 0.074883826, -0.05857702, -0.07766314, 0.055901077, 0.054558087, -0.03195329, 0.017757637, 0.014798502, 0.05025945, 0.06713369, 0.05506348, 0.007335441, -0.089216836, 0.027215378, 0.045355376, -0.09006219, -0.01881404, 0.058486648, -0.034125656, 0.056778252, 0.085094474, 0.0169671, 0.045914777, 0.037356667, 0.037966505, -0.07476543, 0.06297796, -0.088779196, 0.05135125, -0.078065686, 0.05062569, -0.049505785, -0.023778707},
   {0.039385706, 0.051530186, -0.022396147, 0.056664165, -0.08714749, -0.009440242, 0.0083583305, -0.0084368475, -0.0076836483, -0.057369795, -0.052696493, -0.06801955, -0.036306597, -0.035794627, -0.03446736, 0.025813386, -0.005291892, -0.0032096058, -0.044244915, 0.061467692, -0.071401045, -0.06540748, -0.0036431681, 0.08048902, 0.0022395554, 0.006010241, -0.014331189, -0.04471014, -0.07859758, -0.036684114, -0.03311753, -0.046008825, -0.043686002, -0.089768514, 0.035601057, 0.064076476, -0.07967693, 0.03616132, 0.04409611, 0.05150663, 0.05717144, -0.00835415, 0.05947661, -0.051909573, -0.00156198, 0.064723514, 0.05933639, -0.022045437, -0.0009880592, 0.041643202, -0.09123007, 0.048880138, 0.081574135, 0.08084259, -0.031166375, 0.06105608, 0.014664917, -0.09058055, -0.04572982, -0.016468225, -0.08543973, 0.05642637, 0.06407567, -0.06202141},
   {-0.04819584, 0.011647018, 0.013809096, -0.022784103, -0.07499611, 0.022678645, 0.070887834, -0.04486441, -0.0009007743, 0.096122295, -0.016023725, 0.0039159115, -0.056520164, -0.044944573, -0.06408593, -0.06297345, 0.058718, 0.0031639785, -0.05694512, 0.07384567, 0.017680706, -0.064586334, 0.038947176, -0.01059927, 0.013106498, -0.062835135, 0.089432776, -0.015008809, 0.07907834, 0.0744792, 0.06888848, -0.012496509, 0.07476183, -0.08848332, 0.017662486, -0.08855559, -0.02150803, 0.014953518, 0.030603386, -0.0028425232, 0.012444059, -0.020996682, 0.042917464, 0.060384504, -0.015273191, 0.04997308, -0.08452001, 0.054299235, -0.052181024, 0.09093479, -0.048571236, -0.035560485, -0.03375957, 0.06630715, 0.082142405, 0.017525297, -0.011144392, 0.020559298, -0.051789675, -0.09648359, 0.078693956, -0.072174825, -0.017340181, -0.035606485},
   {-0.07041849, -0.0063572414, -0.06936941, -0.08195677, 0.06869625, -0.08071198, 0.075419925, 0.028619025, -0.07090719, -0.0062817573, -0.023154438, -0.067005225, -0.07317406, -0.020328479, 0.09150795, 0.08029961, -0.03498075, 0.062161542, 0.033263616, 0.06922627, 0.05848912, 0.055795796, -0.04702066, -0.08538399, 0.04974366, -0.028367797, 0.014160113, 0.034871265, 0.05355165, -0.0018045753, 0.0723182, 0.060116768, 0.04168851, -0.09375574, -0.049787864, -0.010233211, -0.016536668, 0.05783104, 0.032003637, 0.0014808774, 0.011181339, 0.05249069, 0.07087549, -0.049629387, 0.091430455, 0.004764125, -0.08776951, 0.020776935, -0.03072682, 0.013316845, 0.04199364, 0.020541139, 0.019480357, -0.090121046, -0.044364147, 0.041943993, 0.030709594, -0.09033949, 0.037175797, 0.0112728225, -0.044922963, 0.050262652, -0.081613414, -0.04928107},
   {0.023153432, -0.053984202, -0.015047963, -0.039356202, -0.092090406, -0.014566358, 0.03185423, -0.07352716, 0.04804919, -0.023933377, -0.005654305, -0.034202922, 0.05400058, 0.029552193, -0.0806331, -0.011442564, 0.061427653, -0.024582624, 0.0012580827, 0.030853355, -0.07433821, -0.03928596, -0.03600082, -0.011398874, -0.038608097, -0.038808897, 0.07351345, -0.017927095, 0.049280085, -0.06758918, 0.027300524, 0.08254082, 0.079366304, -0.009128007, -0.07811854, -0.08668491, 0.013354718, 0.025296425, -0.0064813243, -0.022256382, 0.03546154, -0.07921356, 0.073994644, -0.029825196, 0.060422514, -0.08688132, -0.0494701, -0.0093834875, 0.0826416, -0.08609684, -0.0948719, 0.023323216, 0.058704764, 0.08396647, 0.02081862, 0.038806595, 0.013777943, -0.038809292, 0.0064010173, -0.009206978, -0.02823665, -0.02696494, 0.080519974, -0.017494868},
   {-0.036338154, -0.040977485, -0.09271859, 0.06757186, -0.08061381, -0.012920349, -0.015833119, -0.043190613, 0.09517243, -0.031596005, -0.0010519698, -0.061687052, 0.0789948, -0.017152242, -0.004355043, 0.017614335, 0.040986832, 0.02108185, 0.092102714, -0.0151043385, -0.04020836, 0.09154197, -0.030046482, -0.041218124, -0.024156302, 0.025806561, 0.0021584763, 0.014887377, -0.044154763, -0.03657623, 0.057878762, 0.0060146586, 0.0648314, -0.073594205, 0.014886065, 0.07440444, -0.0718908, -0.018341163, -0.091346756, 0.05187752, 0.042571723, -0.04702303, -0.0775055, -0.008485839, -0.019040672, 0.04643319, -0.055765055, 0.07146668, -0.013294327, 0.05501815, 0.08241385, 0.004026495, -0.04784287, 0.058680616, -0.02190312, 0.019158266, -0.07749133, 0.030049173, 0.033092387, 0.081529275, 0.09054237, 0.07121163, -0.035190452, 0.013649821},
   {-0.029784402, 0.047156047, -0.022771263, 0.08272949, 0.053922042, -0.052100554, 0.0087306155, 0.02537915, 0.014578485, -0.08389181, 0.034786202, 0.084679395, 0.058853127, 0.07964601, 0.02278626, 0.059925146, 0.020718813, -0.06646964, 0.08450695, 0.030809741, 0.061184984, 0.028585875, -0.059907723, -0.016706958, 0.07637814, 0.08690791, -0.012290948, 0.049676146, -0.05439641, 0.018483236, -0.032341495, 0.04181907, 0.027139075, -0.008637675, -0.023794, 0.07908591, -0.07866216, -0.008537274, -0.030509029, 0.051011033, -0.0417023, -0.03353253, 0.021730848, -0.011837594, -0.04676212, 0.038814392, -0.054095045, -0.031292286, 0.068429455, 0.089527726, -0.07547276, 0.04035694, 0.02667471, -0.06953603, -0.023091584, -0.0013780498, -0.012592356, -0.026603138, 0.07707835, -0.009227736, -0.05882864, 0.04162862, 0.02582569, -0.0025666617},
   {-0.0020033387, 0.04895614, -0.07029792, -0.090247154, 0.07178823, 0.068028405, 0.06533677, -0.0152197005, 0.03282232, -0.047668748, -0.07099549, 0.0423094, -0.010796905, -0.07017354, 0.010619611, -0.025016032, 0.007689532, 0.06790311, -0.015252382, -0.036515, -0.0050879554, 0.04143872, 0.007390485, 0.02210407, -0.08414878, 0.07899762, -0.056927294, -0.0633405, -0.0036919862, -0.063519984, -0.035395842, -0.062250502, -0.03180589, 0.08379054, 0.019553823, 0.06426872, -0.032065604, -0.03436004, -0.03661123, 0.05916045, -0.09345819, -0.03535286, -0.0292224, 0.05325415, 0.023685263, 0.037896823, -0.024699276, 0.060304876, -0.079972155, -0.08765689, -0.09198439, -0.06637195, 0.06494232, -0.0631663, -0.07530543, 0.01552353, 0.05267591, 0.057108924, 0.078580044, 0.07229906, 0.05291695, 0.046799906, -0.044282615, 0.041584853},
   {-0.075648285, -0.047856238, -0.09806071, -0.045593422, 0.008686524, -0.042814415, 0.08344406, -0.009784433, -0.00017953172, 0.028329037, -0.009062462, -0.044918425, -0.027005538, 0.008585624, -0.04263631, -0.08496758, -0.08467675, -0.0149669275, 0.09231629, 0.06318338, 0.07288376, 0.0041625425, 0.049144164, -0.079380274, -0.0018132686, -0.053519536, 0.08571526, 0.058573652, 0.021101914, 0.027350686, 0.07853802, 0.07853259, 0.07025383, -0.014415958, -0.025582464, -0.021359561, -0.052596428, 0.072342254, 0.08964476, -0.05923369, 0.025600823, -0.0056784227, -0.068640605, -0.080054544, 0.051617015, 0.030203812, -0.017444013, -0.06916371, -0.07879858, -0.007093886, 0.02607974, -0.025630124, 0.027084852, 0.09246115, 0.023414724, -0.07000462, 0.043880954, 0.06661616, -0.08795012, -0.016925791, -0.059910063, -0.035365272, -0.0019793545, -0.07401816},
   {-0.08977332, 0.040479768, -0.08820184, 0.07973017, -0.007824379, 0.017765481, 0.034739923, -0.0480163, -0.05907597, -0.044728447, -0.054856826, -0.08999399, 0.07442018, 0.043620776, 0.078517996, -0.043625265, 0.013354005, -0.07289035, -0.058767892, -0.040067933, 0.024835395, 0.07669232, -0.056967005, 0.09237758, -0.062445763, 0.06564102, -0.030449029, -0.022136161, 0.04130853, 0.018579371, -0.012201998, -0.0075142253, 0.058991976, -0.04980428, -0.0951104, -0.050136548, 0.00072372507, 0.01201007, 0.029854972, 0.08837471, -0.044346143, -0.08312574, -0.07404479, 0.02955056, -0.0090281125, -0.0047230422, -0.098372884, -0.07570601, -0.014562681, 0.075699896, 0.016220614, -0.048165727, -0.05391241, 0.0049896017, 0.039361037, 0.033054672, -0.021264683, -0.057991397, -0.019809999, -0.09128263, 0.02888064, -0.076907456, -0.0747643, 0.07218925},
   {0.037169494, -0.008088294, 0.02033952, -0.08821098, 0.07600338, -0.01789609, -0.086106494, -0.025012651, -0.047124468, 0.06801391, 0.060725562, -0.07505169, -0.041812792, -0.031516984, 0.034827672, -0.061440147, 0.011168463, -0.086731575, -0.068016864, 0.04515, -0.036553465, 0.043527834, 0.08639039, -0.014919072, 0.0072245374, -0.04455351, 0.020748263, -0.030537745, -0.078187004, 0.038670532, -0.03052817, 0.088155046, -0.07063835, -0.015275535, -0.036428258, -0.08555053, -0.0856163, -0.025844686, -0.0067728106, -0.08566197, 0.05891373, -0.011543579, -0.0411484, -0.09104479, 0.07729622, -0.0021553088, 0.02902581, 0.08564929, -0.09391731, -0.06859269, 0.08218511, 0.07897944, 0.0139231095, -0.08426394, -0.04062079, 0.077607505, -0.010018395, 0.061072797, -0.009584397, -0.07342225, -0.08757935, -0.019703917, -0.051121894, -0.019216632},
   {0.061641853, 0.10299764, 0.009775869, 0.04442441, 0.044245634, -0.004276915, 0.00084852433, 0.053651575, 0.017744677, -0.0068099964, 0.09197321, -0.06516508, -0.0874894, -0.02262259, 0.0215531, -0.029609159, -0.091554, -0.054547478, 0.0052552074, -0.061494753, -0.08027319, 0.008282978, -0.018173076, 0.08880434, -0.058313344, 0.00035090023, -0.028318143, -0.044822622, -0.010903545, -0.08146803, 0.076143235, 0.060479354, -0.08637379, -0.08624953, 0.08478911, 0.070758134, -0.0653059, -0.059270483, -0.06209903, -0.042511404, 0.016706964, 0.0020547882, -0.04617852, -0.025241233, 0.078726515, 0.023475617, -0.02510587, -0.04869463, 0.07197592, -0.03597073, 0.08285102, -0.088149205, 0.06891403, -0.0507944, 0.036887445, -0.070617326, 0.043893997, 0.01681436, 0.083188616, 0.065850645, -0.01107568, -0.051445063, 0.035501465, -0.08567296},
   {0.04520564, -0.05724674, -0.029705642, -0.004725548, -0.07583119, 0.051839028, 0.04631803, -0.054512326, 0.044965737, 0.009546834, -0.08121666, 0.0071313027, 0.043302752, 0.03763257, -0.016530797, -0.050230436, -0.013300937, 0.050076805, 0.026007324, -0.08556225, 0.07188588, 0.049009666, -0.011368305, -0.05825377, 0.05348918, -0.0590685, -0.056977876, 0.048995756, -0.046222232, -0.0293509, -0.03195715, -0.08423266, 0.04369288, -0.060970638, -0.062137842, -0.038922504, -0.0007764867, 0.09105329, -0.040342145, 0.0069772378, 0.0462328, 0.033349, 0.045599442, 0.01807864, -0.057562936, -0.06786554, 0.08426362, -0.09603944, 0.07081864, -0.05781417, 0.008340007, 0.05443438, -0.020021752, -0.05599445, 0.07869487, -0.07096279, -0.07227609, -0.04209043, -0.08266228, -0.080112584, -0.0650061, -0.0904047, 0.022586953, 0.015813196},
   {-0.051274527, 0.0037857646, -0.064959064, -0.06832983, 0.008808035, 0.078709625, 0.019688524, -0.030470371, -0.07215252, -0.06337228, 0.006439507, -0.01114121, -0.0076769367, 0.0062855068, 0.06313778, -0.03186917, -0.008391793, -0.025754713, -0.04728935, -0.036556862, -0.035818797, -0.014748202, 0.060911894, -0.033739176, -0.0070446436, -0.0756867, 0.03411507, 0.049880378, -0.03639637, -0.048008095, 0.089915305, -0.015148863, -0.025732733, -0.048262075, 0.020739809, -0.06443719, -0.08531317, -0.030078012, -0.08829783, 0.04649996, -0.084076025, -0.028477184, -0.060015082, 0.025132865, -0.023662217, 0.01417774, 0.057061028, 0.017031915, -0.029280322, 0.007193827, 0.021560272, -0.077116236, -0.01270207, -0.077813804, -0.007797703, 0.04707246, -0.06829097, 0.07934599, -0.039408233, -0.043820787, -0.012808168, -0.03182696, 0.052179568, 0.043518174},
   {-0.09572296, -0.0003749696, -0.065542184, 0.0660028, 0.040295552, -0.026427995, 0.052927673, -0.050827365, -0.08906543, 0.0686566, -0.029320478, 0.087391004, -0.010728247, -0.04479999, -0.05008097, -0.046057746, -0.055425655, 0.006661862, -0.08013119, 0.023897748, -0.09240919, 0.050707173, -0.013968051, 0.07570339, -0.0477046, -0.0021821787, 0.055502642, -0.035158835, -0.08002729, 0.037656076, 0.008233021, 0.07900636, -0.06969084, -0.021934364, -0.033289045, 0.07873466, 0.045570944, 0.05107191, -0.07109196, 0.014996655, -0.017265338, -0.02869527, -0.04798169, 0.034340627, 0.018732538, 0.079885475, -0.057383277, 0.003796769, 0.057589896, 0.07733722, -0.06343523, -0.005476378, -0.092847936, 0.08001483, -0.07381107, -0.05349423, -0.042311862, 0.05589292, 0.003971137, -0.03028495, -0.024943843, -0.009138353, -0.060820423, -0.08375336},
   {0.039817873, -0.0027913034, 0.041056886, -0.021597989, -0.0076298234, 0.056481935, 0.02546203, 0.006805035, -0.016929397, -0.024490518, -0.010220379, -0.068720564, -0.047911268, 0.011504653, 0.045451082, -0.044398345, 0.004682634, 0.08965073, 0.0846244, 0.03662562, 0.03992483, 0.08547378, -0.048513457, 0.013779245, -0.03628758, -0.0018257772, -0.0054119285, -0.011781583, 0.042915262, 0.001845777, 0.08792615, 0.038102735, 0.036488883, -0.044930663, 0.059152458, 0.00694303, -0.00015142522, -0.026855951, -0.09702564, -0.06482719, -0.016682323, -0.009144492, -0.03628906, 0.09044174, -0.052735094, -0.022461565, 0.0017672356, -0.07731447, -0.06916295, -0.008109234, 0.07156306, 0.059180133, 0.042438753, -0.0022669956, 0.060070135, -0.04539647, -0.018134017, -0.05884237, -0.05808441, -0.012407395, 0.05134491, -0.03280584, -0.05392972, -0.027323488},
   {0.075818166, 0.0072799944, -0.07469181, -0.07219762, -0.070441514, 0.031316638, -0.06492474, -0.047999572, -0.07622491, 0.015731474, -0.072222084, 0.049154487, 0.082457505, 0.029787818, -0.07559273, 0.042719178, 0.049095344, -0.007360652, 0.05761198, 0.08708425, -0.0010788746, -0.00582507, -0.016859846, 0.06063684, 0.05542082, -0.07722599, -0.019744055, -0.082755014, 0.075932585, 0.07751555, -0.018445866, 0.06614517, 0.037316762, 0.045059282, 0.052254423, 0.006841209, 0.03869641, 0.076386355, -0.017292786, -0.03381231, 0.062920876, 0.08995666, -0.013208343, -0.014150225, -0.00014195337, 0.04924039, 0.024549888, 0.03018213, -0.04588649, -0.0349801, 0.029998505, 0.08965411, 0.0362251, 0.044900782, -0.08881455, -0.049864076, -0.040623154, 0.05336513, -0.086251915, 0.026136415, 0.022824436, 0.077380456, -0.058450922, -0.089161},
   {0.049689952, -0.034423675, -0.077528685, -0.015982093, 0.03974496, -0.08109127, -0.023452388, -0.03544166, -0.03643246, 0.060449827, 0.02112203, 0.021264236, 0.010248877, 0.09416162, 0.06459618, -0.08492805, -0.05313323, -0.088885546, 0.0005467832, 0.0034739552, -0.08800988, -0.071743764, -0.024566203, -0.011946149, 0.024706353, 0.07925211, 0.07653687, 0.0012613541, -0.086507775, 0.091236524, 0.0072118435, -0.019923449, -0.08019133, 0.05972707, 0.026941506, 0.017287675, 0.07490975, 0.03078296, -0.05308998, 0.049309023, 0.059505384, -0.07268121, 0.06914572, -0.022581615, 0.06372542, -0.014240264, 0.041653983, -0.010402625, 0.034961328, 0.017826073, 0.00817859, 0.086982004, 0.06142548, 0.046449296, -0.0472958, 0.024700098, -0.03396849, 0.03428586, 0.09022214, -0.0765358, -0.008570099, -0.06675943, -0.032900885, 0.027572898},
   {0.06801096, 0.03275345, -0.041404612, 0.00025735, 0.046941917, 0.03550784, -0.051281106, 0.026793003, -0.04003911, -0.03372148, 0.08196805, -0.016562838, -0.045978095, 0.014087395, -0.040914673, 0.031382717, -0.0011467673, 0.0265892, 0.05001024, 0.0682881, -0.019018093, -0.025768023, 0.07001177, -0.06150109, -0.05659377, 0.0026033055, -0.026217865, -0.010824519, 0.08785414, 0.0631521, 0.019068168, 0.07804127, 0.029466882, 0.0062752385, -0.05789186, -0.057162404, -0.00028258687, 0.0003812083, 0.015657457, -0.06330159, 0.025951551, 0.06918842, 0.033444323, 0.031013995, -0.05150586, -0.091069445, 0.02472617, -0.058997624, -0.066090494, 0.06323082, 0.05419281, -0.028690755, -0.07645514, -0.041886725, 0.08270673, -0.0676078, 0.039919812, -0.0065135546, 0.058537968, 0.034803234, -0.055982523, 0.08626162, -0.088230506, -0.047343265},
   {0.06461116, -0.05573718, 0.060047653, -0.06868985, -0.017613418, 0.05116909, 0.06960405, 0.064422935, -0.0486897, -0.07996601, -0.06536855, -0.055240344, -0.0006265268, 0.060154017, -0.082181506, -0.030621655, 0.0823159, -0.013759442, 0.03376446, 0.068341605, -0.08619575, -0.08052045, 0.07375675, 0.062460728, 0.03745472, -0.0702336, -0.0132848555, 0.08033731, -0.038946614, -0.060785677, -0.07563889, 0.06166842, -0.024725996, 0.024618534, -0.062078267, -0.049697656, -0.0424292, 0.052008666, 0.0070938426, 0.08011595, -0.026900696, 0.0828867, 0.0209548, 0.07584893, -0.05628936, -0.06250601, -0.059802707, -0.04972091, -0.07953511, 0.025029914, 0.033633437, -0.0692757, 0.06596254, -0.0059236437, -0.05676984, -0.028288266, -0.08019563, -0.06701618, -0.0044593215, -0.0704449, -0.027628317, -0.03816526, -0.04941238, 0.047264893},
   {-0.0040634596, -0.051520977, -0.060966734, -0.025536941, -0.009677231, 0.007523331, -0.07565164, 0.08644789, -0.05812118, -0.056002907, 0.037937455, -0.070451714, -0.09115577, 0.03979456, 0.059323467, -0.029842682, 0.033599015, 0.07737061, 0.06918455, 0.07739924, -0.032114193, -0.030231766, -0.091397665, -0.025369875, 0.06681002, -0.03944057, -0.044947077, -0.08415619, 0.06653661, -0.050336387, 0.046704154, 0.054771442, -0.07574992, 0.024535201, 0.07524626, 0.05682235, -0.048427466, 0.05343251, 0.015515735, 0.07262436, 0.06174436, 0.004069388, 0.009082636, -0.03290178, -0.07934089, -0.02962387, 0.012955873, 0.04905724, 0.05933005, -0.03142645, 0.017409654, 0.034364395, -0.07993816, 0.08015282, 0.08322937, -0.074972674, 0.08209633, -0.029398225, -0.0782026, -0.021832062, 0.051482342, 0.053637065, 0.086430304, -0.06197315},
   {0.07861294, 0.08897219, -0.08625467, 0.055003118, 0.011084976, -0.09482215, -0.033613794, -0.09349973, 0.004074671, 0.08170818, 0.08101829, 0.007547003, -0.031871926, 0.05048741, -0.036498893, -0.037030395, 0.05789367, 0.019722715, -0.02861353, -0.059771482, -0.09783287, -0.077015, -0.04268523, 0.00661394, -0.003582768, -0.021803014, -0.06413595, 0.0018961742, -0.070893124, 0.031958126, -0.052009117, -0.095680356, 0.04520639, 0.080178805, -0.02719843, -0.01791597, 0.026678557, 0.06466254, -0.021393387, 0.0072668716, 0.07798385, 0.0008444935, 0.083281405, -0.0637679, -0.004767528, 0.009217129, -0.05153317, 0.030648828, 0.0376266, -0.08097809, -0.08475296, 0.053038605, 0.062035725, 0.07433338, -0.08824636, -0.070610054, 0.0012295364, 0.06689128, 0.051246203, -0.017932305, -0.05109752, -0.016079769, -0.07501394, 0.050663695},
   {0.04128022, -0.017350709, 0.05344297, -0.0883472, -0.015901087, -0.01930273, -0.03396049, -0.084405825, -0.0015298257, -0.05556229, -0.052359555, 0.040057782, -0.07969055, -0.0810569, 0.012802146, -0.092237435, -0.008670856, 0.016377702, 0.09061848, -0.01379652, -0.028708827, 0.074944876, 0.05678279, 0.0506007, 0.02387976, 0.05230133, -0.010474111, -0.06530408, 0.027317092, -0.08246344, -0.032726016, 0.032291763, 0.08320048, 0.07686762, -0.02167478, 0.04162841, -0.00062142167, -0.009917297, 0.075769454, 0.008875996, 0.023370858, 0.092543535, 0.07858057, -0.072527155, 0.05969134, 0.07238468, 0.087401226, 0.011518418, 0.0528101, 0.05601271, 0.057515282, -0.09304783, 0.069162354, 0.037192725, -0.017053954, -0.03560563, 0.08447959, 0.07381299, -0.02294603, 0.03893765, -0.05616738, -0.0005299896, -0.014067345, -0.09665672},
   {-0.026306465, 0.055791583, 0.012247275, -0.08958859, -0.06006648, 0.05357779, -0.078940265, -0.048438743, -0.071127735, -0.07883781, -0.013096787, -0.064900406, 0.045499675, 0.0003965831, -0.03915424, -0.05335848, -0.046089873, -0.056329425, 0.091516025, 0.004006846, -0.012237368, 0.06589534, 0.0661004, -0.07675797, -0.04248883, -0.089062, 0.051391233, 0.0012070471, -0.0864552, -0.043018207, -0.06045528, -0.09301743, -0.048724506, 0.060782794, -0.0014599351, 0.080746114, 0.045070596, 0.09017753, -0.093934305, -0.048221618, 0.08401154, 0.020098612, 0.08178404, -0.089989446, -0.059707418, -0.042919222, -0.03187258, -0.060702566, 0.0074445307, 0.07284764, -0.07911338, 0.081303276, -0.056539513, 0.013962619, 0.061886452, -0.011521755, 0.08111214, -0.07606316, 0.024825983, 0.049497396, 0.049396206, -0.047870867, 0.071846634, -0.0053068944},
   {0.018913148, -0.06887376, -0.021939874, 0.07637778, 0.056999423, 0.07721059, -0.048568267, -0.025702702, 0.08398307, -0.003429195, 0.03443136, -0.027187757, -0.05784804, 5.3294152e-05, 0.052156426, 0.03435131, 0.0042559677, -0.0120765045, -0.080265865, -0.02310425, 0.050119344, 0.056062296, -0.060737938, -0.006163493, -0.038758703, 0.0105993515, -0.04552421, -0.051560137, -0.025522217, 0.026379772, 0.070506446, -0.0311816, 0.042863242, 0.08146081, -0.02129472, 0.00035443416, -0.037715472, -0.08971476, 0.074864164, -0.0448293, -0.07406746, -0.008431822, 0.06352022, -0.022087649, 0.015335553, 0.076018296, 0.020473776, -0.05930572, 0.030537175, -0.055164285, 0.02068264, -0.047718484, -0.07951152, 0.035144903, 0.07654495, -0.07415627, -0.09047113, -0.08584545, 0.04572869, 0.06384725, 0.031275034, -0.02093485, 0.021614267, 0.030728761},
   {0.013994235, -0.00041013196, -0.04784815, 0.032339644, -0.011800606, 0.039916504, -0.0701656, -0.0005546626, 0.07161469, -0.06543744, 0.09135825, -0.0340076, 0.023215748, -0.030430932, 0.035441972, -0.073953286, 0.08329932, -0.05761743, -0.054204445, -0.019173112, -0.05789508, 0.073671035, -0.058261547, -0.078966886, 0.0723074, -0.015967388, 0.07988504, 0.07150245, -0.08192424, -0.029799342, 0.05811164, -0.029684398, 0.07938645, -0.0953358, 0.04221621, 0.028707933, -0.09250508, 0.024021124, 0.029049, 0.029771797, 0.058472153, 0.0776907, -0.055077944, 0.08438208, -0.012581993, 0.06539785, -0.05477001, -0.06929244, -0.038276665, -0.061431397, -0.0074732997, -0.038160454, -0.010338758, 0.022007264, -0.02407629, 0.063705534, 0.010405574, -0.0835952, -0.033804677, 0.029261328, 0.026660651, -0.06345983, 0.079151355, 0.02742193},
   {-0.075760745, -0.03962059, -0.032172885, 0.04678909, 0.06468188, 0.052783385, 0.078987606, 0.03446446, 0.070004255, 0.026521951, 0.07379725, -0.06867789, 0.02911982, -0.085628286, 0.029838525, 0.08584779, 0.07949831, -0.089967415, 0.028962165, 0.053395025, -0.016580703, 0.02541919, -0.07278949, -0.07350724, -0.036033794, 0.019162888, 0.033225268, -0.045920804, -0.038512073, 0.021755785, 0.004195861, 0.04631413, 0.012604602, 0.044508528, 0.06553367, 0.027169796, 0.029875407, 0.029089475, -0.07808649, -0.069696605, 0.03544557, -0.052772515, -0.0048121884, 0.06772541, -0.07642184, -0.059308514, -0.04759891, 0.038537856, -0.024978543, 0.07111627, 0.05652953, -0.06148071, 0.0023269623, -0.08478953, -0.059974667, -0.024630258, -0.047255892, -0.059839033, 0.02929888, 0.08547511, 0.011001, 0.0034113824, -0.067184016, -0.06492503},
   {-0.021014415, -0.087527946, -0.09247399, -0.082223706, 0.0917718, 0.03437931, 0.005694112, 0.050371032, -0.07670921, 0.08043514, -0.0912752, 0.04608284, 0.061905973, -0.0641179, -0.07134951, -0.035276458, 0.025887921, -0.010219306, -0.06569994, 0.023223117, 0.06341922, -0.082663536, 0.068248175, 0.055516027, 0.02869104, 0.00418773, -0.05541575, 0.035286266, -0.070971906, 0.028685905, 0.06168013, -0.03695621, -0.0898701, 0.07035443, 0.071954645, -0.07081865, 0.069850706, 0.0040753116, 0.04662069, 0.041738145, 0.037205487, 0.06133478, 0.017107699, 0.0726028, 0.042893887, -0.037447136, -0.09610343, 0.07595089, -0.04119289, -0.0207883, -0.06752189, 0.044297732, 0.058244597, -0.054341454, -0.04200075, -0.044304088, 0.06094416, -0.01308253, -0.08390881, -0.072698176, -0.019603735, -0.048697874, 0.0038537607, 0.052231297},
   {-0.06949132, 0.084669955, -0.04678223, 0.049893927, 0.012612159, 0.03180961, 0.06955865, 0.0207161, -0.0768331, -0.030993639, -0.044514637, -0.005738908, -0.042617373, 0.014408382, 0.076409064, 0.0002123639, -0.02779311, -0.031921875, 0.02805575, -0.01639954, -0.037205577, 0.020642525, 0.004568637, -0.08448165, -0.09380153, 0.062723435, -0.058066625, -0.038321696, 0.03691014, 0.02939348, -0.08401132, -0.010816235, -0.0406209, 0.06849471, -0.0061310264, 0.05648798, 0.014588686, 0.04647996, 0.050646003, 0.082704, -0.08039593, 0.022239633, 0.05810177, -0.037325703, 0.09100796, 0.06289383, -0.07914448, -0.0833348, 0.08623797, 0.08006181, -0.0967889, 0.0046645924, -0.07410883, -0.0871327, 0.0063526705, 0.054780778, 0.067520946, 0.062974356, -0.019299433, 0.0025092114, -0.050506294, -0.060528304, 0.06780311, 0.07991255},
   {-0.079001576, -0.02458294, 0.02490955, -0.038592003, 0.04816579, 0.08369118, 0.01784696, 0.071937226, -0.003712602, 0.037611358, 0.04474131, -0.016620273, 0.02940654, -0.07889185, -0.065432444, -0.052268736, 0.0530803, 0.09182363, -0.055835437, 0.0543995, -0.032819066, 0.0031062523, -0.023011262, 0.08807077, -0.040634282, -0.082757205, -0.030654244, 0.052544426, -0.023894139, -0.07214163, 0.05283075, -0.040230963, 8.3878636e-05, -0.0028146326, -0.034188434, -0.06759868, 0.029304704, -0.06358794, 0.032534633, 0.073922135, -0.037697833, -0.055751227, -0.03535159, 0.092190675, -0.012944032, 0.03001285, 0.018983014, 0.07986085, -0.07584429, 0.04725157, -0.044548243, 0.06641675, -0.08601764, 0.07365473, -0.01745452, 0.038487125, -0.02307088, -0.0009474729, -0.06677407, -0.047484204, -0.027798545, 0.04977783, -0.038600672, 0.033636454},
   {-0.04915266, -0.046678655, 0.01384943, -0.019265208, -0.02952872, 0.082190275, -0.080694705, 0.04741506, -0.050697193, 0.06595771, 0.078451, 0.034559466, -0.028113462, -0.08053694, 0.08746917, -0.08186713, 0.00070165977, -0.057361793, 0.05208414, -0.01091127, 0.041368663, -0.00031628695, -0.026508147, 0.02463983, -0.090279356, -0.06871843, -0.021181628, 0.041693613, -0.076670416, 0.016046554, -0.04662387, -0.09122942, 0.019774243, 0.06760246, -0.08786846, -0.037965477, 0.03916308, 0.08151507, 0.022566512, 0.0003739372, -0.039134618, -0.08455297, -0.08038951, -0.006541632, 0.06400282, 0.047578167, -0.035905, -0.08428801, 0.011779479, 0.06271639, -0.0893296, 0.01965341, 0.047279447, -0.035217833, 0.09140142, 0.072022945, 0.014095121, -0.046703547, -0.015592635, -0.0074840398, 0.032247927, -0.08851097, -0.006620375, 0.05499639},
   {0.0012043366, 0.07262525, -0.009674735, 0.018915161, -0.08206944, 0.02041083, 0.043935895, -0.09096467, -0.03471866, 0.073690325, 0.0800916, 0.07012882, 0.004126884, -0.0262682, -0.02628915, 0.092057265, 0.046299275, -0.027331531, 0.084383436, -0.09047507, 0.037175186, 0.069923274, -0.049964253, -0.060541898, 0.03281135, -0.018783461, -0.06286922, -0.0069594197, 0.019144535, -0.05204774, 0.07321533, -0.016840635, -0.025626004, -0.013406298, 0.014336048, 0.027639475, -0.05084412, 0.026285414, -0.017806932, -0.05369593, -0.091737665, -0.043643933, -0.0028614064, 0.015001945, 0.029775934, -0.06677458, -0.007679326, -0.09543141, -0.054746017, 0.008798664, -0.03504924, -0.029894903, -0.05617511, -0.07223418, 0.07788714, 0.09360077, 0.059050694, 0.06490869, 0.0483732, 0.003666538, -0.033484768, 0.04895843, 0.053274978, -0.020694513},
   {0.07249801, -0.02304311, 0.027208073, -0.07763672, 0.0015157604, 0.0668294, -0.081907205, -0.01920837, -0.06250439, 0.012175731, 0.012071632, -0.029281273, -0.07150583, -0.057134613, 0.006274067, 0.049555607, 0.0043633617, -0.042180806, -0.06878236, -0.09559296, 0.067002505, 0.026232358, 0.04129776, -0.029751576, -0.09752886, 0.04337437, -0.056270815, 0.019127836, -0.08661415, -0.041711047, 0.024809483, -0.097025864, -0.06259987, 0.075210266, -0.07893547, -0.078228064, -0.039523926, 0.079423465, -0.01822882, -0.021307677, 0.019673025, -0.07468115, -0.030241046, -0.06188372, 0.05635269, -0.02291155, -0.07563834, -0.081696495, 0.08394567, -0.022310317, -0.0055089425, 0.08916616, -0.06326607, -0.0073746666, 0.060991593, -0.0195765, 0.07566605, 0.010683311, -0.0521627, -0.07966157, 0.0029750895, 0.027467228, 0.08480667, 0.038267124},
   {0.0021280905, -0.058050692, 0.0134508405, 0.08147155, -0.08255156, -0.050094213, -0.03131258, 0.012607117, -0.02573557, -0.036722776, -0.030546233, 0.010796037, 0.03835153, 0.06929601, -0.052053858, -0.07209565, -0.0052474192, 0.052420057, -0.07337157, -0.04372663, -0.07367118, -0.06470478, 0.05454149, 0.024515368, -0.05857132, 0.011474019, 0.06072347, 0.07353021, -0.0923334, -0.003620252, 0.01723264, 0.037439447, -0.06851061, -0.060350556, 0.022160966, -0.065452866, -0.060013466, -0.008234358, -0.051785193, -0.061842475, 0.06591428, -0.028551497, 0.04403489, 0.05631154, 0.039628103, 0.042354684, -0.0639785, 0.08259586, 0.08783581, -0.016588043, -0.061933614, 0.015786618, 0.025449358, -0.023925908, 0.006589465, 0.090766, -0.027581781, -0.07317302, -0.09237202, -0.08075143, -0.044462565, -0.012509242, 0.04929516, -0.075689144},
   {0.023809668, -0.021416185, -0.051804777, -0.05862853, 0.0846565, -0.067513324, 0.037911877, -0.027347544, 0.080077626, 0.025307387, -0.04901265, 0.0071939914, -0.04036709, 0.015515839, -0.008833006, 0.071678035, -0.08188033, 0.0592516, -0.031926814, 0.08827827, -0.033411477, -0.024985723, 0.06482936, 0.040585347, -0.055023298, 0.06600287, -0.021069892, 0.057136733, 0.0063678026, -0.012147322, 0.025316713, -0.06024369, -0.07278244, -0.077338904, -0.019842474, 0.008673497, 0.0073333047, -0.006900437, 0.08596955, 0.023426957, -0.036618765, -0.08593407, 0.048235513, 0.08630478, -0.055046584, 0.03626057, 0.034991037, -0.04276405, 0.0983937, -0.03868708, -0.008321737, -0.023652896, 0.029368466, -0.06261544, -0.041201394, -0.062936954, -0.077322945, -0.047782425, 0.022720873, 0.035110146, 0.0153097315, 0.067761876, 0.047381487, 0.052040193},
   {0.012087302, -0.073821545, -0.06738065, -0.024184054, 0.029723173, 0.012543777, -0.009941444, 0.03513653, -0.01517673, -0.053844772, -0.018495187, 0.07640679, -0.032917775, 0.06733738, -0.026316121, -0.075410336, 0.03525226, -0.037558336, 0.003371954, -0.07636162, 0.0005181807, -0.0669714, -0.03623119, -0.054418612, -0.015379424, -0.025478523, 0.08727183, 0.08658353, -0.07120932, -0.008158468, -0.015676966, -0.009744344, 0.07798267, -0.058730226, -0.019394737, -0.063288994, -0.088349715, 0.054526594, 0.0008902747, -0.05084052, -0.06825323, -0.07290968, 0.031382952, -0.01160863, -0.008419772, -0.050783273, -0.017593406, -0.028940024, 0.038155984, 0.05800385, -0.062670164, -0.057909425, -0.047382385, 0.033964165, 0.068258725, 0.030197935, 0.04238597, 0.007255521, -0.09143595, -0.019194927, -0.022551045, 0.0031560585, -0.02705557, -0.09563456},
   {0.043834876, 0.033975583, 0.029685285, 0.029161884, 0.03672626, -0.07395578, 0.029840667, -0.050645854, 0.0778977, -0.03219366, -0.05572428, -0.0658834, 0.005968325, 0.092444435, -0.027482241, 0.058121346, -0.098159805, 0.03197997, -0.036056165, 0.005213392, -0.020707104, -0.0045000277, 0.07481131, -0.0459172, -0.039171744, 0.0052660448, -0.04269788, 0.07898447, -0.08281973, 0.0808276, 0.05728746, 0.004341366, -0.069769464, -0.07238709, -0.0049980883, 0.089895666, -0.09184972, -0.011720794, -0.023242742, 0.022953816, -0.020490456, 0.0821142, 0.015609487, 0.073702894, -0.065031216, 9.15105e-05, -0.08382913, 0.057280038, -0.089379065, 0.09536858, 0.0844155, -0.034249008, 0.042052343, 0.09113232, -0.010606326, -0.06753257, 0.046666477, -0.029891113, 0.032602467, 0.014614447, 0.077448055, 0.021905676, 0.037961785, -0.039322},
   {0.054215666, 0.006798802, 0.060117535, -0.02259529, -0.0225449, -0.03869835, -0.006766736, -0.01768115, 0.08392805, 0.05744974, 0.007241018, -0.07599748, -0.05256756, 0.075403094, -0.008219607, 0.025027178, -0.02138181, 0.03308197, -0.011932798, -0.019499144, -0.0013015008, 0.035838954, 0.06950792, -0.018430911, 0.016767215, 0.09400781, -0.034184888, 0.0028113436, -0.030928466, 0.06854827, -0.0022849783, -0.087704055, 0.09133843, -0.057173092, -0.08826544, 0.0685062, -0.044339344, -0.0682004, 0.079077415, 0.045583405, 0.03510375, -0.0073139295, 0.06664736, -0.0886276, -0.038681015, 0.027059333, -0.029411905, -0.03606336, -0.080813445, -0.06822208, 0.056975488, 0.02076812, 0.04854577, -0.084749855, -0.08833781, -0.017073374, 0.090881586, 0.07148076, -0.023361929, 0.047658507, -0.024189422, -0.038767245, -0.003194527, -0.013328104},
   {0.06779114, -0.053802785, 0.036026146, -0.08666057, -0.06696021, 0.019177996, 0.0032448685, 0.02873959, 0.086477466, 0.079359114, -0.031387415, 0.052351054, -0.08940628, 0.07976483, 0.0018806905, 0.07710763, -0.088531904, -0.030869063, -0.01867409, 0.027678333, 0.058781497, 0.038860552, -0.03114313, -0.05137527, 0.08584937, 0.0910374, -0.07699929, -0.018186439, 0.0057133287, -0.012025975, 0.004690606, -0.024825763, -0.07664496, -0.06807122, -0.05603777, 0.040680088, -0.09591093, -0.03506772, 0.015156139, 0.039857276, 0.024799433, 0.078748874, -0.026851932, -0.0218703, -0.07092853, 0.07881332, -0.038349986, 0.048165172, 0.030398617, -0.06330078, -0.039109316, 0.06355695, -0.0809141, -0.061775148, -0.04824233, 0.057312004, 0.04531007, 0.016690811, 0.06536866, -0.06232801, 0.019789713, 0.07566977, -0.02508579, 0.015642324},
   {0.086861044, 0.07931699, -0.07371055, -0.009379543, 0.03267818, -0.08066565, -0.06749668, 0.08174487, -0.020186905, 0.011703435, 0.07319727, 0.023880927, 0.010509543, 0.041111145, -0.0795525, 0.08561028, 0.05449679, 0.06317366, 0.06224487, -0.057175543, -0.011707384, 0.0556315, 0.037710726, -0.04345455, 0.006900482, 0.07255083, -0.048746478, -0.009857849, 0.04610022, 0.048999526, -0.062248297, 0.05802564, 0.026534513, 0.0075724605, -0.017081188, -0.030494582, -0.007681491, 0.07118472, -0.029059602, -0.05773633, -0.08538253, 0.02842383, 0.055742957, 0.07510444, -0.03791425, 0.037308242, -0.09633617, -0.02313962, 0.039638195, -0.0642697, -0.040249657, 0.08505445, -0.06141916, -0.0054851472, 0.017682374, -0.068416625, -0.0716008, -0.07589729, -0.015495762, 0.08052137, 0.05516839, 0.08935317, -0.07935665, 0.08257271},
   {0.07695275, 0.038703427, 0.050541263, 0.06456966, -0.07296062, -0.044459395, 0.052408032, -0.06599851, -0.008608031, 0.064109154, -0.007890798, -0.0355282, -0.057541627, 0.056448407, 0.074908994, 0.010387972, -0.030692123, 0.055361427, 0.07770253, 0.07432911, -0.021612406, -0.07391536, 0.032687493, -0.0075583532, 0.007548569, 0.09085989, 0.08819555, -0.08514344, 0.013694502, 0.0066682026, 0.057445556, -0.005391508, 0.08608214, 0.075087056, 0.049822506, 0.0710071, 0.036948558, 0.016249232, 0.004382548, -0.0016189963, -0.075141326, 0.04618635, 0.004096135, 0.091480516, -0.06928834, 0.04893827, 0.05232038, 0.083567776, 0.08801233, -0.045057062, -0.08073341, 0.020541184, -0.012080519, 0.089556076, -0.028545313, -0.061355297, 0.08606715, -0.046629272, -0.08794362, -0.00297852, -0.014514517, -0.05069666, -0.06539588, -0.06048882},
   {-0.055343736, -0.045382313, 0.021149335, -0.029751569, 0.0758283, 0.07466595, -0.049946174, 0.076190256, 0.031115014, 0.038872525, -0.059040684, 0.061587214, 0.049379803, -0.06582421, -0.04378312, -0.056085467, 0.023125194, 0.07304805, 0.054513462, 0.034708362, -0.025399063, 0.04010208, 0.02470141, 0.063196845, 0.024803285, -0.013767215, -0.058693856, 0.01740182, 0.043922864, -0.015797168, 0.08286787, 0.06795605, -0.0691769, 0.07674764, -0.022825386, -0.012823618, 0.013502223, -0.08421121, -0.029940272, -0.044078674, 0.019378245, -0.0003517568, 0.073790416, 0.00522317, -0.004772608, -0.07229084, 0.007294617, 0.06683917, 0.069882005, 0.014394511, -0.023331728, 0.08674895, -0.022855032, -0.053490594, -0.040227387, 0.028594697, -0.074051864, -0.019212933, 0.082531385, 0.062448103, 0.059683446, 0.0740627, 0.08803265, 0.051347513},
   {0.027344177, -0.027309073, 0.05657077, -0.016868146, 0.09051291, -0.02967777, -0.041716833, -0.022023268, 0.0124939885, -0.075720474, 0.05591709, -0.08468653, 0.052324675, 0.0073301005, 0.030439772, 0.059032924, 0.003666219, 0.06844177, 0.014780372, -0.011135207, 0.00755504, 0.008740486, 0.060829602, -0.02765692, -0.025124196, -0.05752081, -0.06925552, -0.09267032, -0.03727633, -0.081906155, -0.07621573, 0.06865013, 0.03413681, 0.011288536, -0.00758427, -0.026784541, 0.012453102, -0.048611708, 0.015346937, -0.08462173, 0.005969544, 0.02960509, 0.06067265, -0.03975033, 0.034990344, -0.08064985, -0.08483167, 0.005170088, -0.041490927, 0.06235099, 0.081871085, -0.032274183, -0.03164563, 0.05775658, -0.018669479, 0.0801331, -0.04484498, 0.059226178, -0.03391868, 0.018498134, -0.06722683, -0.09301207, -0.06874185, 0.008168971},
   {-0.011371999, 0.01028095, 0.029456086, 0.03920782, -0.018770939, -0.09438229, 0.039509512, 0.013588728, -0.065279454, -0.084992684, -0.061131068, -0.07307709, -0.080556095, 0.014910052, 0.045286246, -0.046014607, 0.06931505, 0.033947535, -0.051012505, 0.08278016, 0.064862795, -0.087523125, 0.06899082, 0.06315597, -0.06906823, -0.054157127, 0.07950081, 0.09370488, -0.033716552, 0.07687103, -0.07942587, -0.06443585, -0.08984452, 0.002296722, 0.084337026, 0.026754666, 0.016346235, -0.09074128, -0.02923546, -0.088229984, 0.0825003, -0.012576923, -0.039273493, -0.06882888, 0.027876493, 0.07238843, 0.06575415, 0.058571257, 0.07191747, -0.08419748, -0.04788644, -0.08260062, 0.08629162, -0.0851739, -0.010567233, 0.048509065, 0.032044686, 0.047929384, 4.527718e-05, 0.022613041, 0.002080888, -0.0336812, 0.08889354, -0.037701022},
   {-0.08565852, 0.0059485766, -0.09827639, 0.07333924, 0.044298835, 0.02388878, 0.058780562, -0.07164659, -0.07880749, -0.083136104, 0.022864021, 0.018128686, -0.0049376264, 0.09235452, -0.071064815, -0.08394419, 0.027869198, -0.08022112, 0.047116138, 0.004491005, 0.016085384, -0.02342115, -0.08387535, 0.08524943, -0.011610111, 0.01909254, -0.060198694, -0.05746258, -0.009682044, 0.01596699, 0.0038659193, 0.00046853133, -0.059891544, -0.045223642, -0.061040796, 0.051081542, 0.005654247, 0.033763964, -0.07258377, -0.04652924, -0.06839571, 0.068803675, 0.016189372, 0.01473739, -0.0315247, 0.039854523, -0.090990014, -0.043198932, 0.07475764, 0.036823068, -0.020034676, 0.062036015, 0.07088986, -0.002312608, 0.051425435, 0.028548773, -0.0029213456, 0.07721077, 0.023856252, -0.051420007, -0.05017556, 0.008381404, -0.048179198, -0.010208052},
   {0.08175883, -0.047416296, -0.098187834, -0.07949341, -0.07862063, 0.07877454, 0.035262655, 0.03969, -0.054775767, 0.08130806, -0.01854702, -0.037551094, -0.0012098402, -0.08834111, -0.046118774, -0.05055313, -0.08193679, -0.088988446, -0.012965426, 0.047886755, -0.047723718, 0.010882683, -0.08039274, -0.038896266, -0.015258515, 0.055067867, 0.0784125, -0.00048207596, 0.046896435, -0.025701277, -0.023251176, -0.023534402, 0.066835366, 0.07316631, -0.0776108, -0.02447586, -0.025945436, -0.012343246, 0.019353645, -0.0632081, -0.097991355, 0.067781426, -0.033623993, 0.08966962, -0.04622276, -0.097294495, 0.015965383, -0.067171335, 0.00307865, -0.016730975, -0.08870102, -0.04327763, -0.0031568655, 0.039865024, 0.008088633, -0.019051231, -0.053738825, 0.09071457, -0.01495634, 0.086052775, -0.03934889, -0.04797679, -0.04410546, -0.061485745},
   {-0.07651482, 0.043899894, -0.04090982, -0.03465044, -0.029165493, -0.030214474, 0.061550565, -0.070541814, -0.0036327788, -0.0021916481, -0.05632144, -0.088461235, 0.04306271, 0.04897363, -0.011811204, 0.06691984, 0.05248564, 0.07858447, -0.0054434314, -0.0852751, 0.032356013, -0.052563664, 0.077722274, -0.032085627, -0.015041474, 0.061636437, 0.003975953, 0.010076823, -0.07207152, -0.048236366, -0.079768695, 0.04284054, -0.076714486, -0.0005603135, 0.08472857, -0.0869863, -0.024216373, -0.063210964, -0.069865145, 0.06272552, -0.017241508, -0.06254397, -0.03070411, 0.0067411363, -0.0060193883, 0.022929965, -0.04671786, -0.07737144, -0.086642265, 0.04876897, -0.010754474, 0.025225684, -0.07568882, -0.047776863, -0.027537622, 0.015295002, 0.056504756, 0.0061385403, -0.07965847, 0.024055367, 0.06144949, 0.0022420958, -0.0024055163, -0.084165454},
   {-0.017824981, -0.0018613293, -0.043437775, -0.008264418, -0.074351154, 0.008233948, 0.074961066, -0.080605604, -0.0741176, -0.07196815, 0.07404973, 0.069074, -0.08135997, 0.09555569, -0.017808206, -0.02716384, 0.07324424, -0.050808683, -0.061601073, -0.04113816, 0.008037211, 0.003592716, 0.031703856, -0.04962756, 0.08240117, 0.09342971, 0.039478954, -0.015434303, 0.039675616, 0.029354453, 0.02805177, 0.027587777, -0.064027414, 0.06148256, 0.029821565, -0.03305836, 0.054670252, 0.020197682, 0.05692849, 0.013237335, 0.024091844, -0.002022393, -0.030629935, -0.06159854, -0.0095918905, 0.013400859, -0.07051201, -0.015196102, 0.0036788506, -0.040998418, -0.070285164, -0.0880882, -0.09209679, 0.025684744, 0.06340928, 0.086175285, 0.04600337, -0.037075777, 0.046974234, 0.07154663, 0.0121143805, 0.050638296, 0.0747019, 0.07359516},
   {-0.024310395, -0.017530443, 0.02515388, 0.013652359, 0.07866741, -0.061944775, -0.00056986435, -0.046401843, -0.062595725, -0.032700323, -0.02089385, 0.012983829, 0.047458686, 0.070777185, -0.013208695, 0.033355094, 0.032248285, 0.039348938, -0.05185433, -0.08678575, 0.020961115, 0.095394306, 0.07847219, 0.07973721, 0.078726806, -0.05920999, 0.042204455, -0.018672608, -0.036288176, -0.04850284, -0.06554507, -0.033001408, -0.07327216, 0.03186994, -0.042102344, -0.013604032, -0.09508049, 0.050237082, -0.008836829, -0.090171084, -0.05157794, 0.08777901, -0.025781596, 0.037486278, 0.043571193, 0.013173788, -0.061699577, -0.04480221, -0.017192977, 0.056082934, -0.06245876, -0.043843836, -0.085814744, -0.09126214, 0.021124452, -0.058783222, 0.04172599, 0.07129935, 0.044940107, -0.051362935, -0.025839906, -0.03687403, -0.027810253, 0.009657838},
   {0.050416045, 0.09706717, -0.08485551, -0.05278141, -0.04275981, -0.0442087, 0.009648171, 0.007425996, -0.050290104, -0.088812344, 0.016344972, -0.064811945, -0.055803087, -0.043885484, -0.08205286, -0.069890276, -0.056070272, -0.033575337, -0.08308867, 0.04185968, -0.06898395, 0.02314429, 0.00621301, -0.026878834, 0.042112198, 0.06457648, -0.02490784, 0.09132805, -0.0897557, -0.0758131, -0.049292095, 0.030695327, -0.031685814, 0.030998021, 0.043403786, 0.07379454, -0.06216498, -0.014853368, 0.08882866, -0.08778704, -0.0013272021, -0.0130784735, -0.030029299, -0.04924606, 0.040400214, -0.054308347, -0.035631448, -0.052868363, 0.01210559, 0.030798854, -0.09078888, -0.062181056, 0.060779717, 0.082481705, -0.09265979, 0.018807579, -0.0029825435, 0.08014573, 0.042390995, -0.04243371, 0.09721403, -0.06917887, -0.07200184, 0.06606325},
   {0.052926645, -0.014966849, 0.07707401, -0.022106376, -0.0013617225, 0.0047709076, 0.017551502, -0.027439237, -0.017303804, 0.048774827, -0.019914009, -0.07896807, -0.0872635, 0.014778819, -0.052639555, 0.02577743, -0.0348508, 0.054016806, 0.012603529, -0.050317675, 0.016583141, -0.033551656, 0.08389001, -0.05276348, -0.04377057, 0.020080965, -0.0857564, -0.023854388, 0.025961608, -0.06464028, -0.033743102, -0.011290494, 0.032478057, 0.03302617, -0.021437611, -0.006558696, 0.038796898, -0.03515368, -0.049109943, 0.0708516, -0.095964685, -0.07834379, 0.034966573, 0.08843712, -0.07794029, -0.043268595, -0.041292354, 0.07869814, -0.047259405, -0.060391847, -0.048667554, 0.039053746, 0.009153583, 0.058597423, -0.057136323, -0.043138172, -0.034043416, -0.03126058, -0.079124235, 0.07720907, -0.0013249002, 0.08714252, -0.09636249, -0.07765931},
   {0.046789687, -0.04082062, -0.014961728, 0.070439026, -0.023349162, 0.0025516152, -0.09513179, 0.081789605, 0.0816433, 0.010712587, -0.08610114, -0.054719534, 0.019797452, -0.077599324, 0.020292908, -0.00018206239, 0.072654314, -0.043806393, -0.06777077, -0.09464252, 0.009004072, -0.020137042, -0.007929819, 0.06982484, -0.050306488, -0.029161168, -0.06882943, -0.03206908, 0.04740318, 0.03529858, -0.08499016, 0.05238105, -0.060185473, -0.02878112, 0.08036709, -0.021642104, 0.016589722, 0.033415217, -0.07813093, 0.04084275, -0.098544724, 0.07457925, -0.07034782, -0.07874333, -0.087065466, 0.024206374, 0.07879075, 0.002959912, 0.058776498, 0.09071076, -0.01637705, 0.021464795, -0.0075468863, 0.011863962, -0.025671326, 0.032099262, 0.010943198, 0.080169156, 0.05562923, 0.05213885, -0.055821195, 0.0003322214, 0.077825524, -0.06677929},
   {-0.02350116, 0.07131873, 0.019356355, -0.020987649, 0.05204026, 0.025976159, 0.032285824, 0.04201735, -0.001623023, 0.00074791204, -0.0059159696, 0.047633886, -0.053981226, 0.046361167, -0.029877432, 0.0537147, 0.022291712, -0.072586656, -0.053246524, 0.0759936, -0.03585235, 0.002231812, -0.09112923, -0.01809375, -0.08039516, 0.039435893, -0.075466044, -0.08423157, -0.023403913, 0.0033925176, 0.038863845, 0.06188619, 0.0054845884, -0.03932592, 0.050861154, -0.09202835, 0.054516573, 0.011924528, 0.06231895, -0.0538126, -0.029456984, 0.015557744, 0.029067181, -0.06296919, 0.048405282, -0.0034685407, -0.07882068, 0.0014406154, -0.04317935, 0.058157433, 0.06738313, 0.03143087, -0.048651464, -0.050637122, 0.057450987, 0.05038962, 0.08700153, -0.08932785, -0.03934805, -0.0014882224, -0.08078646, -0.025015168, 0.031807512, -0.043519482},
   {0.017585473, -0.059342578, -0.030598849, 0.037893068, 0.016248576, 0.057037283, -0.0133492965, 0.05914532, 0.03965167, 0.07460667, 0.053755872, -0.071087696, 0.018323354, 0.066127986, 0.08537003, -0.064672366, -0.08322546, 0.045110397, 0.030648537, -0.071021214, -0.09546186, 0.09288922, -0.011525572, -0.037483867, 0.013702607, 0.030513601, 0.04123935, 0.037578516, 0.072856925, -0.070100665, 0.057156943, 0.028449623, -0.063709706, 0.033606973, -0.09292338, -0.061317995, -0.026452258, -0.07575656, 0.023770778, -0.06631577, 0.08605069, -0.05031207, -0.026432857, -0.046562437, -0.05458248, -0.07207838, 0.048654396, 0.06415828, 0.000526887, 0.045199998, -0.06832072, 0.000117741525, -0.027845068, 0.07917883, -0.013020314, -0.04392143, -0.03868386, 0.015017251, -0.0755936, -0.006214282, 0.095028155, -0.0454882, -0.014601352, 0.07652905},
   {-0.0390947, 0.06295027, -0.08698689, -0.08085449, 0.030753188, 0.031096106, 0.03196691, -0.039740093, 0.052337017, 0.0887045, -0.022810332, -0.044630073, -0.028237365, -0.04914767, -0.059946164, -0.05959982, -0.057367664, -0.056305178, -0.0016993806, 0.010145596, 0.014677971, 0.031194655, 0.05462756, -0.08967115, -0.043251812, -0.0099, -0.08373412, 0.0042328495, -0.028096355, -0.0069886073, -0.08430369, -0.00092394004, -0.07405162, -0.09485337, 0.041341603, -0.042588077, 0.003159083, -0.044693496, -0.06679916, 0.058293633, 0.054128397, -0.011569545, -0.06743938, 0.007762775, 0.0049580317, -0.084711835, 0.010629539, -0.04795375, -0.015773831, -0.05362925, -0.050294925, -0.0637906, 0.048826125, -0.040624283, 0.0011184663, 0.077352345, 0.0019214456, -0.07749598, -0.017820068, -0.06630876, 0.058928974, -0.016275667, 0.028489573, -0.09323634},
   {0.020664208, -0.067007296, -0.08809823, 0.044642586, 0.08743767, 0.058191996, 0.022515608, -0.074668914, 0.004999676, -0.048291437, -0.08376215, 0.057293694, -0.049215738, -0.06580144, 0.058361612, -0.0007091388, 0.051323917, -0.015598752, -0.089239724, -0.07309188, -0.07913117, 0.09040778, 0.050676968, -0.007663794, -0.011384676, -0.011109367, 0.08312624, 0.029544203, -0.04328755, 0.09035935, -0.06449497, 0.0083317505, 0.0684615, -0.015275312, 0.07217304, -0.07356474, -0.083421044, 0.08642953, -0.027435988, 0.0037916154, 0.060990863, 0.04325021, 0.049917474, -0.06723713, -0.01189494, 0.024338996, 0.029239714, 0.024407301, 0.024054991, -0.065715946, 0.076750055, 0.08001656, -0.004602527, -0.0586144, 0.0928533, 0.061150797, 0.010285648, -0.052573238, -0.08910623, -0.07685972, -0.0857353, -0.025543973, -0.08132165, -0.04673703},
   {0.08564569, -0.051107932, -0.079795234, -0.06528246, -0.07727139, 0.060620453, -0.07358475, 0.00096548634, -0.038903646, 0.050226975, -0.017018601, 0.025926325, 0.0044083074, -0.03189326, -0.087292984, 0.019219317, -0.06814893, -0.077599525, 0.0512752, 0.021772018, -0.05714815, -0.070416324, 0.027856708, -0.042778987, 0.027235694, 0.010544421, 0.039187245, -0.013343248, -0.032492023, -0.029423513, -0.015507395, 0.074887685, 0.016109668, -0.008175461, -0.041049767, 0.067619525, -0.05088883, 0.0059132497, 0.05407484, 0.06941048, -0.05293821, 0.008858353, 0.03951243, -0.03144475, -0.0509801, 0.06988921, 0.08242896, 0.028220221, 0.091538206, 0.032829367, 0.06621835, 0.04647068, 0.053321183, -0.028338976, -0.029200941, 0.003988478, -0.08958912, -0.03914376, -0.09162753, -0.08782826, 0.08522895, -0.015089072, -0.087770306, 0.039642412},
   {-0.038202062, 0.028476613, -0.04183561, -0.066750705, 0.010765926, 0.08892931, 0.037376765, -0.06427584, -0.08435259, -0.08236804, 0.056997053, 0.0005522065, 0.07827745, 0.026823768, -0.005406007, -0.06666213, 0.04948282, 0.08241505, -0.024891019, -0.07208717, 0.07115852, -0.00047887224, 0.07002395, 0.06776748, 0.03129725, 0.08427123, 0.08860911, 0.02035943, 0.029173195, -0.0035664588, -0.002321069, 0.0508013, 0.073037036, -0.040738456, 0.063522995, -0.099600084, -0.049737412, -0.013370777, 0.018825244, -0.015656017, 0.010302841, 0.003848374, -0.053334318, 0.05498039, -0.085784, -0.06879301, -0.028040178, -0.05023608, 0.009893829, 0.037678707, 0.07657794, 0.08104455, -0.003210704, -0.059342247, -0.07296904, 0.082108, 0.01715895, 0.01717798, -0.07119107, 0.009241524, 0.028654292, 0.018638887, 0.047828875, 0.010163336},
   {0.067339756, 0.005037119, -0.021643726, 0.06971852, -0.06720373, 0.024897853, 0.052244034, -0.09012406, 0.088868305, 0.046656583, -0.02463729, 0.042035263, 0.04250864, -0.03480709, 0.07543828, -0.011313677, 0.022219295, -0.005660668, 0.061261274, -0.0571531, 0.0633468, -0.044781025, -0.06965632, -0.045477543, 0.065806, 0.002043239, -0.033931635, 0.012116627, 0.034977637, -0.028929107, -0.0602962, -0.08112695, 0.04284071, -0.022967367, 0.018210884, 0.051329236, 0.07261398, 0.073914826, -0.029463785, 0.028108813, -0.08953341, 0.00032503158, 0.053840835, -0.043923955, 0.09924581, 0.024035012, -0.039507154, -0.06132446, -0.029944595, 0.016862517, -0.07076653, 0.011884227, -0.052300025, 0.033366464, 0.010389753, -0.08278215, 0.063226596, 0.08447745, 0.00018724799, 0.045176454, 0.072429635, 0.077140726, -0.02965954, -0.052230053},
   {-0.0901735, -0.072975464, -0.043086987, 0.06856988, 0.04252528, -0.073642455, 0.060578942, 0.08586785, 0.010105294, 0.002341788, 0.059720345, 0.06784331, 0.0059092715, 0.0132067595, -0.0037058443, 0.0580839, 0.078489184, -0.06644943, -0.027736127, 0.025559252, 0.0059882835, 0.0150344055, 0.0482408, 0.038198076, -0.079326116, -0.01897249, -0.051315453, 0.024426863, 0.023201734, 0.065199085, -0.013673413, -0.0054284967, 0.057479896, -0.029941717, -0.069281414, -0.026917618, 0.037263773, -0.033595204, 0.019984743, -0.08819915, 0.07253913, -0.068167046, -0.071398385, -0.07652553, -0.07312867, 0.07431843, 0.03716232, -0.07745168, -0.032697085, 0.07213241, -0.0072071753, 0.04293949, -0.029837877, 0.03035225, -0.069173954, 0.029376809, -0.050858412, 0.03927864, -0.04927512, -0.008206247, -0.012029614, -0.016525857, -0.09047295, -0.0006717966},
   {0.078857005, -0.08378639, -0.03806311, -0.068082415, -0.045837443, 0.051576763, 0.044958387, 0.0609579, 0.018204428, -0.053142466, -0.03933032, 0.043661673, -0.06526843, -0.079093896, -0.03736673, 0.0014421865, 0.016247895, -0.0061432645, -0.06876446, -0.035994872, -0.0875198, 0.051292244, -0.060215153, -0.056596324, -0.09103194, -0.057313044, -0.07466976, 0.07697221, -0.012623154, -0.05241738, -0.06786326, 0.06316787, -0.016378544, 0.039880678, -0.036033403, 0.03827564, 0.026505485, -0.046403565, -0.04298502, -0.021524645, -0.050243646, 0.057347156, -0.07448939, -0.003911443, -0.0088826995, -0.033565998, -0.07069774, -0.048857544, 0.07945434, -0.027012514, 0.0005420024, -0.075996414, 0.07656681, -0.023071736, 0.0799069, 0.09836155, 0.097684674, -0.01869456, -0.031384457, -0.037526835, 0.04639677, -0.08699883, -0.07750338, -0.029744906},
   {-0.08475926, -0.06056385, 0.029915716, 0.0034844133, 0.041510727, -0.04511193, 0.072433785, -0.024714118, 0.010593215, 0.037170324, 0.06456848, 0.0030401968, 0.008075215, -0.011444251, 0.045699455, 0.07517818, 0.025124466, 0.08833381, -0.0072157457, -0.09685966, 0.07127193, -0.04272734, 0.017248122, -0.08616913, 0.08150917, -0.069698654, 0.07319242, 0.07725029, 0.009368204, 0.009347446, -0.048922203, 0.008146424, -0.09194209, -0.014646633, -0.008486942, 0.037038747, 0.07753345, -0.09273421, -0.016050821, -0.070255935, -0.045872383, 0.07519383, 0.0105693545, 0.0048327446, -0.08414804, -0.01986362, -0.016025377, -0.039975185, -0.046186544, 0.025497291, 0.016822606, -0.09150458, 0.018117854, -0.02498769, -0.03580865, 0.035752058, 0.06285106, -0.09214164, 0.04982149, 0.021076385, -0.082469836, -0.06826943, -0.003800116, 0.06346427},
   {-0.08384309, -0.07177941, 0.0335048, -0.080404885, -0.042287756, -0.0130713545, 0.048671063, 0.06449121, 0.0126407435, 0.07137004, -0.040165003, 0.06189733, -0.07360384, -0.058485743, -0.07220117, -0.08581052, 0.083613575, -0.012794733, 0.03921791, 0.08099595, 0.069426976, 0.061421253, -0.05602776, 0.07754592, -0.007913616, -0.043200314, -0.0065491544, 0.048316, 0.028114885, 0.010795772, 0.07303446, -0.09889097, 0.081842415, 0.02194575, 0.0676606, -0.0243416, 0.04040703, -0.04265879, -0.051276978, 0.018428639, -0.036336232, -0.033088, -0.05841818, -0.061309725, -0.037231326, -0.027533397, -0.0808466, 0.07349318, 0.04786486, -0.020073095, 0.0083731385, -0.03137618, -0.07117231, 0.03863024, 0.034137093, -0.05992325, 0.0962105, -0.01116538, -0.08100207, -0.050600763, -0.026223058, -0.061764937, -0.046923097, -0.087181136},
   {-0.047491234, 0.005363169, -0.029926969, -0.0844542, 0.08663534, -0.012405247, 0.07208187, 0.06507845, 0.048011415, -0.001219755, -0.029345065, -0.037896417, -0.07370091, 0.08123578, 0.022164166, 0.037650697, 0.06966935, 0.089844696, 0.08389161, 0.010863362, -0.02748486, -0.08611421, -0.005760281, -0.07647656, -0.072545506, 0.07061723, 0.07376712, -0.0131385615, 0.04336276, -0.09276821, 0.011310607, -0.03884572, -0.07092124, -0.08112361, 0.07154236, -0.07345084, 0.00771232, 0.014969585, 0.037473504, 0.0780578, 0.051729508, 0.052034013, 0.019556817, -0.08687602, -0.07244571, 0.037212502, -0.09784326, -0.053219654, 0.06928572, 0.023520626, 0.048187416, 0.020198375, 0.075915255, -0.07000408, 0.045569457, -0.06680536, -0.084549256, 0.07749968, 0.026446544, -0.08201733, 0.020250661, -0.023601346, 0.087404124, -0.00727252},
   {0.06634643, 0.06978643, -0.059740417, -0.090610795, -0.09022994, 0.087332904, 0.028624803, -0.022401802, 0.04966669, -0.025091954, 0.030109309, 0.061666615, 0.02763427, 0.019364659, -0.04068778, 0.05627138, -0.09229159, 0.08918183, -0.038509183, 0.06403534, -0.00875689, 0.04562459, -0.0008953253, -0.043971367, 0.05626476, 0.02828716, -0.04992556, -0.080102764, -0.023293845, 0.08278226, -0.059816822, -0.044356886, 0.02648659, -0.090459116, -0.025861371, 0.008138402, -0.011240966, 0.07549692, -0.036369592, -0.07654733, 0.044975318, 0.08194905, 0.012974853, 0.088073425, 0.056363642, 0.07994522, -0.059116352, 0.047138367, -0.079099335, 0.024048664, -0.03526492, 0.03224569, 0.016089018, -0.04219162, 0.045307644, 0.07417175, 0.025284901, -0.08164528, -0.08806797, 0.067516185, -0.022116486, -0.016657926, -0.018141339, 0.0829614},
   {0.0032403767, -0.06305523, -0.09553, -0.014403607, 0.06662843, 0.031034822, 0.0643171, -0.084221184, 0.063298926, 0.080786735, -0.0089307055, 0.038694974, -0.074181065, -0.009579972, 0.02846475, 0.075973384, -0.011343582, -0.084695034, 0.0387811, -0.028841853, 0.05606476, -0.032047305, 0.0332626, 0.087654494, 0.010934895, -0.053957447, -0.075143546, -0.08219251, -0.013268501, -0.091703825, -0.013042437, -0.037838627, 0.06484205, -0.045196433, 0.0679735, 0.049463335, -0.093688875, -0.0576743, 0.0022757407, -0.04141592, -0.082416624, -0.04054194, -0.034558315, 0.025327891, 0.052803077, 0.029483514, 0.001558049, 0.07293988, -0.021774525, -0.07093087, 0.07217637, -0.08290748, 0.026690127, 0.06467419, -0.06617887, -0.006648881, -0.045103017, 0.021827616, -0.01316718, -0.014381209, 0.047592446, 0.06951525, -0.05638835, 0.070047505},
   {-0.035678335, 0.077540636, 0.08163981, 0.05895407, 0.001927153, 0.038173642, -0.017298488, 0.0014404977, -0.06385042, 0.09297621, -0.032847937, -0.074334405, 0.033763893, -0.008024292, -0.043458022, -0.055542823, 0.054237258, 0.05110199, 0.09099413, -0.013485316, -0.09817131, 0.06407579, -0.043036655, -0.08252576, -0.03775446, 0.05623097, 0.03348638, -0.061675034, 0.076633014, -0.05575285, 0.045208864, 0.035265326, -0.0017480403, -0.07168308, -0.09282388, 0.04438611, 0.05484005, 0.013648052, -0.012300961, -0.058808386, 0.024397915, -0.08549786, -0.055713985, 0.04621101, -0.056465246, -0.016849801, -0.043979432, -0.035000477, -0.063824184, 0.052390702, 0.08776808, -0.063891366, -0.0661081, 0.065547265, -0.049878307, -0.032866694, -0.031702634, 0.03156262, -0.08718472, 0.085335076, -0.07324894, -0.03766077, 0.084867634, -0.06174997},
   {0.018489392, 0.042857774, -0.08462513, 0.0327171, 0.07625103, -0.09665522, 0.068700515, -0.07914267, 0.048474673, -0.059202734, 0.0878494, -0.019822538, -0.046081286, -0.018063026, -0.065419875, 0.037802733, -0.09555071, -0.011932932, -0.054765336, -0.08921253, -0.010700798, 0.022273233, 0.032285277, 0.009862147, -0.014400503, -0.05341842, -0.026878802, -0.089476354, -0.061022006, 0.075254165, 0.07131294, -0.07610618, -0.083264396, 0.07450299, -0.07365066, -0.074192114, -0.046678107, -0.04033564, -0.01353644, -0.04670979, -0.028490836, 0.024590239, 0.024547946, -0.026012309, 0.046755817, -0.054606415, -0.02344196, -0.058633953, 0.040235355, -0.072341464, 0.033039223, 0.028431378, 0.07479193, -0.06059645, 0.08153113, -0.01046718, 0.0046130205, 0.011161345, 0.008357927, -0.0034645665, 0.0509389, -0.0915378, -0.09296764, 0.026591059},
   {0.016950624, -0.023736607, 0.07068046, -0.047442514, 0.026058974, 0.06308133, 0.058798652, -0.031114958, -0.041815978, 0.04689401, -0.059043445, 0.004540963, 0.010586344, -0.022951057, 0.032503195, -0.08638062, -0.020257913, -0.0014560968, 0.018293902, -0.09740837, -0.030210936, -0.079154104, 0.04281694, 0.04398351, -0.091685414, -0.029985981, 0.010225352, 0.08577565, -0.06599781, -0.0065077245, -0.082164936, 0.010688432, 0.074916296, 0.08912224, 0.009017566, -0.0047610495, 0.0033901406, -0.009819376, -0.018251978, -0.04676161, -0.04341628, 0.09211045, -0.037765987, 0.004426524, 0.048154835, 0.007169708, 0.087316915, -0.095607854, -0.006580734, 0.0010937124, 0.065997, -0.055922896, 0.053856533, -0.011155359, -0.028260708, 0.020455336, -0.0021959932, -0.04084033, -0.05357701, -0.05800071, 0.08881998, -0.020227164, -0.08212503, -0.07065163},
   {-0.03948977, -0.06629573, -0.052200682, -0.016152116, -0.07112198, 0.0306392, -0.049058255, -0.011540016, -0.08699863, 0.061182797, 0.08674695, -0.056020316, 0.042252876, -0.0893668, -0.07146409, -0.0064949766, -0.041951623, 0.004464194, 0.03852447, -0.079151, -0.0430833, -0.054131713, 0.048577294, -0.067268796, -0.03253201, 0.00042142835, -0.03156286, -0.027315456, 0.050404467, 0.008657776, -0.05164549, -0.05445076, 0.054579668, 0.043955367, 0.051196527, -0.04331504, -0.08472815, -0.03952829, -0.069149196, 0.00085644424, 0.07306279, 0.087616004, -0.015482336, 0.074743785, 0.08237145, 0.04650731, -0.036910035, -0.08075853, 0.058742646, -0.06459466, -0.00046158163, 0.016154282, 0.08590016, 0.016567506, 0.04074741, -0.029233221, 0.0047835326, 0.023114312, -0.025430642, 0.061314903, 0.058390066, -0.08787717, 0.08794069, -0.043330166},
   {0.07823362, -0.052786328, -0.08653089, 0.041438755, -0.010813585, 0.07886059, -0.022480024, 0.06959576, 0.06028964, -0.02904459, -0.06171612, -0.051045023, 0.009176731, -0.039829653, 0.04399457, -0.011899978, 0.08112758, -0.090385206, -0.02076774, 0.030489732, 0.0718264, -0.064514115, 0.082109146, -0.077334255, -0.020717438, 0.046372265, 0.06428708, -0.07771973, 0.036898054, 0.03765539, 0.08877532, -0.07754947, -0.06465618, -0.03592712, 0.0713835, -0.06134471, 0.028930992, -0.037492234, -0.043565877, -0.0798679, 0.04410529, 0.088406794, 0.07008256, -0.06211306, 0.06887752, -0.023821304, -0.07568203, 0.07748903, 0.07828032, 0.087614365, -0.023789264, 0.0869552, 0.07931056, 0.06189721, -0.054441106, 0.041325547, 0.022339223, 0.051208775, -0.08716652, 0.062285084, -0.058831293, -0.027021386, 0.05383434, -0.04085862},
   {0.06933588, 0.059263155, 0.0110738315, 0.08354942, -0.045263078, 0.011268996, -0.007580923, 0.060815636, 0.09318702, -0.008425734, -0.039397396, 0.061920296, 0.017363079, -0.07675847, -0.060433056, 0.0044512227, 0.012974421, 0.060507856, -0.005217336, 0.05425549, 0.05879673, 0.0922102, 0.008880116, 0.06602318, 0.02509717, 0.07851686, 0.082659, 0.060340457, -0.013270706, -0.07274651, 0.024670593, -0.043276686, -0.074341744, 0.0782976, -0.085754104, 0.064046405, 0.07350721, 0.05664412, -0.07547694, -0.04660987, -0.022454882, 0.06636932, 0.07276915, 0.08601857, 0.06679966, -0.067086376, -0.048784405, 0.054441296, -0.09303476, 0.034901563, 0.02029398, 0.040781833, 0.077106595, 0.011472136, -0.078586526, -0.04075655, -0.0054634623, 0.00027910148, 0.07924429, 0.025902504, 0.079582766, -0.03612892, 0.046833795, -0.08514477},
   {0.057212308, 0.08097669, -0.0010314827, -0.009457555, -0.017830582, -0.046976544, 0.03660017, -0.0052728713, -0.08257269, -0.044069722, 0.049063377, -0.000738836, -0.005558878, 0.07815673, -0.06526694, 0.043396376, 0.06154947, 0.023250304, 0.06403393, -0.013419336, -0.007854509, 0.027391832, -0.03542859, 0.056775473, 0.00995396, 0.056901254, -0.02309579, 0.04549188, -0.037584946, -0.03735616, 0.020805275, -0.082952276, 0.07815806, -0.047181487, -0.026958559, 0.08925199, -0.008933786, -0.08769849, -0.00032063355, -0.05755932, 0.011988288, 0.03084103, 0.027251277, -0.06846878, -0.074480794, -0.057525698, 0.0801468, -0.06421802, -0.015955796, -0.011252297, 0.019683797, -0.04277959, 0.05993259, -0.04918223, -0.065529875, -0.0008924555, -0.002770583, -0.01817899, -0.011969484, -0.006318908, 0.090234846, -0.07716138, 0.029389022, -0.0075344373},
   {-0.028875967, -0.068357304, -0.024804678, -0.01706641, -0.0622871, 0.08397734, 0.025743537, -0.015220028, -0.03325023, 0.094105355, -0.09247915, -0.076771446, -0.013548188, 0.065982446, -0.0069820657, 0.056401335, -0.065401204, 0.09255954, 0.020233594, -0.071904615, -0.028828075, 0.047040943, 0.053126883, -0.0711848, 0.011822232, -0.05043284, 0.09468927, -0.08149079, -0.027271591, 0.030937254, 0.06840077, 0.03054298, 0.08018877, -0.04866564, -0.0672245, -0.05845616, 0.058837485, -0.021097222, 0.050768346, 0.09107006, 0.030004123, -0.07158924, -0.008875736, 0.07150071, -0.038778245, 0.051705178, 0.049488988, 0.04279406, -0.0666919, 0.0426097, 0.056762196, -0.085862584, -0.057018533, 0.0008154139, -0.0703391, -0.041648496, 0.07183427, -0.0574851, 0.08198703, -0.05502734, 0.08136643, 0.044398315, 0.054211453, -0.051540565},
   {-0.07394496, -0.065779224, -0.051901728, -0.0110785095, 0.08629071, 0.056791853, 0.010765672, 0.04340821, 0.07625559, -0.05127808, -0.06867674, -0.06665014, 0.007286541, 0.051808633, -0.08702099, -0.037362434, 0.043803897, -0.08952689, 0.044049434, 0.0126845995, 0.03830078, 0.089063756, 0.064684905, 0.053440996, 0.009572242, -0.028923742, 0.053461827, 0.02962869, -0.0034058616, -0.012838475, -0.044770733, -0.004074796, 0.016465805, 0.007491021, 0.012807372, -0.07726857, 0.027069028, 0.06582585, -0.060790163, -0.05533996, -0.08558208, 0.019155152, -0.06097324, 0.08917167, 0.009934096, 0.019585883, 0.005481886, 0.073582344, 0.06105856, -0.030893734, -0.022946436, -0.07274522, -0.071306966, -0.035671774, 0.08051009, 0.0487396, -0.03382854, 0.014464137, 0.03295716, -0.015588318, 0.06197113, -0.06317133, 0.010623812, 0.02518382},
   {0.061476346, 0.03849716, -0.0076364893, -0.081788905, 0.064821914, -0.08903681, -0.08757883, 0.032889005, 0.050051708, 0.060697496, 0.009134255, -0.022646971, -0.07126594, 0.07088491, 0.07214693, 0.0043287426, 0.019674458, 0.0408692, -0.05262674, 0.004868231, 0.07713371, -0.07313128, -0.09300057, 0.060783587, -0.09037693, 0.07108326, -0.035356227, 0.021044519, -0.02460254, -0.08393508, -0.009377565, -0.09111078, -0.05333354, -0.009149183, 0.001061499, 0.029959582, 0.03816981, 0.02940829, 0.0418304, 0.070805274, -0.06812521, -0.047238376, -0.03119032, 0.03456787, -0.0051615904, -0.09714507, -0.018355805, -0.04714803, -0.075972356, -0.044561196, 0.027031034, -0.045509137, -0.051017214, -0.04302308, -0.04668821, 0.09059713, -0.05667611, 0.02382328, -0.032965675, -0.08773488, 0.09004602, -0.04148769, -0.011514871, 0.030631306},
   {0.037053272, -0.021478862, 0.03803769, -0.045927297, 0.056513388, 0.05498883, 0.07150039, -0.09833661, 0.052246, -0.062341362, 0.0010367259, -0.022559376, 0.025733776, 0.013173475, 0.051450364, -0.059976425, 0.0021108275, -0.044644617, -0.072967574, -0.06948023, -0.023090072, -0.04899547, 0.010750314, -0.0007941723, 0.087290674, 0.02840579, 0.037436925, -0.070242494, -0.06574035, -0.016038142, -0.002451815, 0.053168625, 0.0029144585, -0.08168042, 0.040908955, -0.09577442, -0.072166644, -0.03034267, -0.0705472, 0.028998323, 0.030042548, -0.031400654, 0.019075664, 0.04575955, 0.06910291, -0.04275961, 0.00018179181, -0.06296105, 0.027276756, 0.08282611, 0.0022396038, 0.048927106, -0.034210015, 0.03925518, -0.073079795, 0.00079390826, 0.0651645, -0.010442551, 0.071301244, -0.09599082, -0.056906447, 0.03261795, -0.045695025, 0.030193217},
   {0.010255956, -0.06922166, 0.042187516, -0.080717295, 0.021205438, -0.082932174, -0.06046604, -0.093720056, -0.06491532, -0.035078052, 0.009243146, -0.07551688, -0.0072221532, -0.05767215, -0.056665473, -0.042927787, -0.03377573, 0.08121578, 0.06281597, -0.052525863, -0.0969981, 0.038359515, -0.09320819, 0.01668106, -0.07771836, -0.03746387, -0.036139205, 0.0631956, -0.07736981, 0.08587717, 0.041101705, 0.0840375, -0.002847597, -0.0037851043, 0.033598367, -0.04577322, 0.047341395, -0.040388364, 0.0031544378, 0.021831341, -0.067750834, -0.0040123463, -0.031425007, -0.06591382, -0.054994803, -0.0294273, 0.056783125, 0.06806316, -0.08078945, 0.02506493, -0.028699711, -0.06694147, -0.09601234, -0.043391343, -0.037428938, -0.0042946334, -0.057756167, -0.052094605, -0.054802537, 0.00482857, 0.009217604, -0.006343037, -0.0008979326, -0.072400525},
   {0.04419281, 0.03293991, 0.010693891, 0.026709436, 0.08471289, -0.028814651, -0.08997317, -0.09522512, 0.051415816, -0.08074642, 0.03647288, -0.021643225, -0.07917778, -0.053663958, 0.036356695, 0.013007127, 0.03592695, -0.091406, 0.024864428, -0.008990294, 0.035461295, 0.008933202, -0.020754064, 0.0104552135, -0.011455493, 0.018267985, -0.017789865, 0.08065648, -0.089043066, 0.022946298, -0.0807332, 0.02725655, 0.03006906, 0.021528836, -0.08153344, 0.07992999, 0.014342597, 0.015558453, -0.05287947, -0.09058724, -0.07234923, 0.09029163, -0.0833418, -0.08561331, -0.083666034, 0.0763695, -0.070251, -0.036998916, 0.06261919, 0.039434087, 0.05923375, -0.021594442, 0.08619156, -0.08944281, 0.088290475, -0.0741432, 0.092156634, 0.059080005, -0.09233191, 0.039997302, 0.07050996, 0.031869017, 0.022861032, -0.061674125},
   {0.0137664, -0.07398763, -0.026540747, -0.09568071, 0.09675423, 0.08529069, -0.053962927, -0.052424856, -0.046355024, 0.05006554, 0.0720275, -0.02714065, 0.0633411, 0.040774927, -0.030098341, -0.069901094, 0.049066376, 0.07604026, -0.049305778, 0.028632794, -0.089600615, -0.022228692, 0.051608425, -0.017948307, 0.035837248, 0.057920303, -0.07722009, 0.06369751, 0.007955514, 0.049148925, -0.08191151, -0.033109363, -0.06660436, 0.07308308, 0.05209635, 0.010398063, 0.06210668, -0.04849908, 0.069337435, 0.009382442, 0.009545786, 0.066362105, 0.042443924, 0.06881171, -0.053425048, 0.07025609, 0.06561625, -0.06085398, 0.013372006, -0.08524419, -0.046811797, -0.06307552, 0.0119588375, -0.026158571, -0.04810112, -0.0016607736, 0.019712284, 0.040884767, 0.0059008226, 0.07295849, -0.041961286, 0.039972328, 0.058805753, -0.09465228},
   {-0.09492642, -0.004123772, 0.07506569, -0.06431618, 0.038978536, -0.018974336, 0.052770022, 0.014857194, -0.03199442, 0.025153467, -0.028870769, 0.090243086, 0.019872494, 0.026222896, 0.038450964, 0.021935865, 0.0018967717, -0.01294636, -0.07783861, 0.07764589, -0.06589646, 0.06593154, -0.036138073, 0.04622703, -0.018419951, -0.07662386, -0.011092176, -0.09012863, -0.042865157, -0.08134332, -0.06050558, -0.049137607, -0.018430866, 0.06282489, 0.017612627, -0.024918921, 0.011418946, -0.0069471626, 0.0038432763, -0.07661724, -0.042564552, 0.06421933, -0.06322981, 0.030951917, 0.0020567405, 0.054689, 0.020940043, -0.025883395, -0.053436548, 0.072911784, -0.034244135, 0.08215999, 0.067985974, -0.034658607, -0.005838901, 0.041471094, 0.089248985, 0.025141535, 0.05920524, -0.06999548, 0.007385463, -0.065789536, 0.04651627, -0.007812655},
   {0.039803233, -0.010087926, 0.012615403, -0.049872726, 0.07317395, 0.08600457, 0.028189747, 0.018487684, -0.047149293, 0.0076978346, -0.06403482, 0.023225455, -0.0795563, 0.0316482, -0.021650948, -0.0054238066, 0.011372287, -0.008990288, 0.06648057, 0.010650777, -0.10113425, -0.040067326, -0.0018970148, 0.06100724, 0.0069198213, -0.056385737, -0.019320615, 7.470314e-05, 0.09075525, 0.033023767, 0.05545366, -0.040973872, 0.0011993423, -0.07214688, -0.021541838, -0.08547236, 0.029916812, -0.03266236, 0.06627383, 0.07385098, 0.009293258, 0.052539773, -0.081288144, -0.051306345, 0.09485687, -0.046970636, -0.068788685, 0.014725209, -0.07189793, -0.023777403, 0.081438266, 0.0033086613, 0.04859604, 0.059831135, 0.028812654, -0.05490572, -0.056125425, -0.012468244, -0.026929341, 0.011008083, 0.0854464, -0.0070968047, 0.016308893, 0.019520862},
   {0.04687835, -0.06439789, -0.045439634, 0.048652686, 0.07616362, 0.03247305, -0.002485409, -0.005551181, -0.015554538, 0.043458432, 0.06437992, 0.057935, 0.070311494, -0.013858015, -0.085240245, -0.03602731, -0.017592823, 0.05966603, -0.03329467, -0.030056508, 0.03083446, -0.0305498, 0.07113513, -0.011121161, -0.076643825, -0.018854873, -0.0018881646, 0.054893654, -0.010594644, -0.09216226, -0.054675315, -0.06333454, -0.06514537, 0.019424206, 0.07302076, -0.012951825, -0.01562598, 0.058821697, 0.051312592, 0.07496046, 0.062013205, -0.07733251, 0.0002957914, -0.092884384, 0.04011543, 0.002903086, -0.02165728, 0.06690008, 0.07843954, 0.06421003, -0.067358494, 0.0132659, 0.0839146, -0.020112738, -0.012777358, 0.020893313, 0.056733612, 0.04343296, -0.08844362, 0.07945438, -0.0115871215, 0.07279196, 0.06355385, 0.051384035},
   {-0.07229915, 0.09542898, 0.032496892, -0.051530726, -0.049971305, 0.01134936, 0.04709777, 0.03564522, -0.022420067, -0.08138768, -0.06778808, -0.071764484, 0.0333134, -0.015751384, -0.046688166, 0.0780647, -0.0012558242, -0.02031754, -0.05862181, -0.034640383, -0.034374263, -0.009591016, 0.06953501, -0.017571948, -0.09499709, 0.095795505, -0.07730576, 0.07664259, 0.081682526, 0.06870023, -0.0053116614, -0.07127366, -0.070801474, 0.04980359, 0.040951256, -0.048750393, -0.05469387, -0.029798886, 0.023533402, -0.039493244, -0.05293115, 0.04382748, -0.090858206, -0.027476996, -0.0107086515, -0.06525118, 0.063314825, 0.08874297, 0.031832404, 0.06345885, -0.003871558, 0.06810362, 0.027145704, -0.050560188, -0.06772227, 0.044719685, 0.012240523, 0.017559074, -0.092423216, 0.086276956, -0.046822976, 0.04744854, 0.0070449943, -0.07979128},
   {-0.04479967, -0.019675167, 0.0026047446, -0.050592076, 0.014738412, -0.023189653, 0.027774073, -0.007822459, 0.052492343, -0.042541746, -0.012261897, -0.0031451117, 0.07422661, -0.07471496, -0.07152832, -0.037675764, -0.048055634, -0.001300931, -0.051727667, -0.03706206, 0.08266314, -0.0064453245, -0.0610406, 0.018774718, 0.06131732, 0.010458479, 0.08139005, 0.03417302, 0.0039692074, -0.046927407, 0.043762855, -0.022696454, -0.037160728, 0.018409144, -0.048914865, 0.022184214, -0.037220206, -0.015080973, 0.04720488, -0.006771125, -0.0387304, -0.032150194, -0.051300254, 0.08210819, 0.0718144, 0.040402737, 0.024591515, -0.04817815, 0.021714024, 0.026898943, 0.028389588, -0.065470025, 0.050869282, -0.024446286, 0.03930693, 0.090373114, 0.0048715435, -0.045717128, -0.032049272, 0.025974033, 0.055520374, 0.0061658025, -0.04507169, -0.097502686},
   {0.011741378, -0.064911835, -0.06207398, -0.046446726, -0.083438374, -0.0025290707, 0.08697016, -0.016216053, 0.089451134, -0.00076187146, 0.056740545, -0.054789238, -0.005828157, -0.038755473, 0.0031489134, 0.041051634, 0.0013364456, -0.0118756145, -0.059677556, 0.0298105, 0.04728708, -0.028011791, -0.008171924, -0.067098364, -0.0124815665, 0.010409016, 0.07578845, -0.06688601, 0.07037849, 0.02160436, -0.09151391, -0.08475191, -0.055671908, 0.024405656, -0.009637414, 0.048369016, -0.05805981, 0.07058362, 0.038276777, -0.09093451, -0.07195374, -0.05587778, 0.051212415, -0.006927468, 0.0907488, -0.020413652, -0.027405648, -0.06789539, -0.06277053, -0.0028673948, -0.009879144, -0.044833172, 0.055430725, -0.0008267835, -0.07372317, -0.02487984, -0.05700779, -0.08038284, -0.07256289, -0.008453482, -0.017063646, -0.050239027, -0.063334234, -0.030098332},
   {0.010028474, 0.049302813, -0.053409684, -0.046748973, -0.0913156, 0.061973706, -0.06764866, -0.081743404, 0.0023637332, -0.06364128, 0.07083879, 0.049123544, -0.0084532425, 0.068790615, 0.06867937, 0.069522925, 0.06528519, 0.089847274, -0.016454436, 0.0616823, -0.08058409, 0.08058693, 0.07761068, -0.08029258, 0.011983118, -0.023655219, 0.05351813, -0.005221885, -0.05123219, 0.02434539, -0.076574504, -0.058827087, 0.032484762, -0.05413045, -0.06358504, -0.078865856, 0.04992201, -0.025850572, 0.002833649, 0.09016263, 0.08652856, 0.092663206, 0.04379051, -0.07622279, 0.071789496, 0.024142236, 0.045572095, -0.028266938, -0.017028319, 0.04620829, 0.052704856, 0.09140494, -0.013433259, 0.0920681, -0.04751431, 0.009728496, 0.080494955, -0.009623206, -0.013713725, -0.047636274, -0.029079061, -0.008175515, 0.045219358, -0.073738046},
   {-0.05668723, 0.027519172, -0.061423574, 0.08613469, 0.09628712, 0.021775406, 0.013820123, 0.058063474, -0.016760191, 0.0496, 0.074888326, -0.08157724, -0.004821062, 0.06273001, 0.01330401, 0.064342685, 0.07168598, -0.02993048, -0.07583867, 0.045681193, -0.089148484, -0.077444434, 0.080852106, -0.075740084, 0.07585659, 0.029055106, 0.0361101, -0.029806113, -0.030655988, 0.031658918, 0.0057139737, -0.07781511, 0.0032886341, -0.0691202, 0.004601619, 0.0045571583, -0.07423917, -0.0037133526, -0.032295585, -0.07039201, 0.08624559, 0.012847021, -0.080960006, -0.024702728, -0.009475186, -0.05036086, -0.015587697, -0.005501062, 0.039002914, 0.06831268, -0.02056099, -0.06819036, 0.0627903, 0.06344708, -0.060950164, -0.0660118, 0.028435664, -0.07042589, -0.012547351, 0.00563767, 0.08299101, 0.034257136, 0.020348027, 0.048459973},
   {0.07128995, -0.008827007, -0.093734026, -0.017730681, -0.08433548, 0.04318162, -0.013311421, 0.0750451, 0.0846563, -0.0011637964, 0.092275076, -0.08403864, 0.05303479, 0.07526863, -0.043122597, 0.013493501, 0.027517501, -0.018131971, -0.0878832, -0.08275339, 0.02770739, -0.024227785, -0.029220933, -0.038735874, 0.06965844, -0.056538433, -0.02192085, -0.06258, 0.02059754, -0.07636741, -0.02426198, 0.04674288, -0.06504385, -0.09083795, -0.010754751, -0.00899594, -0.048958, -0.05472635, 0.015129849, -0.041549165, -0.0945815, 0.05886092, 0.04181941, -0.0450794, -0.067529805, -0.017147064, -0.06901624, -0.07311697, -0.021705853, -0.024047274, 0.0385378, 0.084286325, -0.06173096, -0.08800013, 0.07959599, -0.012856064, -0.037541844, 0.052674897, 0.078864895, 0.06527531, -0.08610008, -0.034497328, 0.06963911, -0.027152454},
   {0.034702938, 0.048199173, 0.0033667828, -0.06159574, -0.0790972, 0.07157869, 0.07860349, 0.068662435, 0.086580485, 0.059694115, -0.023644082, 0.0553363, -0.06779987, -0.032220375, 0.09104521, -0.051854707, -0.015418556, 0.020596959, 0.06673583, -0.0520627, -0.038980085, 0.03460771, -0.068724915, -0.06390102, -0.08006241, -0.085966535, -0.017059386, 0.03854139, -0.045072168, -0.025561817, -0.035413843, -0.011841364, -0.049531247, -0.08239845, -0.08680938, 0.067131184, -0.06466482, 0.016593892, -0.054305024, -0.05231539, -0.019873112, 0.07368506, -0.05754747, -0.063179806, -0.076606855, 0.06738999, -0.021427035, 0.0044532362, 0.023344425, 0.06826351, -0.027766068, -0.0058471337, -0.08858759, -0.088697836, -0.077061124, 0.0317151, 0.026572656, 0.0068165185, 0.027729407, -0.039416, 0.015779397, 0.054056294, 0.053878326, 0.072328486},
   {-0.029756756, -0.062052235, 0.058889568, 0.03450822, 0.0828277, 0.021955308, -0.050240222, -0.047224294, -0.03982768, 0.079287365, 0.053743385, 0.075994916, 0.06964167, -0.07097495, -0.021858156, -0.06882828, -0.025458872, -0.060049377, 0.062806, -0.016003385, -0.05241857, 0.026050951, -0.00089138397, -0.07939849, 0.06768168, 0.028789505, 0.077954605, -0.07180755, -0.083851025, -0.03864305, 0.0152711505, -0.027615806, -0.057284746, 0.018453564, 0.01579663, -0.028433077, -0.093742184, -0.013773493, 0.011693751, 0.02850809, -0.017739646, -0.012199625, 0.06782377, 0.07570005, -0.0017403421, -0.06290119, 0.02862167, -0.09271451, -0.09356814, 0.067126006, 0.04000572, -0.054002337, -0.025562074, 0.023731567, -0.059489932, -0.03977055, -0.02759121, 0.083505176, 0.029013582, -0.00045413585, -0.046397943, 0.015914924, 0.056730285, 0.015774349},
   {0.03881228, -0.041695155, 0.05912986, -0.08926833, 0.041609455, -0.07892904, -0.0035907933, -0.070058435, -0.014417949, -0.00075314863, -0.055823866, -0.090324275, -0.04477034, -0.061440002, 0.05604198, -0.0077484027, -0.030121326, 0.0116426945, -0.025897555, -0.037379857, 0.0750148, 0.045752104, -0.070486456, 0.05066327, 0.00017131359, -0.019583888, 0.002933161, 0.06892176, -0.052458074, -0.02691666, -0.00815416, -0.07987753, -0.016480021, -0.08750444, -0.007839677, -0.03351492, -0.008887484, -0.018233998, 0.05785982, -0.059408903, -0.04081476, -0.054536555, 0.02170175, 0.061829768, -0.085225664, 0.073549844, -0.0024804457, -0.05506382, -0.048399813, 0.033502508, -0.06412929, 0.0470965, -0.0796314, -0.084632516, 0.014277376, -0.008511594, 0.054983094, -0.05194886, 0.08408504, -0.077461, -0.06441045, 0.01838521, -0.033946294, 0.05838473},
   {-0.033933852, 0.076656334, -0.024081683, -0.051943578, 0.026824355, 0.010873639, -0.051962133, 0.031044789, -0.048828173, -0.022885315, 0.009903461, -0.027606726, 0.01866094, -0.042719793, -0.029496469, -0.014800265, 0.020372488, 0.07140144, 0.051032268, 0.06355374, 0.024017368, -0.067368895, 0.043197405, -0.003925264, -0.03390898, 0.017856523, 0.02760333, 0.080908604, 0.047323994, -0.03156674, -0.025659343, 0.030253923, -0.07006498, -0.084590346, 0.0040939716, -0.059763227, 0.024370931, 0.017701652, 0.040517185, -0.024443306, -0.0935599, -0.08966546, 0.02611541, -0.08550761, 0.0320633, 0.053814467, 0.032199014, 0.047967453, -0.06671702, -0.067420684, 0.015936226, -0.022937417, -0.06148693, -0.041280378, -0.08857547, 0.002141461, 0.092325956, 0.0884189, 0.021937296, -0.057771765, 0.0071857637, 0.06293667, 0.016191695, -0.057663605},
   {0.0058498047, 0.038351927, 0.019506818, -0.04936125, 0.008750504, 0.04841593, -0.04950399, -0.07118189, 0.050789427, -0.037419114, -0.045323826, 0.029729644, 0.022049852, 0.020111768, -0.02488637, 0.07427665, -0.083770506, 0.05559186, -0.0005189553, 0.0798672, 0.052425474, -0.004088656, -0.0035120635, 0.019288018, 0.05455844, -0.08027814, -8.630056e-05, -0.06073565, -0.028721541, -0.020975947, 0.03641249, -0.02283623, -0.078304455, -0.05305501, -0.049477924, -0.067112684, 0.008927188, 0.06281508, 0.06113055, -0.06131262, 0.009271126, -0.078882165, 0.045371503, -0.05512846, -0.06959475, -0.066670164, -0.012221685, 0.00820963, -0.033946097, 0.047158357, 0.0039136917, 0.05468542, -0.01877268, -0.0047086403, 0.083649345, -0.065782405, -0.02904306, 0.08760066, -0.059741188, -0.088952504, 0.05316918, 0.09213694, 0.056977913, -0.04086611},
   {-0.08247782, -0.024954055, 0.003452757, -0.0036285059, 0.05737546, 0.011655041, -0.0066869045, -0.089590326, 0.032010116, -0.081759125, -0.018367186, 0.013550364, 0.046795495, -0.08160786, 0.025344469, 0.05297006, -0.033433236, 0.044366173, 0.026988566, -0.037618652, 0.07289413, 0.08026493, 0.039381724, -0.04343711, 0.03007141, -0.048578322, -0.08753132, 0.07053735, -0.04595035, 0.08329446, 0.027725846, 0.07283118, 0.026268885, -0.04240339, 0.04491905, 0.05335705, -0.07142637, 0.03146809, -0.0696295, -0.00026790053, -0.09458427, -0.05635575, 0.09351133, 0.08485589, 0.08627149, 0.00092886505, 0.015443413, 0.007126396, -0.06459524, 0.07808898, -0.02676593, -0.03266901, -0.01712818, 0.059012674, 0.009876117, -0.0412575, 0.059593353, -0.07499446, -0.005119644, -0.0043014237, 0.086245425, -0.028045468, -0.09356179, -0.09439657},
   {-0.023014536, -0.007972154, -0.04726013, -0.09748927, 0.030527333, -0.0052062655, 0.08738101, -0.08653243, -0.024282929, -0.035288535, 0.071164645, -0.0016561038, -0.09003741, -0.018785117, -0.067448184, 0.028949462, 0.01748836, 0.0014656186, -0.015570223, 0.07007253, -0.07521712, 0.009992108, 0.064424455, 0.004097961, 0.0018665247, -0.02173696, 0.08240429, 0.08426674, -0.03159691, 0.087031506, -0.039854918, 0.07337105, 0.08040515, 0.0040625026, 0.026250673, 0.066490285, 0.0013761233, -0.012061272, 0.083534345, -0.064303726, -0.0047809845, 0.025397003, -0.003237243, 0.06308418, -0.046972036, -0.0025413677, 0.07046996, -0.0753912, 0.012328869, 0.05153853, 0.05098702, -0.07634854, 0.05848599, 0.009645335, -0.017626725, -0.007851655, 0.056961853, 0.06873377, 0.09024993, 0.03737585, 0.031432033, 0.02032902, 0.071719155, 0.06779488},
   {-0.09584836, 0.079444855, -0.008319807, 0.014718719, 0.022371259, 0.029044727, -0.06963887, -0.066076495, 0.0625531, -0.03579223, 0.06579966, -0.08457018, 0.01594714, -0.0167264, 0.08759194, 0.05960133, -0.07977136, 0.015514225, 0.004909456, -0.042636555, -0.10142331, -0.010561628, -0.0019365201, -0.01008942, 0.017725887, 0.009028993, 0.008324869, 0.029758038, -0.08711862, 0.07951211, 0.08116972, -0.0904805, 0.07165692, 0.021101458, -0.042951617, 0.07440674, 0.032429792, 0.06433352, -0.07589417, -0.05614078, -0.07319711, -0.04626724, -0.05169588, 0.017840803, -0.07512084, -0.05692173, -0.07513171, -0.0022666308, 0.0855677, -0.033867598, 0.0728928, 0.014241755, -0.08070209, -0.062471047, -0.07584964, 0.054012403, -0.023127263, -0.082962394, -0.036098417, 0.07932513, 0.023408094, -0.055650994, -0.0070402254, 0.08174803},
   {0.038225338, 0.022300566, 0.084857255, -0.08542379, -0.08533037, 0.062536806, -0.006369852, 0.07202641, -0.06963623, -0.04203216, -0.0710194, 0.048020266, -0.0017192066, -0.022109535, 0.074871905, 0.07473291, 0.08339419, -0.038398072, 0.011172175, 0.082282364, 0.038216885, 0.00065365544, 0.050519776, -0.07232959, 0.009915137, -0.0056052767, -0.04008457, 0.019196432, 0.036439337, -0.09051178, 0.025047105, -0.022985665, 0.041509323, 0.07287588, -0.013141446, 0.060835022, -0.04115646, 0.035369646, -0.008268618, -0.017860942, -0.0764502, 0.064984046, -0.039116595, -0.046133548, 0.0732609, -0.09647314, 0.077301644, 0.08664523, 0.07157725, 0.02455566, -0.05440902, 0.016685516, -0.095724136, -0.08092518, 0.051401906, -0.010984581, -0.0006722888, 0.022669543, 0.009913944, 0.032049544, -0.0012411886, -0.07875481, 0.08868959, -0.0011978064},
   {-0.06920326, 0.010613606, 0.0083109, 0.034041416, -0.057175953, -0.051507514, 0.034153637, 0.000121229954, -0.07633958, 0.094789796, -0.06880979, -0.0015582079, 0.03928662, -0.061247315, 0.0033260584, -0.06663437, -0.082489535, 0.055357985, -0.08868266, 0.047226425, -0.1015738, 0.010743468, 0.00080930616, -0.042869385, -0.07357853, 0.05967401, 0.08619, 0.036806084, 0.010656565, 0.085965104, 0.061951686, 0.0859085, 0.0771214, 0.020967014, -0.050660435, 0.0507592, -0.079842925, 0.042213425, 0.083951615, -0.01634235, -0.04724402, 0.0057185814, -0.06266556, -0.0007210374, -0.07424814, 0.02591948, -0.06483125, -0.0605483, 0.060792085, 0.03116701, 0.06275152, 0.039826088, 0.008024875, -0.023138948, 0.08600602, 0.026380826, -0.03301945, -0.08943209, 0.06945331, -0.065406926, 0.00776485, 0.014033593, 0.086343735, 0.07090827},
   {0.045316957, 0.0958565, 0.084483184, -0.074317075, 0.021742847, -0.06145798, 0.07160517, -0.004487245, -0.08293793, -0.041410353, 0.02197694, 0.05838018, -0.06862642, -0.01593627, 0.06728756, -0.08391324, -0.017160436, 0.002454348, 0.02098471, 0.004668175, 0.026259564, -0.053845678, 0.030753624, -0.07510706, -0.018125758, 0.08317052, 0.003272873, 0.08835651, 0.081159644, -0.08449451, 0.026598975, 0.07723047, 0.019354835, -0.02543348, -0.022634763, 0.014144038, 0.026209578, 0.008469856, -0.03450639, -0.020331621, -0.03405741, -0.01798825, 0.016562091, -0.04625498, -0.009760453, -0.09714189, 0.06122127, -0.055208683, -0.09081028, 0.054812808, -0.007388422, -0.014686771, 0.0660245, -0.047916874, 0.074434854, 0.031343706, -0.052645236, 0.08266014, -0.009253554, 0.011689152, 0.04814511, -0.041352887, -0.009284358, -0.049740106},
   {-0.01869671, 0.0924687, 0.052673776, -0.02549004, -0.04565802, 0.08416946, 0.06473989, -0.08448586, -0.015773075, -0.056467623, -0.07976226, -0.039381675, 0.05062733, 0.07206557, -0.019679196, -0.015720762, -0.06401095, 0.07206794, -0.012560166, 0.032483608, 0.07221782, 0.037425965, -0.0475942, -0.07816878, -0.0283628, 0.041544504, -0.01624055, 0.034679413, -0.00023078918, -0.010232165, 0.023400009, -0.07088268, 0.03709545, -0.057051018, 0.02957195, 0.01035617, 0.07098894, 0.043189906, 0.079802684, -0.023195907, 0.0850702, 0.07112972, -0.04195945, 0.018481411, -0.0011442852, -0.009148186, 0.061152205, -0.08245864, -0.011915505, -0.069432236, 0.043850973, 0.020444423, 0.04824586, 0.08982053, 0.02768337, 0.015679978, 0.012217747, 0.0001097387, 0.0772204, 0.059905846, 0.05717991, 0.04320457, 0.0613818, 0.012380155},
   {-0.06623337, -0.0075616343, -0.07241011, 0.0549572, -0.0066987635, 2.8400911e-05, -0.0056105694, 0.07477373, 0.08538903, 0.014052674, 0.013147116, 0.024517981, -0.09064723, 0.07269799, 0.08253973, 0.08543014, 0.03607179, 0.072673686, 0.031547137, -0.019886289, -0.051377364, 0.03831781, 0.027733075, -0.025657132, -0.0063047563, -0.010843716, -0.02488084, -0.015348433, -0.013052598, 0.057388462, -0.033119258, 0.0026103982, 0.026932366, 0.07647973, 0.07297198, -0.038674023, 0.08420196, 0.06387402, -0.008441349, 0.035558544, -0.094039515, -0.072961435, -0.059992604, 0.010907866, 0.06237133, -0.090224996, -0.08920285, 0.08281623, 0.032493196, 0.07373554, -0.03448731, -0.04401978, -0.004966867, 0.073696636, -0.07314966, -0.008125614, 0.027570533, 0.00014171874, 0.0675301, 0.08703561, 0.020921916, -0.0097864345, 0.017819624, -0.002757407},
   {-0.07959663, 0.06575985, -0.06264689, -0.009768545, 0.07624249, 0.0009933345, 0.045800835, -0.048830967, 0.06144091, 0.021191644, 0.0016112328, -0.0723428, 0.051551722, -0.0711272, -0.035956956, 0.084774844, -0.023383223, -0.0776322, 0.016464293, -0.007496634, 0.061375014, 0.08667555, -0.08543759, -0.02776029, 0.07824743, 0.07464801, -0.052081414, 0.082233496, -0.027673341, -0.0138757825, -0.02762032, -0.01129278, 0.08858205, -0.04217916, -0.070147045, -0.047065295, -0.044109426, 0.08511916, 0.027700704, -0.036040056, 0.07229464, -0.07671974, -0.027666535, 0.03857235, 0.0025560518, -0.028348597, 0.0070270505, 0.06630839, 0.01718287, 0.020239096, -0.045116533, -0.0014738515, -0.083897114, -0.026989475, 0.06470733, -0.07359584, 0.059960462, -0.09194845, -0.00436686, -0.07401841, -0.022691539, 0.06447283, -0.05265846, -0.0759668},
   {-0.080972694, 0.05451253, -0.009824791, -0.023224335, -0.00014396699, -0.064979926, 0.059075914, 0.0394334, 0.094079405, 0.080533385, 0.07099437, -0.01173554, 0.003398791, -0.025540218, -0.059170373, 0.008201234, 0.08084733, -0.07775649, 0.070237465, 0.05317377, 0.027145071, 0.096360125, 0.064406626, 0.08786949, 0.007973972, 0.069900356, -0.03732559, 0.021733396, -0.07403291, -0.014434248, 0.026302926, 0.010358644, 0.029813156, -0.09648167, 0.044432845, 0.030173538, 0.022856537, 0.0024886988, 0.079252295, 0.01702699, -0.0136903655, 0.038295396, -0.0011833805, -0.07073787, -0.070501365, 0.0046586706, 0.0045260726, 0.0039857063, 0.07947898, -0.033950232, -0.044552166, 0.04530234, -0.0353161, 0.05356086, 0.047761194, 0.09640095, 0.0152260335, 0.06222867, -0.016071938, -0.035659615, 0.006662063, 0.07464845, -0.089927986, -0.07150316},
   {0.06021849, 0.004991502, 0.07575623, 0.021791724, -0.085441194, -0.08639003, 0.062225044, 0.009818363, -0.07217179, -0.05897836, 0.05708099, -0.03357545, 0.00792557, -0.090472564, 0.013967782, 0.071432345, 0.025018409, -0.040388692, -0.002700135, -0.011164089, 0.07660291, 0.07580239, 0.06409931, 0.010858424, 0.08270257, 0.0917844, 0.009061254, -0.02625197, 0.073608585, -0.08473508, -0.08409827, -0.07437191, 0.00032491982, 0.024685184, -0.03882164, 0.08496166, -0.015271631, -0.087084346, 0.0651593, -0.086767375, 0.05618956, -0.07699008, 0.05417891, 0.06869184, -0.03340018, -0.020354897, 0.027184114, 8.069289e-05, -0.08023094, -0.005080538, 0.054233972, 0.0296885, 0.010921245, 0.056259163, -0.041019242, -0.07621354, -0.021294631, 0.08060483, -0.036008976, -0.032195933, 0.038601924, -0.079806626, 0.014175283, 0.082797594},
   {0.043182407, -0.011124273, 0.014522645, 0.03138975, -0.035975195, -0.004721252, -0.04551584, -0.09603398, -0.03660993, -0.089261636, 0.0024348646, 0.00021627045, -0.03476547, 0.062739745, 0.0888029, -0.06888877, -0.04656041, -0.091043994, -0.01823292, -0.09202213, 0.037791196, 0.06477446, 0.08214464, 0.0042799935, 0.073062584, 0.036394365, 0.03853738, 0.074216366, -0.033497624, 0.016648382, -0.08088806, -0.03163163, 0.058051817, -0.06387147, -0.0027970104, 0.017110283, 0.04272292, 0.06055337, 0.087343924, -0.015321642, -0.03593484, -0.026553243, -0.0578822, 0.044967778, 0.01847402, 0.01393605, -0.035277613, 0.030501362, 0.086984985, -0.0009514357, 0.040873438, -0.07660024, -0.07290893, -0.062480435, 0.08093757, -0.062123615, -0.054180544, -0.0068747536, 0.05222877, -0.09537495, 0.0756371, -0.05465051, -0.03181956, 0.06862877},
   {-0.060906447, -0.01126142, -0.087661505, -0.0850264, 0.0573974, 0.07826924, 0.076651335, 0.033782344, 0.041374657, -0.052488048, -0.058692735, 0.021808038, 0.061991937, -0.0707817, -0.03806525, -0.08687268, -0.018350212, 0.027246632, 0.08703429, -0.047931716, 0.021601154, 0.04811376, -0.042258292, -0.076982744, -0.07886443, -0.027176762, 0.06518622, 0.0077839554, -0.029901862, -0.030221954, -0.042071346, 0.039286308, -0.013317451, -0.0019367984, 0.063644916, 0.0032120189, 0.014964291, 0.07519275, 0.060878903, -0.0811498, 0.059999812, -0.015886225, 0.038734645, 0.06399814, -0.06524232, 0.055061605, -0.061963543, -0.0042793863, 0.062474553, -0.019120902, 0.073893756, 0.009710766, -0.05017534, -0.014766358, 0.07787163, 0.06877981, -0.08485397, 0.063263595, -0.06506968, -0.022443429, -0.013779329, 0.08861879, -0.05883064, -0.024338301},
   {0.029450832, -0.0003505595, -0.09316832, -0.08899921, -0.014954383, 0.08387552, -0.018419044, -0.053123333, 0.067707434, 0.07720287, -0.06662082, 0.038119502, 0.08544891, -0.028589275, -0.0042241737, -0.04215331, 0.029242251, 0.011064492, 0.032799162, 0.0617853, 0.0578479, -0.06818053, -0.025684878, -0.050834756, -0.07291464, -0.06759675, 0.046939664, -0.062023632, -0.0035284087, -0.013803519, 0.0214904, -0.072540924, -0.02380345, -0.068728834, 0.05165026, 0.015769204, 0.025370758, -0.076330386, 0.053625405, -0.040796936, 0.0083150305, 0.00030186772, -0.011186217, -0.044041295, 0.007646495, 0.015748521, -0.08663488, -0.07653574, -0.079078145, -0.051513303, -0.020743735, -0.060918104, -0.0054634907, 0.07633001, -0.047881834, 0.020192115, -0.01882075, -0.059421144, -0.025537945, -0.09434443, -0.067849144, 0.01676283, -0.065479726, -0.0430365},
   {-0.007321155, 0.096000515, 0.08210781, -0.062442992, 0.04026537, 0.07519074, -0.04618583, -0.08779593, -0.08628153, 0.08440443, -0.031734474, 0.08847779, -0.018391438, -0.06440828, -0.03521476, 0.06405314, -0.03173284, 0.059249528, -0.04670821, -0.046381682, 0.0761365, -0.018405518, 0.05881371, 0.056825332, -0.042620588, 0.014508392, 0.03178467, -0.08531336, -0.0055072606, -0.08996105, -0.08676925, 0.02792757, -0.038061067, -0.053701125, -0.014573547, -0.055769593, 0.010833755, 0.0031806587, 0.03416953, 0.031409957, -0.08512959, -0.0910884, -0.0028313329, 0.010496303, -0.030995484, -0.02883181, 0.06862169, -0.03813064, -0.056079865, -0.057463676, -0.015380563, 0.022527866, -0.05910095, -0.028395556, -0.0068190247, 0.004421149, -0.03114076, -0.03903121, 0.025537811, 0.059355997, -0.037888274, 0.07599094, 0.062384926, 0.07568265},
   {0.046400063, -0.08272355, 0.0687676, -0.0029542067, 0.08787656, 0.06630845, -0.018268347, -0.07126837, -0.07794531, 0.064069696, 0.07080511, -0.096447185, 0.007139139, -0.077043846, -0.046804126, 0.046697013, -0.04867656, -0.04791997, 0.041242845, -0.085583605, -0.047848716, 0.06720468, 0.017326782, -0.09115047, -0.00044659636, 0.050918315, -0.048736684, 0.09040144, 0.044758566, -0.008808933, 0.044553004, 0.051864706, 0.05763007, 0.0323052, 0.06065397, 0.083595164, -0.053380083, 0.0066974363, 0.07410918, -0.0050689355, 0.017172448, -0.058823314, 0.04637908, 0.028704591, 0.009791657, -0.020356052, 0.039334346, -0.064213514, 0.08908427, 0.0442174, 0.023192458, -0.057951473, 0.076913394, 0.06545641, 0.06687597, 0.018998502, 0.003918949, -0.010563993, -0.057491213, -0.09042179, 0.061777666, -0.025523663, 0.06042027, 0.052090053},
   {-0.024785984, -0.0022826707, -0.09298283, -0.027176421, -0.026195899, 0.020215105, -0.079482414, -0.09342502, -0.005395714, 0.018259663, -0.0077769235, -0.04135013, 0.09263531, 0.017613133, 0.0005566627, 0.07001076, -0.06093834, 0.045647122, -0.013879545, -0.037299413, 0.0466171, 0.0021685509, 0.07368591, -0.068413734, -0.016511932, -0.00087681995, 0.0742009, -0.07259558, -0.036295295, -0.076215476, 0.07352742, -0.035424806, -0.071090356, -0.016042994, 0.0575011, -0.07565325, -0.056920603, -0.049840398, 0.06982546, -0.019983828, 0.038012184, -0.052571744, -0.025572658, -0.041601516, 0.0031508573, 0.07749271, 0.066988714, 0.042343386, 0.02602583, 0.0042870725, -0.008570498, -0.038225397, 0.03978255, 0.05020728, 0.080610566, -0.014179621, 0.024900103, -0.037688028, 0.09319242, 0.01351024, -0.06548, -0.06753215, -0.060135882, -0.0107085295},
   {0.05619542, -0.00078807434, 0.015220327, 0.05222782, -0.08480521, 0.08335037, -0.05175293, -0.05047554, 0.019567093, -0.029889446, -0.06275125, -0.08465845, 0.049140938, -0.018953519, -0.08900796, -0.056487795, -0.0010508472, -0.02137284, -0.057590354, -0.04255785, 0.057056114, -0.04338509, -0.08987918, 0.05196408, -0.022265166, 0.022889888, 0.007808123, -0.084702164, -0.09225241, 0.049368404, 0.03252362, 0.011111697, 0.025861174, -0.037405968, -0.08832678, -0.055475544, 0.059443973, 0.017259628, -0.072886266, -0.050778758, -0.059275467, 0.019770376, 0.077538304, 0.0061049983, 0.02824749, -0.07565738, -0.046678934, -0.0030873322, 0.08113342, 0.07157077, -0.030281356, -0.07446356, -0.07037293, -0.026334316, 0.077453084, 0.044258177, -0.030022066, -0.02337451, -0.054790013, -0.08788611, 0.022808783, 0.0897195, -0.007035989, 0.08506784},
   {-0.049713995, 0.08980562, 0.0065827686, 0.044322934, 0.07974953, -0.022427268, 0.052624516, -0.002254957, 0.05197158, -0.030893598, -0.024017043, 0.03517165, 0.007506378, -0.005578716, 0.06476299, 0.01823067, 0.07521101, 0.035480596, 0.039536946, 0.061165627, -0.09562692, -0.027597327, -0.008337749, -0.06112386, -0.006225686, -0.0017104414, 0.029845629, -0.03072893, -0.007307701, -0.0076537356, 0.03292492, 0.040326647, -0.02809769, 0.019937122, 0.056383476, 0.08947637, -0.02939393, 0.019048471, 0.0009388814, 0.022957087, 0.05877814, -0.060857765, 0.062642306, -0.07579733, -0.029078292, -0.060270995, 0.053415664, 0.044493455, -0.021814846, 0.028746836, 0.087175034, 0.084745936, 0.06518983, 0.065431796, -0.08789712, -0.09132909, 0.07154092, 0.07081781, 0.029272579, 0.042570017, -0.0075232466, -0.0049441904, -0.05771526, -0.027202848},
   {-0.08259816, 0.037238058, -0.037034158, -0.0479889, 0.068518296, 0.026056888, -0.09113857, -0.03976025, 0.08344357, -0.015376041, 0.083785795, -0.029493943, -0.075697474, -0.0023110455, -0.023361214, 0.09044879, -0.029626608, -0.08237382, 0.07893995, 0.07489751, 0.016217628, -0.05405656, -0.08416582, 0.027644567, 0.055599064, -0.075748555, 0.07933684, 0.0059429533, 0.052359886, 0.0415281, 0.088193744, 0.030686013, 0.044501282, -0.03386856, -0.08272344, -0.014214764, 0.050333474, 0.032858633, -0.06498421, 0.031358495, 0.009351197, 0.018663697, 0.03612774, -0.07175361, -0.044984847, 0.071476616, -0.070851155, -0.06958677, 0.063405715, -0.050953556, 0.051851854, -0.043400086, -0.04578335, 0.0006118417, -0.029413238, 0.038727816, 0.0037906559, 0.071226, 0.072734825, 0.053370114, -0.060328644, 0.01629547, 0.062273826, 0.05963865},
   {0.06492089, -0.0070749633, 0.04049742, -0.037833154, -0.08140564, -0.092089996, -0.010288304, 0.049450736, -0.0058702086, 0.07398898, -0.07399066, 0.020132119, 0.001827538, 0.045502383, 0.031232499, 0.029311068, 0.074598655, -0.007803336, -0.041058112, -0.019134637, -0.049249787, 0.041944172, -0.08011959, 0.048910268, -0.04961511, 0.08697244, 0.047182377, 0.044778563, 0.045003824, 0.04149369, 0.022361578, -0.02011255, 0.032080956, 0.07625546, -0.08026732, 0.057312164, -0.08970293, -0.05149148, 0.034311764, 0.0749047, 0.005747882, -0.075375065, 0.0926932, -0.028909594, -0.04279997, -0.08076401, 0.068968, -0.08304548, 0.090353176, 0.05427742, 0.07434981, 0.03538979, -0.054153558, -0.028782152, -0.05433518, -0.05504943, 0.04563564, 0.023843043, -0.067271486, 0.062383126, 0.02327225, -0.08957677, -0.07948337, -0.00536529},
   {0.04962819, -0.07000852, -0.10096039, -0.0051369197, 0.01281861, 0.07619116, 0.021526406, -0.00359055, 0.04165791, 0.07970805, 0.06307129, 0.030162424, 0.036574878, -0.061133355, 0.02581855, 0.044096835, 0.0753297, 0.0034196824, -0.08376533, -0.01924738, -0.028117655, -0.056295265, -0.081861116, -0.082547024, -0.029866228, 0.069024794, 0.08070516, 0.03835899, 0.022264302, -0.06383801, -0.038876276, 0.010380043, -0.022968099, 0.07364884, 0.061266374, 0.0077168224, 0.034877524, 0.047015913, -0.024763245, -0.057909533, -0.080089845, -0.07553562, -0.030506864, -0.088787965, -0.040203504, 0.06943364, 0.060473464, -0.059201896, 0.05865052, 0.045066185, 0.04945598, 0.055307634, -0.02676073, -0.09033953, 0.078577556, -0.087844506, 0.07935502, -0.043730453, -0.069895506, 0.081009075, 0.036616366, 0.010828793, -0.050102174, -0.07561143},
   {0.033801433, 0.011454637, -0.02215018, 0.05183188, 0.027092602, 0.060402017, 0.0139600085, 0.06545201, -0.0019422829, -0.07660225, 0.018561132, 0.022019118, 0.09037926, 0.08326606, 0.051167615, 0.078263514, -0.080486655, 0.020547166, 0.037951432, -0.07618662, 0.036781434, -0.017519226, -0.0651874, -0.08342773, 0.042633925, 0.009092451, -0.042850815, -0.012177641, -0.04265277, -0.022423409, 0.06828844, 0.06170005, -0.021707796, 0.08291515, 0.02040349, 0.053750735, 0.06967949, 0.00029028312, 0.022906013, 0.019664072, -0.012241302, -0.070317835, 0.041706007, -0.01478456, 0.07062058, -0.0018132759, 0.022792064, -0.08921007, -0.026998537, -0.039816372, 0.0023671077, -0.08314465, 0.06422303, 0.036913387, 0.03222137, 0.055726167, 0.0015355763, 0.029010352, 0.0098839775, -0.09342372, 0.018248336, -0.013596535, 0.04645295, 0.03033594},
   {0.0047093187, 0.09237056, -0.046701852, 0.053772055, -0.04723976, -0.07496413, 0.046681393, 0.020466998, -0.010395889, -0.049114015, -0.067406915, -0.07150707, -0.044028036, 0.084027715, 0.047563918, 0.05691833, 0.0022890684, 0.043063037, 0.030561365, -0.051396795, -0.006016398, 0.06409244, -0.013793446, -0.0629453, 0.07506971, -0.011295603, 0.01153179, 0.04219692, 0.092205025, 0.04690785, -0.06574121, -0.064169645, -0.008941181, -0.07832322, -0.08917168, 0.08737185, 0.074991226, -0.051358253, 6.46913e-05, -0.090520345, -0.033407126, 0.038089193, 0.0024773448, 0.058254056, 0.07295343, 0.03411321, -0.010611079, -0.03174511, -0.009571073, -0.036633678, -0.00018268995, -0.028211199, -0.06967327, 0.028965436, -0.022451125, -0.08331051, 0.01859113, -0.08501769, -0.031677827, 0.08900319, -0.05797187, 0.025622934, -0.06291771, -0.046595927},
   {0.067455806, -0.0037613087, 0.03173371, -0.049837507, -0.022268001, 0.035520814, -0.05763649, -0.03874475, 0.09551071, 0.027468292, 0.0032489672, 0.04447606, 0.00979393, -0.0707202, -0.0756435, 0.089012586, -0.030035138, 0.028791383, -0.09142282, 0.08744993, 0.022826836, 0.083910406, -0.061134133, -0.051350575, 0.06401783, -0.069405556, -0.015352244, -0.090796836, -0.087252796, 0.023701243, 0.07513419, 0.021958223, -0.044401392, -0.06321798, 0.052459486, -0.055872396, 0.06260091, -0.07203291, 0.0032087069, 0.07230676, -0.060590435, 0.0850059, 0.0526774, -0.09014127, 0.016854702, 0.066770576, 0.0244292, -0.008128043, 0.036909774, 0.039092496, 0.01836026, -0.08816709, -0.09012419, 0.05226978, 0.049545325, -0.0016983043, 0.09152584, 0.08606458, -0.03581588, -0.06715466, -0.06817572, -0.03845149, 0.07359457, -0.0162226},
   {0.090096585, -0.011449486, 0.084823765, 0.04589181, 0.017852593, 0.07459095, 0.06646374, -0.071592174, 0.06650647, 0.066218846, -0.08366178, -0.04121766, 0.05554869, -0.025865, -0.069967635, -0.0834115, 0.032932904, -0.03283677, 0.0690717, 0.03214767, -0.09972652, 0.042424724, -0.00014585826, -0.06694314, 0.08432278, 0.031112062, -0.013429676, -0.04662338, 0.03809444, 0.06506278, 0.083669, 0.053154416, 0.043669946, -0.031793676, 0.05039146, 0.072531305, 0.07430638, 0.004896004, -0.07171653, -0.01736866, 0.030856727, -0.018672086, -0.027786532, -0.09219501, 0.058925547, 0.064831056, 0.023948994, -0.019747468, -0.0513987, 0.046669986, 0.04567387, -0.052338377, -0.07518845, 0.08608476, -0.06716293, 0.055302076, -0.026097007, 0.043617442, 0.052773677, 0.07564103, -0.00522347, 0.028726391, 0.008452636, -0.066636294},
   {-0.05614475, 0.098529555, -0.10083657, 0.045938466, 0.030339966, -0.040130414, 0.021539642, -0.05874233, 0.030334486, -0.0010020095, 0.0055230334, 0.082143925, 0.010281317, -0.013872758, -0.05859925, -0.07905219, -0.062164903, -0.04460499, -0.043639194, 0.031507425, -0.020939216, 0.06247572, -0.06700162, -0.0014324635, 0.08210635, 0.054308683, -0.08332636, -0.024892785, -0.086682566, 0.03660702, -0.014572472, 0.021952324, -0.037398744, 0.09272824, 0.032897457, -0.06323309, -0.0075094346, -0.07394335, 0.052381955, -0.019403271, 0.051365796, 0.049497522, -0.0504864, 0.08231268, 0.05840696, -0.052046493, 0.032299623, 0.022774614, -0.03772337, -0.027136913, -0.06513532, -0.057555757, 0.08066969, -0.06215462, 0.04889985, 0.08504062, 0.046984673, 0.0708538, 0.03851319, 0.078345254, 0.07712565, -0.0071710944, 0.059730478, 0.03196521},
   {0.0009761177, 0.029387707, 0.04148709, -0.067338884, -0.08721529, 0.028515924, 0.090077356, -0.008133885, -0.006845018, -0.08897201, 0.03361296, 0.05329382, 0.067082934, 0.0902219, -0.045648456, 0.0035272315, 0.079146035, 0.06731158, 0.049920715, -0.036689106, 0.049685508, 0.034786355, 0.01703359, 0.036078952, -0.0033699125, 0.07500076, 0.039454944, 0.07301167, -0.08800919, 0.003467761, -0.0355955, -0.03385801, -0.050970964, 0.019995188, -0.0764248, -0.03428784, -0.079159185, 0.026449786, 0.036989212, 0.053721942, 0.04586372, 0.029613279, 0.016489439, -0.06827395, -0.0006650123, 0.081573375, 0.030023258, -0.023863662, -0.012848004, -0.04213296, -0.03388465, 0.008256346, -0.0120136095, 0.037447847, -0.08966521, 0.055450346, 0.00949914, -0.031544816, -0.07182507, 0.07797692, -0.07075818, -0.01258827, 0.060625434, -0.02028629},
   {0.062525526, -0.023025462, 0.07505801, 0.013615719, 0.086025484, -0.015237863, 0.013543513, -0.027944952, 0.050365828, 0.046825357, 0.0015543029, 0.07785102, 0.07847514, -0.0851761, -0.03779689, 0.005720675, 0.06425854, -0.048114713, -0.008308269, 0.08088018, -0.0020379932, 0.06591872, -0.035855856, 0.06938163, -0.092764124, -0.083365075, -0.010472176, -0.039122857, -0.019625336, 0.06439031, -0.0696964, 0.05293981, -0.091895804, 0.07900336, 0.06391831, -0.07349241, -0.06330001, -0.0759016, 0.048181627, 0.03385923, -0.039783273, -0.09146198, 0.039626393, 0.08296577, 0.051212396, -0.021502668, -0.09785085, -0.08389452, 0.018956691, -0.054858252, 0.030316638, -0.035038505, -0.031420074, 0.018125452, 0.03874994, -0.040751368, 0.015745161, 0.06113039, -0.05372986, -0.013437475, 0.033239994, 0.051375486, 0.038153343, 0.06553795},
   {-0.04570494, -0.043848876, -0.07208496, -0.059947334, -0.0010438262, 0.073479384, -0.027687047, -0.018912932, 0.0067876694, -0.02430328, -0.054115783, -0.058784466, -0.06368874, 0.0033967611, -0.042869475, -0.05170462, -0.0609721, -0.018488951, -0.07888268, -0.080437936, 0.020411115, 0.08521579, -0.035875473, 0.0841982, -0.04456738, 0.0715057, 0.09068889, -0.085907534, 0.051210113, 0.07919978, -0.045095187, -0.094502784, -0.071086414, -0.059563283, -0.024491657, -0.094138734, -0.054986127, -0.01533025, 0.07500334, 0.05422438, 0.01392346, 0.09297519, 0.031060867, 0.024581984, 0.09023599, -0.060929626, -0.03132608, 0.038511667, 0.026190327, -0.05886501, -0.08507009, -0.040506855, 0.05820808, -0.03419221, -0.09093947, 0.028325194, 0.08562929, -0.0025347893, 0.08556626, 0.0333022, -0.0109652905, -0.0679181, -0.0746095, -0.01120088},
   {0.06552052, 0.0194209, -0.051120315, 0.050125655, 0.052311976, 0.088516645, -0.07421182, -0.08551214, -0.062378887, 0.091730535, -0.0012057051, -0.05798269, 0.012029223, 0.01306241, 0.085212894, 0.009287238, 0.0484015, -0.034979012, -0.08375324, 0.0055806544, -0.100318335, -0.0059488863, -0.0617384, -0.031592328, -0.026535388, 0.065992415, 0.08671603, 0.00402467, -0.088718235, -0.049054388, 0.06070903, -0.041989718, -0.06575672, -0.018911762, -0.09153433, -0.0450478, -0.05659566, -0.015745632, -0.077124864, -0.06275098, 0.033689134, -0.071741596, 0.0616803, -0.0066951886, -0.08967454, -0.08837082, 0.0016287533, 0.088613994, -0.03266676, 0.071085855, -0.06730042, 0.034848012, -0.038954467, 0.08643914, 0.032898314, -0.053786937, 0.026330901, 0.085666694, 0.08671004, 0.04279778, 0.0429504, -0.06691502, -0.01604902, 0.05223477},
   {-0.07758828, 0.028990055, -0.020001482, -0.065193206, -0.017673457, -0.044394363, 0.060204234, 0.065379225, 0.057751194, 0.042144135, 0.07178999, 0.07146267, 0.0016403124, 0.022006297, 0.08300259, -0.059567023, -0.05890559, -0.073268086, 0.000680767, 0.06448484, -0.090200424, -0.019605372, -0.02595173, 0.042655326, -0.00050764316, 0.063402615, -0.013340215, -0.017371936, -0.085633114, -0.0150163025, 0.03392926, -0.016686227, 0.011390261, -0.05492544, -0.035052776, -0.03760002, -0.05359188, 0.05750714, 0.057376593, 0.018686973, 0.020757351, 0.08511331, -0.09481598, 0.034513213, -0.06791064, 0.010661654, 0.073969506, 0.056883004, 0.029717641, 0.030138256, 0.03863961, -0.039857924, 0.0087126065, -0.020799004, -0.052364983, 0.047514457, 0.09412874, -0.08868884, 0.0472505, 0.0474702, 0.049498565, 0.069363095, -0.058332603, -0.09737072},
   {-0.019940276, 0.07651379, 0.04771426, -0.08653406, -0.050348226, 0.08251637, -0.08758364, -0.021195278, -0.060482014, -0.081428654, -0.012141332, 0.028327944, -0.006348841, 0.07842805, -0.0086073205, 0.03710925, 0.08708926, -0.09159425, -0.059477694, 0.032719616, 0.050488155, -0.0097646145, -0.07008724, 0.044491388, -0.07989968, 0.048239607, -0.023891835, -0.08795277, -0.059663538, 0.03855089, -0.089988336, -0.01097282, 0.023136325, -0.086418785, -0.033395894, -0.034709703, -0.0052968254, 0.05987259, -0.086169854, 0.067065336, -0.02552313, -0.06559831, 0.034034126, 0.059480615, -0.075044796, 0.033961203, 0.0014711822, 0.065910734, 0.0019909958, 0.07423014, -0.020518523, -0.059212558, 0.052585285, -0.08600046, 0.09272168, 0.050965868, 0.045950912, 0.056248594, -0.03587061, -0.021227617, 0.055740274, -0.0670564, 0.049062178, -0.082256414},
   {0.016280735, -0.070186675, 0.055494197, -0.0447477, 0.027888233, 0.0056487527, 0.009546748, -0.0230219, 0.048596743, -0.07062895, -0.030190118, -0.019183438, -0.08353361, -0.012771914, -0.0835015, 0.009709075, -0.0013208879, -0.015431836, -0.0072662085, -0.034362413, -0.0733158, 0.06010298, -0.054650962, -0.0799766, -0.0014489917, 0.08022327, 0.047981597, 0.067946404, -0.025564998, -0.011595659, -0.0551561, -0.09476483, 0.008603625, -0.036446236, -0.015134191, 0.04831647, 0.036918495, 0.0643662, -0.027113346, -0.08383281, -0.019923901, 0.071268015, -0.039270338, -0.061834686, -0.013914514, -0.019179337, 0.05848356, -0.045963705, -0.03604768, 0.06359388, -0.010202253, -0.08052223, 0.010393336, -0.01499071, 0.053878747, 0.009344939, 0.0427546, -0.056757223, -0.0840456, -0.05448031, -0.054561313, 0.0681515, 0.06382531, 0.028032552},
   {0.071247116, -0.0667344, -0.07436406, 0.019496849, 0.05607055, 0.060987078, -0.06804095, 0.032616552, -0.0044888956, -0.003952698, -0.042592634, -0.034797914, 0.09118136, 0.08719748, 0.058553122, -0.05496064, 0.04312169, -0.00035704672, 0.064265914, -0.0536743, 0.022464944, -0.0042364546, -0.015768599, 0.014095336, -0.03563432, 0.024634745, -0.06868366, -0.041435614, -0.00054151565, -0.08668076, -0.040429223, 0.013230249, 0.08636721, 0.027579254, -0.020266311, 0.07304377, -0.045983188, -0.079683766, -0.0706219, 0.06604346, -0.08150671, 0.06528022, 0.049013484, -0.057402752, -0.04221786, -0.03943001, 0.073458195, -0.083947614, -0.010064567, -0.09789659, -0.08618456, -0.059346896, 0.03426065, 0.085287966, 0.06607277, 0.045308482, 0.04494403, 0.038540017, 0.06663845, 0.0022920864, -0.075092085, -0.03180202, -0.044749852, -0.08369048},
   {-0.08492903, -0.040901676, 0.0660096, 0.047892816, 0.07019778, -0.0076258075, -0.08295107, -0.08413207, -0.050912227, -0.045458335, -0.037304655, -0.02144188, 0.057969205, -0.052647762, 0.007999815, -0.031439856, -0.038845982, -0.0755277, 0.050179534, -0.0742603, 0.07664821, 0.0734321, 0.08123074, 0.057777442, -0.0075245127, -0.08970752, 0.08447205, 0.0411825, -0.026585065, -0.07076063, 0.021989841, 0.025520388, -0.06754966, -0.05954717, 0.07230131, 0.08290426, 0.021872759, -0.065943405, 0.055925556, 0.00812681, 0.054566845, -0.050920572, 0.049588997, -0.078433454, -0.068463825, -0.0424376, 0.033494312, 0.053864356, 0.03844784, -0.057949446, -0.09960677, 0.042750157, -0.06450519, -0.07766231, 0.07142419, 0.062229957, 0.066425525, -0.030698037, -0.023403488, 0.014205931, -0.011287071, -0.07355109, -0.031086348, 0.022789162},
   {-0.04200447, -0.011590445, -0.029131606, 0.05130651, -0.03687714, -0.036140125, -0.048681956, 0.046962645, 0.018820254, -0.07787218, -0.072357446, 0.018503755, 0.040283494, 0.0039150054, 0.0051000193, -0.04957659, 0.028991152, -0.015215717, -0.08878356, -0.047715846, -0.099527694, -0.050106082, -0.09252885, -0.09270689, -0.033389885, 0.047868572, -0.04624953, 0.021294435, 0.087296985, 0.019417949, 0.024413267, 0.06191049, 0.0676244, 0.002876677, -0.013529871, 0.077564225, 0.055783737, 0.06474231, 0.069492795, 0.018042378, 0.05499411, 0.0019020066, 0.0904203, -0.043734975, 0.09415873, 0.081990235, 0.031606458, 0.010498838, 0.03324167, 0.014500792, -0.03262524, 0.05289074, 0.085274756, -0.054830614, -0.07260783, 0.080456235, 0.048394546, 0.09017872, 0.020739019, 0.030935239, -0.0055452045, 0.042011134, -0.04918256, 0.08411153},
   {0.033159472, 0.0038014592, -0.06291381, 0.06028419, 0.073327675, -0.07428215, -0.026571365, -0.068505585, -0.023186943, -0.0729866, -0.06050906, -0.018036079, 0.008924499, -0.02366969, 0.06885638, -0.004703149, 0.01357531, 0.039536603, -0.05100425, -0.06884281, -0.049478788, -0.051196422, -0.037982754, -0.024574287, -0.042388197, 0.005217268, 0.040196247, 0.028223611, 0.022847243, 0.010966353, 0.062196985, 0.015039582, -0.07248844, -0.035082467, -0.05041778, 0.021432413, -0.023344023, -0.012233677, 0.0017640883, 0.039614372, 0.028047275, 0.038241945, -0.03576613, -0.07407383, -0.0133511145, -0.079929486, -0.0036859543, 0.03601974, 0.08323878, 0.058425747, -0.025005445, -0.029269911, 0.04987208, -0.061709914, -0.050909802, -0.009146827, 0.02170149, -0.061558563, 0.010192856, -0.0010913973, -0.055026233, 0.007307723, -0.07304705, -0.045820624},
   {0.059680466, -0.050925132, -0.060162347, 0.056446753, 0.03056303, 0.058641333, 0.07908757, -0.048181344, -0.048848394, -0.039635383, 0.06670997, 0.022637134, -0.029431634, 0.060134355, -0.007625386, 0.019043528, 0.08590831, 0.05544392, -0.08311649, 0.078407004, -0.030354852, -0.0410012, -0.086848855, -0.06082379, -0.085808106, 0.0780431, -0.08197863, 0.0596578, 0.046081, -0.08489904, -0.04829726, 0.07059119, -0.06780265, -0.09240329, -0.006096145, 0.014427269, 0.015560918, -0.044981044, -0.05596962, 0.08628803, -0.054053135, -0.013117544, 0.020280542, -0.06300014, 0.029588757, 0.049784567, 0.05278552, -0.08691786, -0.0061957804, -0.03479003, 0.022363717, 0.023914605, -0.048023324, -0.0158199, -0.06692254, -0.060135692, 0.021191599, 0.07993748, 0.048833497, -0.06765195, -0.026417142, -0.014351703, 0.002574883, -0.04758673},
   {-0.013504941, -0.04438685, 0.05558655, 0.0045337114, -0.001821468, 0.0008551063, -0.093204446, -0.076615326, 0.08052957, -0.07211667, -0.043860637, 0.013550608, 0.06353878, 0.018347993, -0.011321425, -0.05783716, -0.0662927, -0.035070546, -0.06881095, 0.03884282, -0.034177206, -0.04599216, 0.0061108894, 0.09307376, -0.0130023975, -0.05195826, 0.086512014, 0.08555974, -0.047151674, -0.09015629, 0.051283915, -0.020743188, -0.033195574, -0.050998446, 0.08408103, -0.050885517, 0.004252105, -0.0094636595, 0.031190287, 0.015040748, 0.07430268, -0.03505726, -0.040333636, -0.062207885, 0.027637202, 0.035607826, 0.0035205379, -0.026637401, 0.026915055, 0.0475046, -0.09779994, -0.034318604, 0.026833238, -0.05338756, -0.033919126, 0.062841065, -0.030594902, -0.04192554, -0.055934623, -0.07264497, -0.062327303, 0.016034178, 0.05486564, 0.081976816},
   {-0.08918226, -0.0743475, -0.051021628, -0.011557223, 0.07096991, 0.068936326, 0.041015226, 0.0004903684, 0.04823364, 0.053765304, 0.091208436, -0.032171093, -0.05181099, 0.03993954, -0.08242871, 0.0027971417, 0.02906376, -0.002499275, 0.09057706, 0.051211886, -0.09400481, -0.04740273, -0.020078693, -0.021083966, -0.06976263, 0.022238458, 0.07753804, 0.06557428, -0.0026607737, -0.011569411, 0.0619849, 0.076403625, 0.092759065, 0.08998284, -0.011013273, 0.0017175922, 0.00064962293, -0.05380326, 0.02690531, 0.068482704, -0.08969475, -0.07680617, -0.04521193, 0.032595433, 0.016049743, 0.031588685, -0.02401285, -0.05966494, -0.0541177, 0.0374219, -0.021040905, 0.055507742, 0.03187133, -0.08531439, -0.021939091, 0.06108554, -0.08052114, -0.03446099, -0.03674414, 0.04444276, -0.08599861, -0.02554039, -0.03517999, 0.03942628},
   {0.053668942, -0.008588021, -0.095463276, 0.0062563037, 0.033309035, -0.0072339554, -0.03004206, -0.080594815, 0.027746044, -0.014955968, 0.08289633, -0.032554165, -0.08744334, 0.058753967, -0.043845307, 0.020579651, -0.073541686, -0.032490667, 0.040918656, -0.042201143, -0.026874682, 0.05977013, 0.042592514, 0.06762137, 0.073476434, -0.07270901, 0.06632394, -0.0352955, -0.06690131, 0.070771955, -0.0925607, 0.08366427, 0.08778452, -0.027692065, -0.05976956, -0.08555725, 0.037557945, -0.0039890497, 0.07798936, 0.04164181, 0.016752688, -0.056086916, 0.022701124, 0.077731214, 0.039034944, 0.040379018, -0.00952115, -0.033486925, -0.024135226, -0.034315594, 0.055342235, -0.05348145, -0.08627395, -0.0709788, 0.03384859, -0.006711132, 0.031038051, 0.07093324, -0.0022133514, 0.0023002995, -0.031865627, 0.057436816, 0.054946274, 0.014328465},
   {-0.024559733, -0.03566215, -0.05062352, -0.016007062, 0.05831917, -0.027723432, 0.09792133, -0.06203247, -0.013267401, -0.08406588, -0.06428948, -0.061934095, 0.05194942, -0.051739465, -0.062790096, -0.06384384, 0.052979358, -0.00960426, -0.0052997023, -0.06792521, 0.02069894, 0.08822665, 0.03225387, -0.04350363, 0.08441021, -0.0841709, 0.051872198, 0.087252736, -0.08428488, 0.056182213, 0.025941944, -0.08865206, 0.07072703, -0.014709861, -0.023380548, 0.025856404, 0.04667249, -0.044146307, 0.04794437, -0.016936101, -0.08057509, -0.04338747, 0.047405165, -0.08540133, 0.06437363, -0.04834162, -0.0007789659, 0.06862504, -0.02712354, 0.06148387, -0.06689341, 0.065097086, -0.008174424, -0.086857215, 0.062906615, -0.033757683, 0.0019803129, -0.05854442, -0.07472692, -0.038915392, -0.028813839, -0.051771075, 0.08209497, 0.0632336},
   {0.046986535, -0.0546035, -0.053479064, -0.054718908, 0.05685838, -0.0166146, 0.047998287, 0.053922612, 0.028613776, -0.08432378, 0.08589434, -0.005016356, 0.07906938, -0.023745278, 0.006421417, 0.034069933, -0.008972705, 0.06214831, -0.08015613, -0.09692718, 0.01378514, -0.07120978, 0.052760996, 0.03918492, -0.018579487, 0.09352009, 0.045361683, -0.08569584, 0.00076108426, 0.0011416525, 0.08375282, 0.05156269, 0.000650242, 0.032088686, -0.045056947, -0.08405406, 0.07062181, -0.015856646, -0.05624837, -0.061271615, -0.03239283, 0.05286149, -0.02776171, 0.028886274, -0.0678387, -0.03451535, -0.0139723215, -0.015169091, -0.050010502, 0.024787832, 0.034497213, 0.07718787, -0.04516814, -0.06939882, 0.036151104, -0.045924876, 0.0011480633, 0.016202383, -0.05958253, 0.06655101, -0.012699798, 0.05036936, -0.05109509, -0.023533158},
   {0.045934692, -0.028668722, -0.0398648, -0.064878926, -0.069136515, -0.05071977, 0.022982404, 0.02405864, -0.008003125, -0.007857459, -0.010058649, 0.02847829, -0.036587533, -0.086645655, -0.039320573, 0.011608474, 0.02201914, -0.049347717, 0.027472764, 0.016715592, 0.021736447, -0.0077395993, -0.064779334, -0.011916801, 0.026096573, 0.064154826, 0.07809923, 0.09319291, -0.06471359, -0.063019186, -0.057986684, 0.06960472, 0.08641002, -0.08528735, -0.015648754, -0.017310694, -0.020324614, -0.05662965, -0.045035165, -0.078779995, 0.078900315, 0.08942989, 0.02372311, -0.017951287, -0.022169754, -0.089638695, -0.061884873, 0.08124307, 0.012662888, -0.069121756, -0.065947466, 0.0012614131, 0.025566293, 0.08607153, -0.08085118, 0.0085063875, -0.06786565, 0.04620978, 0.011123739, -0.04570898, -0.014574351, 0.03117071, 0.011517092, 0.05157396},
   {-0.057928838, -0.07937216, -0.031460542, 0.06521757, 0.03532431, 0.020515045, 0.06781927, 0.008347433, -0.03571733, -0.043134287, 0.029056303, 0.029424613, -0.03743403, 0.07611052, -0.03787044, 0.052246086, -0.060438283, 0.036285482, -0.05781253, -0.019597517, 0.08312573, -0.036415152, 0.049148086, 0.016167454, -0.08756235, -0.038052086, 0.043932475, 0.06204835, 0.030362032, -0.08470943, 0.084729895, 0.0662589, -0.043000452, -0.066847, 0.012900362, 0.07282191, 0.08251999, 0.007863353, -0.049655516, 0.0026028603, -0.08221191, 0.042731903, 0.041963026, -0.016421288, -0.0593973, -0.0795851, -0.043260794, 0.06845901, -0.030578734, -0.019770943, -0.022425, 0.00051406026, -0.016296016, -0.018043712, 0.039367788, 0.037238363, 0.023542652, -0.027382141, 0.06893996, -0.04408343, 0.07092919, 0.065446, -0.00018651386, 0.07160336},
   {-0.039419603, -0.040223707, -0.052654803, 0.050976258, -0.05603446, 0.044907108, 0.01093994, 0.035725098, 0.09049014, 0.074843824, -0.05280613, -0.06949934, 0.08440297, 0.020883946, 0.061991267, 0.038635246, -0.004391378, 0.0075915083, 0.041948937, 0.056473695, 0.007927201, -0.008693295, 0.029204011, 0.013181955, 0.07668959, 0.056434873, 0.08006962, 0.0023616357, -0.0740374, -0.04539371, -0.06408853, -0.0023247104, 0.012104534, 0.0734628, -0.063580416, 0.030274458, -0.078406386, -0.08508654, -0.07562495, 0.01602526, 0.07278789, -0.025231227, -0.014275289, 0.032134347, 0.049489707, -0.046602864, -0.050885577, 0.042993978, -0.048971243, 0.015760593, -0.033163525, 0.053308465, 0.06342424, 0.075350724, -0.011101693, 0.035276756, -0.046730533, -0.07135053, 0.015921533, -0.029560946, -0.088656805, 0.04123711, 0.00063109095, -0.04551241},
   {-0.016573811, 0.07521395, -0.02247808, 0.014100589, -0.08263562, 0.0034841548, -0.02287027, -0.07609072, -0.062940076, 0.056612816, 0.09091624, -0.027381156, -0.009379663, -0.002543836, 0.008487552, -0.08227848, 0.027819041, -0.0064618886, -0.049374837, 0.012650645, -0.09820505, -0.060615383, -0.088772446, 0.004025981, -0.039523114, 0.030217974, 0.08183671, -0.049463812, -0.071043074, -0.004623875, -0.03799245, 0.07435958, 0.084871, -0.06721153, 0.011301658, 0.07491413, 0.0433209, -0.033326857, 0.07493818, -0.019515447, 0.067527905, -0.03245678, 0.010385735, 0.06870922, -0.063654825, -0.06457103, -0.012811109, 0.04796969, 0.03024413, -0.026963973, -0.017814388, -0.03076601, -0.014303407, -0.04775388, -0.0061183274, -0.07184026, -0.048132945, -0.04746368, -0.05115343, -0.08588389, -0.07525044, 0.028620668, 0.025311388, 0.06337502},
   {-0.042393316, -0.02065015, -0.092755504, 0.06379303, 0.023482531, -0.08552514, -0.04614394, 0.047076564, -0.04689204, 0.06437305, -0.06688304, -0.0013699749, 0.03195066, 0.037184067, 0.017160773, -0.012531936, -0.08993131, 0.026905619, 0.023483984, -0.044182748, 0.029226298, 0.067684636, -0.025011025, -0.03805971, 0.0099084405, 0.026143126, 0.049435753, -0.0145729175, -0.088088706, 0.012640394, 0.085543945, -0.03167844, 0.065703966, 0.055526156, -0.08402647, 0.052638795, -0.05408429, -0.058961876, -0.0067394297, 0.051886074, 0.029493064, -0.025805488, -0.03554517, -0.054696035, -0.056074567, -0.044238552, -0.02761749, -0.09095793, 0.012456861, -0.040452767, 0.05097708, 0.012305066, -0.0014160499, 0.020112135, -0.030347176, 0.034627903, -0.003084412, -0.07492769, -0.001970306, 0.03454346, -0.080194205, 0.07395793, 0.038561996, 0.03949857},
   {0.057390038, 0.03049173, -0.028579919, -0.033311717, 0.080260634, 0.043461196, -0.08636279, 0.0551846, 0.021025324, -0.00114894, -0.04630237, -0.0341915, -0.07679676, 0.023762146, 0.04618994, -0.065564536, 0.050031643, -0.06894332, -0.06992269, 0.06710452, 0.020215293, -0.0676574, -0.008938688, -0.033750102, 0.03213114, 0.005783735, 0.016254447, 0.08811188, 0.0043301433, 0.038456358, -0.011553667, -0.049541038, -0.042423587, 0.065690815, 0.04778165, -0.05468666, 0.0139181055, -0.078212865, 0.044350646, 0.04032778, -0.030393297, 0.014910325, 0.037000842, 0.030818246, 0.007045198, -0.04942532, -0.051211648, -0.08862732, -0.06687314, -0.0033028375, -0.093795605, -0.039313987, -0.032068036, -0.09049037, -0.0066691563, 0.0739201, 0.01007571, -0.06987784, -0.048023738, -0.08652885, 0.0029461316, 0.081039734, -0.0498824, 0.049132515},
   {0.014914602, -0.082888246, -0.089785114, -0.088630535, -0.019240567, 0.02682986, -0.08061951, 0.08157564, 0.022961425, -0.09014521, 0.05986967, -0.025336822, -0.05733516, 0.013217454, -0.028670527, 0.09170482, 0.033657458, -0.058152646, 0.055727534, 0.05460967, -0.071375534, -0.06778716, 0.042007368, -0.0067774877, 0.028367203, 0.017079553, -0.069011405, -0.08448797, -0.06749433, -0.08173219, 0.053832207, 0.034896687, -0.07977532, 0.041786484, 0.03395902, 0.026810383, -0.09552977, -0.042333014, -0.04130982, 0.004018709, 0.01780068, -0.03925049, -0.009282647, 0.013627954, 0.0882655, 0.0015334286, -0.042384844, -0.018449422, 0.08468928, 0.072305635, -0.06903625, -0.04988827, -0.06465217, 0.031029098, 0.04635287, -0.082854904, -0.0019667882, 0.019698884, -0.08150147, 0.04460586, 0.052439127, 0.0383481, -0.0749611, 0.024685716},
   {0.08736501, 0.012667226, -0.0824304, 0.015425989, -0.031418346, 0.07032583, 0.07398603, 0.006787526, 0.041257706, -0.056251112, 0.05217407, -0.065978214, -0.08650035, 0.023708614, 0.08224373, 0.018477209, 0.053120226, 0.063956015, -0.053013224, 0.03956305, -0.021705588, 0.051492907, 0.008667528, -0.024897002, -0.020361098, 0.014647269, 0.056768008, 0.05227373, 0.03873182, 0.010904327, 0.034445908, 0.04128964, 0.05503907, -0.052331157, 0.025809733, -0.08057488, -0.017092513, -0.04440963, -0.037467618, -0.044924483, -0.06441821, 0.077434905, -0.08114006, -0.026674815, -0.05711441, -0.016953833, 0.029790314, -0.059383474, -0.058083612, 0.022596467, -0.08856436, 0.07011259, 0.06856243, 0.02119872, 0.03972646, 0.08845853, 0.025843263, 0.089720726, -0.056272138, -0.006075312, 0.076644585, -0.01043123, 0.015876992, 0.08277626},
   {-0.05883519, 0.015213217, 0.04344212, -0.08266922, 0.06404859, -0.002240641, 0.041105367, 0.015759386, -0.0024507015, 0.059882127, 0.018778324, 0.015378484, 0.07259063, 0.015741263, 0.0062746033, -0.02588676, -0.059557144, 0.0143242255, -0.032385897, 0.01556263, -0.039219208, -0.05672918, 0.061437055, 0.047974505, 0.05958325, -0.09012951, 0.014017232, -0.049101427, 0.014225893, -0.061368197, 0.037267327, -0.010504126, 0.051650904, -0.038369376, -0.06918707, 0.046880107, -0.043674175, -0.061510082, -0.09659398, -0.020351537, -0.0105176745, 0.05206565, 0.010489845, -0.0080556795, 0.05231117, 0.08143807, 0.06693696, -0.058582295, 0.004025323, 0.0950266, 0.042728025, 0.0596158, -0.02807251, -0.037068885, -0.071580075, 0.022349354, 0.093056455, 0.055939574, 0.019911923, 0.008110126, 0.03545482, -0.030308798, -0.032642104, -0.05032694},
   {0.02425702, -0.057675462, 0.045664575, -0.029230969, 0.029574923, 0.009744644, -0.044940658, 0.00036140817, -0.05918312, 0.037395965, 0.03403949, 0.04516277, -0.034716055, -0.035864457, -0.07063526, 0.0313574, 0.0058181453, 0.0103536695, -0.01597444, 0.024113229, -0.0125668235, -0.0040918253, -0.058265567, -0.0030521303, 0.072826505, -0.051354468, -0.039645713, -0.0548997, -0.07300851, 0.06146293, 0.07238739, -0.07758642, 0.001760371, -0.018199863, -0.092243865, -0.020711236, -0.047305513, 0.048040017, 0.029731825, -0.006048262, -0.04546413, 0.064695396, -0.028454052, -0.073029116, -0.06443082, 0.043634262, 0.08831511, 0.0073994636, -0.041417073, -0.033546276, -0.025067164, -0.007045299, 0.015385304, -0.08381839, -0.08969981, 0.017704707, 0.057888765, -0.026076078, -0.071242645, 0.040242776, -0.026191637, -0.0046912655, -0.09105262, -0.010736058},
   {-0.03629863, 0.012938279, 0.081661746, 0.08385843, 0.06152888, 0.05503166, 0.03221085, -0.02863022, 0.0959534, -0.03012057, 0.03346581, 0.07025452, -0.032621868, 0.071816735, 0.059296973, -0.07195187, 0.03665374, 0.04921215, 0.030797713, 0.03644563, 0.06493767, 0.07965768, 0.08355956, -0.013704598, -0.007663053, -0.0062047224, 0.09343296, -0.059956398, -0.08650233, -0.040233973, -0.07897315, 0.06892508, -0.056077216, -0.08271419, -0.018444464, 0.069500074, -0.050108828, -0.0026507713, -0.03541284, -0.016568705, -0.08094103, 0.035427593, -0.07789094, 0.063751824, 0.0035792126, -0.040212434, 0.018038537, 0.04673158, -0.04910651, -0.015570237, -0.014934126, -0.021930106, 0.006502098, 0.031569213, -0.052843332, 0.0028343098, -0.051238276, 0.08663738, 0.08959154, -0.032314144, 0.050381016, -0.022210978, 0.032368004, -0.074554294},
   {0.02497673, -0.07042277, 0.02923907, 0.017862193, 0.012781217, 0.03207636, 0.0771865, 0.05492958, 0.09114804, 0.09671424, -0.064902216, 0.06946643, -0.07237744, -0.053016033, -0.043732617, -0.064835735, 0.04102498, 0.033536352, -0.084963135, 0.01944205, 0.007056806, -0.0066157505, 0.028227234, -0.0277424, 0.038140435, -0.05050748, 0.04485778, 0.08569889, -0.059086785, -0.015764259, 0.036036115, -0.09312489, 0.09221447, -0.045738123, 0.020193858, -0.02965929, 0.06719339, -0.030764978, 0.014840182, -0.057198443, -0.038619373, -0.0341931, -0.08528527, 0.07079656, 0.08944356, -0.053801544, 0.086190626, 0.05852282, -0.048578236, 0.05464795, 0.07029089, 0.028316908, 0.04255108, 0.024815105, -0.012819231, -0.060922682, 0.081386134, 0.054823156, -0.0899154, 0.058388308, 0.0013680743, -0.058749225, 0.062857635, -0.09178154},
   {-0.07895701, 0.0613575, -0.0062229275, -0.048626773, -0.0018716558, -0.07514934, -0.08516532, 0.045712095, -0.047259666, -0.034712855, -0.046627026, 0.062226877, 0.076780744, 0.048285145, 0.08924199, 0.026203625, 0.06547086, -0.031106614, -0.02149681, -0.020998627, 0.073266484, 0.091148466, 0.042168614, 0.027990341, 0.010711384, 0.0060390206, 0.022437591, 0.0052598966, -0.0682392, -0.0031414628, -0.09564901, 0.001772604, -0.051928997, -0.026991315, 0.048454266, -0.009385817, 0.077388406, -0.029840242, 0.037388574, -0.023902863, -0.010392932, 0.025354326, -0.038128357, 0.06871145, 0.017241077, 0.028465392, 0.022998251, 0.060837254, -0.028143287, -0.013822383, 0.063857295, -0.086844, -0.022712601, -0.06614908, -0.077387534, 0.026239438, -0.03240874, -0.020278709, -0.006067753, 0.063385, -0.062289983, -0.08207117, 0.06286745, 0.018942792},
   {0.0908711, 0.06143206, 0.015871532, 0.010310176, -0.018441679, -0.017484432, -0.011260373, 0.04600237, -0.004538863, -0.049435053, 0.038730048, 0.0214976, 0.068717696, -0.00961631, 0.043771617, -0.0052441508, -0.051459905, -0.051398188, -0.017822757, 0.012197772, -0.05704075, 0.02131702, -0.019018708, -0.023425378, 0.087415665, 0.042011835, -0.08848881, 0.046214655, 0.04364071, 0.030857675, 0.027752463, -0.024167664, 0.065339826, -0.061159052, 0.021935305, -0.03192134, -0.02964563, -0.046271008, -0.057933103, -0.019741692, -0.09496968, 0.038514815, 0.068246044, -0.07213645, 0.0948918, -0.069401234, 0.08173179, -0.003408839, -0.03579594, 0.008419157, -0.05700056, 0.00037177652, 0.03634407, 0.022683203, -0.028792873, 0.05775842, 0.062032618, 0.02345196, -0.053515937, -0.015472224, -0.014766557, 0.03251878, 0.0044823955, 0.081218004},
   {0.012468207, 0.059306666, -0.025496239, 0.08463079, 0.023766248, -0.06744923, -0.063046105, -0.03851772, 0.032623176, 0.0743204, 0.08464987, -0.06347215, 0.0066257715, 0.064562924, -0.012042083, -0.066931084, 0.032442402, -0.07935802, -0.04752801, -0.08857423, 0.017725527, -0.027595544, 0.08150422, -0.018837571, 0.080108665, 0.038285382, -0.06710185, -0.005106934, -0.0024691224, -0.008110613, -0.03448472, 0.037874956, -0.046302304, 0.054667037, -0.05792359, 0.010731275, 0.056865953, 0.044709526, 0.049001183, -0.08831262, -0.04142036, 0.060944848, 0.0437688, -0.08406437, 0.026843593, 0.059874494, 0.08814097, 0.022833183, 0.024626093, -0.038148485, -0.018226631, 0.06761252, -0.058699314, 0.022131123, 0.015214115, 0.0063876202, -0.07595847, 0.0137171615, 0.022900045, -0.016349731, 0.06757698, -0.092553034, 0.0060733003, 0.046288956},
   {-0.008224897, -0.06169235, 0.0420312, -0.076226264, -0.018099861, -0.06013338, 0.07787668, -0.054492053, 0.08875898, -0.034556195, 0.06583693, -0.016801024, -0.039381757, -0.03557414, 0.08118028, 0.03118021, -0.019514002, 0.07415543, -0.08379732, -0.026089827, -0.056623947, 0.083479375, -0.0653493, -0.08264601, 0.016938033, 0.08754763, -0.020130796, 0.022861633, 0.042367272, 0.040153973, 0.0026673079, 0.030556096, 0.03048458, -0.006131904, 0.03295131, 0.05266291, -0.046667494, -0.015677132, -0.08522949, -0.08351349, 0.016573943, -0.014540978, -0.108692475, -0.046763364, -0.006738893, -0.09493682, 0.0689607, 0.029948436, 0.05523033, -0.09341911, -0.034095615, 0.0015471354, 0.055613816, 0.005486168, -0.012683734, -0.07142093, -0.019556554, 0.097794205, -0.079412445, 0.029913565, -0.07218949, -0.07790694, -0.039690223, -0.093771145},
   {-0.07953159, 0.074841715, -0.0829822, -0.028459802, 0.0679499, 0.074472256, 0.0050755236, -0.07919294, 0.072230875, 0.054239176, 0.08016371, -0.031551115, 0.032368593, -0.07947688, -0.062113844, -0.07430724, -0.06720903, 0.07234769, -0.039937463, -0.074194245, 0.064389415, -0.07480279, 0.077876285, -0.02622959, 0.077909745, -0.059600197, -0.015740898, -0.01482899, 0.051780604, -0.008552454, -0.09083214, 0.029290186, 0.060963176, -0.09178176, -0.0043159397, -0.04410451, 0.06980273, 0.045156997, 0.010685976, 0.06083084, 0.026191771, -0.07974713, -0.030860122, 0.058788694, 0.063687585, -0.047659747, 0.034781016, 0.07664313, 0.063715056, -0.056939017, 0.052298434, -0.09248311, 0.05868888, 0.0618994, 0.036239095, -0.04477247, 0.062136255, 0.044686414, 0.023929693, 0.07330511, -0.030826073, -0.07133453, -0.062375803, 0.0061516142},
   {0.066939816, 0.07018639, 0.073148705, 0.08503598, -0.02677467, 0.07008977, 0.077919215, 0.019544698, 0.08472507, 0.010963, -0.057159975, -0.04239471, -0.020803764, -0.071600616, -0.082694985, -0.086534366, -0.047003604, -0.03317824, -0.017284676, 0.043595176, -0.05371138, -0.031738922, -0.052427456, -0.090742946, 0.01607369, -0.027724965, -0.035998505, -0.08008571, 0.022782214, -0.04577363, -0.07048983, -0.078053735, 0.0903031, 0.06254502, -0.02871928, 0.019412642, -0.09740098, -0.046398994, -0.04459695, -0.0059844553, 0.07572745, -0.024728335, -0.07145412, -0.05710553, -0.03281117, -0.003962642, -0.054414123, -0.010142294, 0.015513425, -0.0050067916, 0.06231169, -0.09167619, 0.003551922, -0.070018984, 0.09080807, 0.023949401, -0.041543987, 0.05049089, 0.056179248, -0.02266256, -0.06233758, 0.035337634, 0.021898225, 0.016488628},
   {0.047048092, -0.06400084, -0.031401847, -0.052780394, 0.06070183, -0.043829646, 0.07166378, -0.020719327, 0.037980575, -0.05661221, 0.02671495, 0.008446029, -0.04371493, 0.014879252, -0.023938373, 0.033216335, -0.000577334, -0.028246358, 0.025409393, -0.030025221, 0.03697758, -0.036393054, 0.05124166, 0.004125349, -0.08489303, -0.08194377, -0.06549329, -0.060792416, 0.043838434, 0.0426073, 0.08365916, 0.046634864, -0.023410939, -0.0035932716, 0.0022100597, -0.042945318, -0.004885042, 0.081405304, 0.03353876, -0.0043240264, 0.016040845, 0.05739721, 0.004580964, 0.067624025, -0.015886288, -0.055541374, 0.013327435, 0.047349248, -0.08535696, -0.05387241, 0.07940946, 0.072568186, -0.06365266, -0.03730085, 0.018069677, -0.08754395, -0.08922967, -0.009909249, -0.045215875, 0.011961005, -0.059958924, -0.050887953, 0.03545847, -0.08745355},
   {0.014100732, -0.015148346, -0.076173164, 0.026110182, 0.05051304, -0.07604591, -0.052852754, 0.009852137, -0.02332577, 0.011114428, 0.08016183, 0.022210933, -0.050751682, -0.072225355, -0.029868715, -0.046698954, -0.063638866, 0.06876431, -0.07459187, -0.096653484, -0.06776946, 0.09634615, 0.04203145, 0.05397085, 0.046843205, -0.06146379, 0.05961981, -0.0744478, -0.090293385, -0.08681913, -0.05370672, -0.08393455, 0.027688399, 0.06970816, 0.087771885, 0.06640424, 0.033646904, 0.07782477, -0.0085583925, -0.059283286, -0.048173413, -0.05523966, 0.027488217, -0.013280742, -0.051869024, 0.027040156, -0.062354483, -0.07338011, 0.03751992, -0.082524724, -0.092259705, -0.08656709, 0.00047151238, 0.031198122, 0.062475212, 0.023447009, -0.0785752, -0.06781188, 0.078057356, 0.05922317, 0.02588138, 0.057642244, -0.02146872, 0.04227492},
   {0.035272334, 0.026103185, 0.014161541, 0.08527967, 0.07587592, 0.0864524, 0.0053014527, 0.032509476, 0.07351649, -0.074601665, 0.032253496, 0.08836315, -0.020390712, -0.05112745, 0.07363025, 0.05278177, -0.09016587, -0.053841636, 0.05607959, 0.041935906, -0.036765564, 0.013759037, 0.02568622, 0.031338, -0.08198344, -0.06038609, 0.03504646, -0.03675612, 0.030793332, -0.020522892, -0.02508866, 0.051646966, -0.089469045, 0.06548629, 0.020486489, -0.03321578, -0.011066938, 0.055406313, 0.013013432, -0.07540693, 0.03493084, 0.053023107, -0.03855693, -0.06958131, -0.08965895, -0.05180696, 0.07418965, -0.05753953, -0.06641885, -0.013454271, 0.04806567, 0.08458591, 0.03390914, -0.083654836, 0.022284463, -0.008434894, 0.03446764, 0.06311495, -0.041204132, -0.09556171, -0.015559278, 0.011827424, 0.051055428, -0.032592397},
   {0.01937589, -0.034269806, -0.009192729, -0.06842662, 0.017290138, -0.09356316, -0.04868503, -0.020389652, 0.031574715, -0.011827077, 0.041816436, 0.06275616, 0.0015331432, 0.05809156, -0.08373876, 0.056286357, -0.065806836, 0.0054170415, 0.06804814, 0.050968863, -0.01798822, -0.011715154, -0.08498655, 0.08219459, -0.06955062, 0.07152869, 0.025836578, 0.04104404, -0.061219152, 0.035464488, 0.07955244, 0.06906283, 0.0813253, -0.0011052539, -0.051922943, 0.080206245, 0.007208621, 0.016638977, 0.0822301, -0.036029045, -0.005614854, 0.076953016, -0.02769877, -0.08062489, 0.09179469, -0.04484076, 0.03942849, 0.033526815, -0.013761891, -0.04607585, 0.08582893, -0.033035114, 0.013649976, 0.087425314, -0.038695183, -0.06543669, -0.03457486, -0.0058625927, -0.09306367, 0.058062732, 0.039282728, -0.030173764, -0.014454975, -0.021353953},
   {0.0880514, -0.030197626, 0.02931409, -0.006108054, -0.006728715, -0.06496691, -0.010126926, -0.09916048, 0.028491829, 0.05511179, 0.08679669, -0.06163342, -0.0070325285, 0.013431256, 0.032642253, -0.0924482, -0.064861335, -0.03668418, -0.050732013, -0.044125255, 0.006143142, -0.06999962, 0.04034825, -0.011841111, -0.00492041, 0.08632203, -0.0012792513, 0.021412538, -0.024040446, 0.012522191, -0.024514241, 0.018125525, -0.010432765, -0.03920447, -0.05383299, -0.081127815, -0.02101196, 0.037877124, 0.010344614, -0.06616708, -0.06919459, 0.0641012, 0.0035788761, -0.07039355, 0.10469296, -0.025913171, 0.02842981, 0.035722777, 0.09789863, 0.0023157347, -0.05890061, -0.043009818, 0.024345119, 0.03915765, -0.012152389, 0.08552872, -0.024346344, 0.029241582, -0.0018771961, 0.037440978, 0.028703496, -0.027786247, -0.052825738, -0.006689416},
   {-0.030093893, 0.07830963, -0.02995513, 0.026590839, -0.019614294, 0.029608024, 0.025750138, 0.05784617, 0.087000094, 0.060212664, -0.031676717, 0.09520235, -0.06488194, -0.020390926, 0.003099896, 0.06617417, 0.048850447, 0.040701933, -0.0384696, -0.002525047, 0.0498956, -0.004239587, -0.09388901, -0.02234102, 0.076140344, -0.0036374948, -0.07594782, -0.030470956, -0.06012242, 0.02719888, 0.022146663, -0.090928465, 0.08503961, 0.0687518, -0.016191484, -0.064355426, -0.0623298, 0.05088039, 0.0022311679, -0.034045275, -0.0077154054, -0.05610271, 0.09279595, 0.06371037, 0.07866888, 0.0077148704, -0.016202502, 0.024197126, -0.045653608, -0.008781822, -0.03229704, 0.045985125, -0.026652351, -0.06407905, -0.0043309256, 0.06723655, 0.0004275979, -0.0076585095, 0.053761892, -0.011918538, 0.0794224, 0.029232308, -0.0046971557, 0.04876116},
   {0.048319466, -0.046655286, -0.047812577, -0.08651454, 0.0411918, -0.058264423, 0.009134524, 0.08522665, 0.006939253, 0.051929172, 0.049462013, 0.0545126, -0.011771649, 0.04663414, 0.044699393, -0.0145190805, 0.036078263, 0.021265693, -0.06418954, -0.09636194, 0.054418802, 0.05014721, -0.025242947, -0.032470465, 0.011255062, 0.021395551, 0.059411343, 0.05466475, 0.015721738, -0.06882596, -0.08566952, -0.09177331, 0.07723474, 0.014807841, -0.004297379, -0.08386876, 0.08798674, -0.009480124, -0.07410314, 0.066185765, 0.008126069, 0.06657476, 0.090449154, -0.027110085, -0.06448256, -0.006728318, 0.012451186, 0.043887075, -0.044866182, 0.06880747, -0.037485514, 0.082914926, 0.008860489, 0.010443911, 0.008807376, 0.079888605, -0.057029646, 0.070624955, 0.025241055, 0.0050772754, 0.059421442, 0.031487048, 0.07731459, 0.08445345},
   {0.037320144, 0.08094836, 0.06022561, 0.035965454, 0.015576167, 0.029195758, -0.00020004078, -0.09436613, -0.0032130098, 0.08390043, -0.0031793043, -0.0867381, -0.031866364, -0.06672736, -0.083499655, -0.051758282, -0.09830492, 0.03247849, 0.060307838, -0.019856747, 0.045958012, 0.09424946, -0.009641739, -0.008212917, -0.072193846, 0.06499643, 0.04601445, -0.0553417, 0.0888805, 0.011956446, 0.079046085, -0.06610784, -0.0574531, -0.046061173, -0.042189483, 0.055607203, -0.009371138, -0.09104239, -0.080936134, -0.061254416, 0.06447412, -0.07208165, -0.024315568, 0.052964993, 0.053425636, 0.054640528, 0.0799319, 0.0037543224, 0.047009557, 0.093351714, 0.0019115045, 0.09166486, 0.026447227, -0.03494121, 0.06288739, 0.03431199, 0.08122828, 0.05429765, -0.028074726, -0.06881414, -0.08237794, -0.019834496, -0.09443953, -0.026145853},
   {0.03257201, -0.08184499, -0.0010076971, 0.052446347, 0.070163086, 0.070376076, -0.049431313, 0.004378516, -0.07383601, 0.01206768, -0.09053233, 0.09084757, 0.0714998, 0.006538125, -0.0072906762, 0.06316965, 0.0017603002, -0.008111037, 0.042309605, 0.030747052, 0.017575065, -0.0031725485, 0.008857729, 0.014276236, 0.037547443, -0.09131919, 0.08252217, -0.090895176, -0.07300845, 0.06608678, 0.022336544, 0.056345202, -0.014840111, -0.035426214, -0.08262602, -0.0018360286, -0.06526075, -0.0031165276, 0.07080691, -0.090920486, -0.059503086, -0.060757823, -0.043858666, 0.08936388, 0.07593237, -0.039930344, -0.079859234, -0.055070527, 0.07641224, -0.033470724, -0.05475599, 0.07914252, -0.040174745, -0.07427046, -0.036857653, 0.0685736, -0.06697113, 0.08512048, -0.05831533, 0.0756061, 0.038084924, 0.065487795, 0.069746494, 0.027307514},
   {0.027444584, -0.033939227, 0.07174615, -0.047470145, -0.04341527, 0.08004754, 0.02627391, 0.051343977, 0.09427916, 0.09220161, -0.056485657, -0.0109041175, 0.057023965, -0.014821694, 0.04592701, 0.016966134, 0.017638445, 0.05627116, -0.004674934, 0.031027472, -0.028187487, 0.02556189, 0.037377443, 0.09192967, 0.003131117, -0.031596042, -0.037139185, 0.053700857, 0.07317013, 0.026819855, -0.037636258, 0.02979404, 0.07178668, -0.09052618, -0.016249137, 0.07544323, 0.0427731, 0.07961325, 0.0014537799, 0.07030567, 0.064595126, -0.079938516, 0.082493775, -0.06460544, -0.08427799, 0.039054673, 0.056301422, -0.062221605, 0.016671324, 0.064168125, 0.019122874, 0.017313994, -0.056760058, -0.079671904, 0.043204837, -0.035226583, 0.04131799, -0.07035381, -0.012489326, 0.039843153, 0.009696465, -0.089422144, 0.06982697, -0.07831157},
   {0.035606556, -0.01973897, -0.093379304, -0.063003734, -0.0057713655, 0.02428065, -0.06601657, 0.011977004, 0.027808951, -0.07991532, 0.07624141, 0.012048003, -0.08825132, 0.050454535, -0.03434766, 0.0038937107, -0.09635016, 0.038595535, 0.005034119, -0.051352773, 0.07740425, -0.060940944, -0.090228975, -0.012910344, 0.061518636, -0.05777034, -0.021321265, -0.027478287, 0.079966284, -0.073739626, -0.08552437, -0.015979279, -0.0176702, -0.07280216, -0.05250462, -0.06760126, -0.073352575, 0.0037873175, 0.045114197, 0.05948276, 0.014959803, -0.07295249, -0.071100704, -0.04738373, 0.015690742, -0.04803001, 0.08505801, -0.0031473304, 0.06797161, 0.028039198, -0.007854244, 0.008850671, -0.046419308, -0.06688854, 0.026766747, 0.08286559, 0.024639616, -0.050549343, 0.05203948, -0.047008555, 0.052065223, -0.06664983, -0.08565408, 0.049880844},
   {0.05973843, 0.042982224, 0.049438413, -0.080626786, 0.08211486, -0.009981519, -0.04095327, 0.055505976, -0.060251497, -0.0503387, -0.018549472, -0.013850993, -0.025272787, -0.031299476, 0.010622948, -0.001937598, -0.046068978, -0.07654722, 0.033061586, -0.029039618, -0.09445124, 0.059556127, 0.02403231, 0.012068845, -0.08189913, -0.008575507, 0.09110405, 0.07491064, -0.068594754, -0.084316164, 0.08170582, 0.031788144, -0.052737117, -0.06797306, 0.00012405998, -0.004627458, 0.056115627, 0.0016465378, 0.019040022, -0.050894473, -0.036756787, 0.08239605, -0.038198248, -0.0929114, -0.03369061, -0.042313587, -0.05867011, -0.04969762, -0.06964688, -0.056552827, -0.083365954, -0.03661937, 0.036774103, 0.086539276, -0.082395, -0.022613917, 0.08813808, 0.008928854, -0.03297264, 0.073946856, 0.093153685, 0.04008106, -0.070053995, 0.05422805},
   {0.0852981, 0.025563803, 0.08011576, 0.04073524, -0.0032300043, -0.07181676, 0.036151554, 0.070801064, 0.09238531, 0.014702094, -0.05306375, -0.071318865, 0.011044629, 0.06449625, -0.04312678, -0.03521701, 0.013153294, 0.00782416, -0.06376922, 0.0060554966, 0.009770091, 0.040609162, 0.006964252, 0.01933223, 0.03834939, -0.011560345, -0.017686695, 0.044617157, -0.05655552, -0.036445606, 0.02722233, -0.0039072614, -0.03990267, -0.06967995, -0.06357349, 0.06401016, 1.00610305e-05, 0.018390445, 0.081784934, -0.0767526, -0.012755482, 0.013087645, -0.077253185, 0.04466916, 0.036149263, -0.032937575, -0.05387056, 0.08604958, 0.06811595, -0.005185644, 0.044347998, 0.007683389, -0.04644967, -0.06378679, -0.04463972, -0.014453568, 0.0532174, -0.06843823, -0.047077406, -0.07409682, 0.007099903, 0.02922263, -0.032491025, -0.080199964},
   {-0.069243915, -0.07038719, -0.061321646, -0.03158731, -0.007631316, -0.06972584, -0.0019321884, -0.07973581, -0.027859263, -0.02970848, 0.041917674, -0.07203352, 0.012555718, -0.0409191, -0.0026845187, -0.041422904, 0.0121180825, 0.060992442, 0.060504742, 0.08856544, 0.03150757, 0.09452434, 0.063254386, 0.048934363, 0.03474685, 0.07982393, 0.0847787, -0.05055016, -0.045509093, 0.018470533, 0.06434585, 0.08291265, -0.0617046, -0.06168002, -0.011998741, -0.05296112, -0.019133624, 0.010560407, -0.07008075, -0.027880676, -0.07380154, 0.052115403, 0.011468469, 0.060096137, 0.032886554, -0.06956269, 0.07943207, -0.031564843, 0.08412991, -0.08918117, -0.055487096, -0.057983957, 0.03753665, 0.07351669, -0.006106466, 0.025966203, 0.005520416, 0.056044396, 0.069751285, 0.067766145, 0.0815157, 0.041981988, -0.018649228, 0.0034224333},
   {0.07231387, 0.08635573, -0.04884588, 0.07792443, -0.05898435, -0.018661786, -0.071274355, -0.020572402, 0.07278306, -0.07892921, -0.05629125, -0.037968002, -0.0928176, -0.052734908, -0.055725772, -0.059403673, 0.021110887, 0.025860727, -0.07391126, -0.0088887755, 0.063576765, 0.035280738, 0.014681523, 0.043818362, 0.08287401, 0.04155289, -0.026163619, -0.012588647, -0.072211355, -0.054754212, -0.025017152, 0.049865354, 0.037306704, 0.06824141, 0.034813914, 0.039009094, -0.01528126, -0.0038760803, -0.08967033, -0.0064207315, 0.06801263, -0.043710344, -0.0048637222, -0.078627884, -0.08273007, 0.0030368462, -0.057449885, 0.06616575, 0.08086495, -0.01251832, 0.06391384, -0.0082902685, 0.06817973, 0.07444679, -0.042884715, 0.02908256, 0.08317032, 0.065985635, -0.0028075278, -0.057197183, -0.084207535, -0.045325495, -0.0153775895, -0.030325282},
   {0.036886588, 0.07608328, 0.073362194, -0.09304536, 0.029396575, -0.06766027, -0.050645072, -0.03657222, 0.03881025, -0.06391097, 0.030517511, 0.07957349, -0.0519959, -0.009633757, 0.06543382, 0.015368812, -0.041159634, -0.06645585, 0.025231555, 0.06639539, 0.0119417, 0.09285712, 0.009262098, -0.03346158, -0.058606517, -0.020436574, -0.0639692, 0.058855683, 0.0045296475, 0.09329335, -0.011803587, 0.028871289, 0.027722508, 0.05576173, 0.08258772, -0.05529152, -0.051026832, -0.08944066, -0.0060844934, 0.014994539, 0.009494163, -0.04587317, 0.00081419724, 0.017297447, 0.08737964, 0.032545727, -0.07817989, 0.03578344, -0.013267198, -0.052187342, -0.07477671, 0.02408047, 0.028853776, -0.042673662, -0.08911498, -0.04991401, 0.07853131, -0.030424135, 0.06915725, 0.08610586, -0.009330604, -0.042153843, 0.03772317, 0.07496511},
   {-0.08721474, 0.09088502, -0.025477953, -0.09693071, -0.044682577, 0.048251707, 0.054661795, 0.08131424, -0.03690607, 0.07538187, -0.05912981, 0.03405857, -0.06458572, -0.08154178, -0.0926971, 0.06435605, -0.08243967, 0.07722964, -0.009937324, 0.03819612, 0.0011966494, -0.022142487, 0.001416338, 0.01591397, -0.08062237, -0.079009145, -0.07120206, -0.064988434, -0.07397291, 0.07002758, 0.038854413, -0.017746579, 0.04186318, -0.029756483, -0.03250709, 0.010846777, 0.020564646, 0.027214622, -0.04918836, 0.02499523, 0.040260073, -0.012216561, 0.062016472, 0.05948808, -0.04593459, 0.062832214, 0.013174161, 0.06289691, 0.056569733, 0.07303181, 0.047781676, -0.016367935, -0.03722131, -0.050960932, 0.017474435, -0.08890777, -0.06014637, -0.07866521, 0.09209267, 0.054302525, 0.024898954, -0.012368381, 0.01415162, 0.055022523},
   {-0.060413454, 0.015435242, 0.07899119, 0.046544123, -0.04979017, -0.08465624, -0.0658313, -0.04028926, -0.08156462, 0.00923878, 0.035428233, 0.07776831, 0.042537726, 0.078276746, 0.036651812, -0.08611549, -0.09530735, -0.016217269, 0.015994959, -0.07123967, 0.004619413, -0.010294574, -0.01520588, -0.078876376, -0.011176941, -0.049703926, 0.07542124, -0.03987983, 0.07556095, 0.0011273474, -0.051407836, -0.088008665, -0.06721607, -0.022308419, -0.0860198, -0.040820844, -0.096450984, -0.017152589, 0.08205949, -0.05052243, 0.08164474, -0.0636161, 0.0822254, -0.045782063, -0.07395646, -0.08214246, -0.071943164, 0.07226441, 0.07732116, -0.03191456, 0.07201799, -0.046534758, -0.018110413, 0.055660076, 0.06309635, 0.051414423, 0.02915426, -0.045236103, 0.009438194, -0.030230112, -0.023220917, 0.08389353, 0.013796609, -0.01787446},
   {-0.07752983, -0.021751346, 0.07820134, 0.042124692, 0.047059588, -0.045883738, 0.084926784, -0.058825895, -0.0003485089, -0.0564151, -0.008762144, 0.03388315, -0.0151528865, 0.08967942, 0.054153882, -0.008848473, -0.0388501, -0.09296815, 0.0797688, 0.037784107, -0.03332579, -0.06564907, 0.081795216, -0.052672774, 0.07642222, -0.021988027, -0.032691866, -0.042572327, -0.06633466, -0.07845597, -0.0040298873, 0.04069806, -0.0170568, 0.045087602, -0.064105205, 0.083093, -0.065621115, -0.037604786, 0.029115697, -0.06239124, -0.027162177, 0.061782293, 0.060530916, -0.05328103, 0.043362495, -0.00777535, -0.030974934, -0.07116461, -0.085437454, 0.09169274, -0.03174851, -0.017389312, -0.030860575, -0.07377574, 0.067026325, -0.026196677, -0.049521443, 0.0036609264, 0.052451648, -0.090379104, -0.048055034, 0.005246237, -0.013122062, -0.06455948},
   {0.037408695, 0.08217976, -0.08388397, 0.010513375, 0.09238026, -0.06396657, -0.0884507, -0.056045506, 0.060234707, -0.08213075, 0.05843123, 0.062250488, 0.040246032, 0.085011765, -0.011772513, 0.07480634, 0.027955491, -0.017254345, -0.040963955, 0.048492827, 0.0273382, -0.0075627533, 0.08611677, 0.012475356, 0.016302973, -0.0798547, -0.02989447, 0.074278384, -0.01389394, -0.011776991, -0.07052056, -0.030022064, -0.018147789, 0.042012, 0.034865867, 0.08021491, -0.0063245334, 0.08477135, 0.029983012, 0.0010994449, 0.00907514, -0.0112738535, 0.075998396, -0.01963523, 0.0026308307, 0.016064722, 0.08484742, 0.02409911, -0.03082504, 0.081400804, 0.040266197, 0.05821327, 0.0028311524, 0.043966495, 0.08145145, -0.005465918, 0.07241691, 0.082243346, 0.041585393, 0.08082209, -0.06686178, 0.044395186, 0.054737292, -0.005365802},
   {-0.021824861, 0.017603993, 0.017603206, -0.00014915278, 0.003660164, -0.04316844, -0.046233777, -0.014257256, -0.029697238, -0.064115316, -0.0582719, -0.06886092, -0.015305869, -0.051440913, -0.091878116, -0.052383453, 0.04710273, 0.057832517, -0.07179786, -0.0139208175, -0.07380484, 0.097855024, -0.046017174, -0.044509277, 0.025151907, 0.060879212, -0.0059417654, -0.055873316, -0.057377033, -0.07174536, 0.048135534, -0.0712522, -0.01773379, 0.007659063, -0.048243925, -0.07443318, -0.02615375, -0.01889086, 0.081249535, -0.08964721, 0.06811822, -0.03541678, -0.077957585, 0.056632616, -0.0029530716, -0.030219916, -0.074251994, 0.08758519, -0.060229033, -0.029051645, -0.002993142, -0.0024212673, 0.04368586, -0.011437409, 0.055488177, 0.08073652, -0.04165653, -0.076789744, 0.06051644, 0.055408724, 0.08639449, -0.091239445, -0.03949408, -0.05976763},
   {-0.07574236, 0.08140328, 0.022382999, 0.02102483, 0.081164464, -0.0249672, 0.058610942, -0.055083852, -0.08808754, 0.032387882, -0.09179615, 0.019838788, 0.08200536, -0.07329934, 0.014385477, -0.031678297, -0.04984996, -0.06132343, 0.046823166, 0.04861345, 0.036250357, -0.08101619, 0.024909982, -0.039804194, -0.05682456, -0.049674705, 0.04006426, -0.0032099287, 0.054788627, 0.061844893, 0.009594536, -0.07352223, -0.048019398, 0.09192049, 0.03468761, -0.020636937, 0.078574404, 0.08700426, -0.020104157, 0.023394696, 0.06625188, 0.07584717, 0.038506202, -0.052294724, 0.08575589, -0.0024990942, 0.087504745, 0.07697472, 0.07684948, 0.07697221, -0.065571636, 0.064491384, -0.037511557, -0.03763338, -0.090078905, -0.011519153, -0.08945455, -0.08916986, 5.362183e-05, -0.068601266, -0.0047901664, 0.017784804, -0.026743535, -0.052460592},
   {-0.03522149, 0.010594123, -0.07697291, -0.09250738, -0.03339169, -0.05103397, 0.037281003, 0.00020041557, 0.036376722, 0.09979408, -0.03920828, -0.024757523, 0.07113073, 0.018037284, -0.03146086, -0.038893264, 0.003332314, 0.054208778, 0.078090556, -0.015548613, -0.100536555, 0.10099361, 0.023140455, -0.0011090785, 0.010858948, 0.084477715, -0.06421295, -0.046586767, -0.06395179, -0.078213565, 0.04175431, 0.042660948, 0.012217604, 0.08278983, 0.047331635, 0.016116481, 0.036857262, 0.053092156, -0.0020310564, 0.006419815, -0.050938126, 0.042292856, -0.0526385, 0.08405145, 0.020746876, -0.0016810056, -0.027243964, 0.03700711, 0.06888003, 0.012789978, 0.036726814, 0.007750675, -0.06988017, -0.054939657, -0.044404794, -0.037126653, -0.06225451, -0.040629093, -0.071597934, 0.008048908, 0.011404706, -0.018124633, -0.0498678, -0.06317435},
   {-0.087336056, -0.04268701, -0.02801164, -0.09534428, 0.03689804, 0.03693746, -0.062179413, 0.010686625, -0.03979381, 0.08598297, 0.025916398, -0.066115744, -0.015615724, -0.096746534, 0.043879397, -0.050019383, 0.043792125, 0.007717766, -0.02358441, 0.032014262, 0.011281076, -0.039924968, 0.014627715, 0.08166737, -0.0143341925, -0.082090236, -0.011322274, 0.03353475, 0.07428383, -0.041715387, -0.07962203, 0.044878885, 0.025546774, 0.05147468, 0.0077678543, 0.027151963, 0.06534182, -0.071599476, 0.024368899, 0.00765191, -0.05983534, 0.05314251, -0.058213565, 0.02500093, 0.018616011, -0.01739376, -0.057264913, 0.07929293, -0.013484707, -0.006349001, -0.046177544, 0.09284892, -0.09090635, -0.010478348, 0.08359221, -0.04945855, 0.0086490335, -0.040552236, -0.04931361, 0.049202293, -0.078926094, -0.036448233, 0.054995015, 0.024950963},
   {0.056832973, -0.0685523, 0.03158122, 0.046710633, -0.05360165, -0.0014522241, 0.049528785, -0.041981947, 0.07468817, 0.09683488, -0.073065065, -0.041087613, -0.07927219, -0.07152687, -0.004522845, 0.004712045, -0.056818604, -0.074061014, 0.0041040555, -0.034380283, -0.022396423, -0.04820899, -0.07637969, 0.03257089, 0.005457912, 0.08689599, -0.0063848095, -0.018587606, 0.01598677, -0.023515351, 0.04363997, 0.034763083, 0.05694788, 0.07615028, 0.07269288, -0.08091539, 0.013740111, -0.019305773, -0.05984547, -0.032409925, 0.044160906, 0.03469027, -0.05326317, 0.02232059, -0.063076906, 0.074585415, 0.06977709, 0.035050526, -0.016443186, -0.073893905, -0.031742312, -0.01660829, -0.0015242496, -0.0072159916, 0.07916642, -0.088308625, 0.03537222, 0.07170363, 0.0028454438, -0.023433212, -0.077355005, 0.046087407, -0.02117099, -0.046822242},
   {0.032991834, 8.5477026e-05, 0.049243815, -0.0066396534, -0.016123496, 0.08253742, 0.054646965, -0.07016968, -0.07653547, -0.033675205, -0.012986541, 0.07777729, -0.0024431348, -0.007199838, -3.515184e-05, -0.072919935, 0.024353817, -0.04071408, 0.08290296, 0.027651126, 0.023462882, -0.07102422, -0.027459178, -0.0629582, -0.005894792, 0.015659288, 0.042101063, -0.02773914, -0.03982059, -0.062197074, -0.08361065, -0.061417554, 0.0313833, -0.050722785, -0.07557039, -0.025886435, 0.028228352, -0.047764897, 0.048622627, 0.09163677, 0.01660183, 0.023838654, -0.049344473, -0.087803945, 0.033760242, 0.07540541, 0.008031236, 0.066555984, 0.07025247, -0.017750379, -0.026676167, -0.0010291636, 0.025258597, 0.057448007, -0.022522211, 0.08405841, -0.031358644, 0.08227554, -0.09201947, 0.08272753, 0.08418412, 0.06567324, -0.020649012, -0.09195745},
   {-0.09344181, -0.04811655, 0.016378263, -0.0008234797, 0.057719015, 0.020194262, 0.079649, 0.060868822, 0.080599084, 0.061323844, 0.07134729, 0.0407059, -0.032332655, -0.07666278, 0.039239787, 0.022800744, -0.039342973, -0.0913876, -0.004214585, -0.038843486, -0.074030556, 0.045953397, -0.002550553, 0.05840286, 0.039646566, 0.08896535, -0.06260147, -0.0046913037, -0.071179904, -0.067079835, 0.07547437, 0.050542857, 0.033888556, -0.003985118, 0.012437428, -0.07522563, 0.014388735, 0.055080716, -0.034423087, -0.025830649, -0.060832027, -0.054805964, -0.037533063, -0.047507655, 0.015234999, -0.06144698, 0.07717057, -0.007141848, -0.08710022, 0.056231473, 0.057382405, -0.019196175, -0.053027906, 0.0050803944, -0.03289964, 0.039509993, -0.039681315, 0.03587475, 0.07724557, 0.0032688621, 0.014301809, 0.061521284, -0.091888, -0.044597477},
   {-0.008753104, 0.038231615, -0.06872323, 0.07474959, -0.02372157, -0.08927917, 0.073864676, -0.097259045, 0.024489736, 0.05011919, 0.02690453, 0.06930223, -0.010953739, 0.0396697, -0.056875013, 0.033651, -0.003435145, -0.0546973, 0.075935654, 0.07004424, -0.05967436, 0.07392257, -0.023882508, 0.043502055, 0.009096793, 0.060383834, 0.06853388, 0.03259982, 0.07719324, 0.058663152, 0.077082604, -0.07877384, 0.058467485, 0.04646243, 0.07179762, -0.047186803, -0.05675109, 0.0027281195, 0.0474636, -0.09168344, -0.018593257, -0.089459054, -0.05259139, 0.004537992, -0.07693659, 0.050137054, -0.04461768, 0.013714177, 0.032912835, -0.0034121769, -0.027510462, -0.088394806, -0.084585264, 0.009932987, -0.002215691, 0.06264578, -0.069218904, -0.09067068, 0.0035147741, 0.004599519, 0.015457411, -0.06795782, -0.052746955, -0.0018125069},
   {0.07840661, -0.063121855, -0.0012677887, 0.06452906, -0.06822457, 0.067081146, 0.0022848158, -0.077768706, -0.044977482, 0.08455155, 0.021222591, -0.015681647, -0.09061296, 0.016861683, -0.04442066, -0.01900237, -0.079047054, -0.06508301, -0.032292318, 0.08110831, -0.043922197, 0.060296897, -0.041398395, 0.078994654, -0.01873725, -0.053943384, 0.02766316, -0.019221174, -0.001350902, -0.078428805, -0.023106147, 0.046576414, 0.03744974, -0.03499176, -0.0017169948, -0.03408561, -0.0020762444, 0.049679764, 0.022736663, -0.077444516, -0.016922515, 0.011095777, 0.007884494, 0.043539636, -0.055167343, -0.04273222, -0.025601333, 0.044940844, 0.05029166, -0.048430026, 0.009933819, 0.028933555, -0.071449526, -0.06911106, 0.07583491, -0.08292829, 0.027568359, -0.047108985, 0.0042705163, -0.087684885, 0.0067481524, -0.0630682, -0.03440484, 0.006809915},
   {-0.059180263, -0.00013174627, 0.06941911, 0.030699577, -0.07129765, -0.08805669, -0.0064622867, -0.03231814, -0.021469159, 0.043317243, -0.080465235, 0.030366829, -0.07058831, 0.021747183, -0.047664884, 0.055586137, 0.023101805, 0.03888496, -0.056896325, 0.07391669, -0.04505772, -0.063892476, -0.07888346, -0.051852327, 0.0209936, 0.08038879, 0.017559806, -0.08009642, -0.060776867, 0.08608579, -0.08105074, 0.07486621, -0.044712007, 0.060357846, -0.031943176, 0.057780184, 0.057118993, 0.06089233, -0.036455426, 0.08594967, 0.08132745, -0.063825175, 0.030281052, 0.0025022328, 0.096180625, -0.09779843, -0.07589432, -0.07893499, 0.09582091, -0.010413726, 0.019545212, -0.09184733, 0.018671634, -0.059298415, 0.059885852, -0.023306543, 0.046526164, 0.052639365, -0.019294627, -0.048600994, 0.015528498, -0.0221667, -0.07266171, -0.08645737},
   {0.052349053, 0.050213546, -0.08934927, 0.013194292, 0.06266601, 0.08085619, -0.050186675, -0.09786413, 0.08654679, -0.05103755, -0.008292362, -0.052844904, 0.06831462, 0.033874057, -0.02175501, 0.044366233, -0.09786016, 0.070753194, -0.09175689, -0.07717409, 0.06794117, 0.06404611, 0.018652366, -0.06304747, -0.03344943, 0.022357414, -0.034682505, 0.037097257, -0.073333785, 0.07816874, 0.09214902, -0.083515495, 0.04309783, 0.07208553, 0.08632623, 0.07374351, 0.009302319, 0.026275277, -0.06397298, -0.06444807, -0.05180733, -0.015292183, 0.09143271, -0.09296611, 0.019708829, 0.07918091, 0.014555699, 0.010525877, -0.06749949, 0.039968427, -0.06273065, 0.050208814, 0.012407469, -0.00093093514, 0.037481837, -0.07255177, -0.031510413, -0.044351287, 0.09033083, 0.07050152, -0.031564876, -0.0327435, 0.0441222, -0.08544961},
   {-0.06291448, 0.02097001, -0.033205844, -0.0030276382, 0.025929963, -0.07584697, 0.028313417, -0.07608705, 0.030445248, -0.012865678, 0.055623896, -0.046527684, 0.024673447, -0.06944816, 0.042256586, 0.047194786, -0.077179395, -0.05648457, -0.08327839, -0.08202644, -0.07312976, 0.053145085, 0.0036370836, 0.01815667, -0.06940726, 0.036545448, 0.03982396, 0.004452915, -0.0023974627, 0.029325597, -0.07313824, -0.018393712, 0.0029271618, -0.004857148, 0.07968386, -0.07038775, -0.06264473, 0.009061855, 0.08689969, -0.017678052, 0.021913905, 0.0024681017, -0.06398689, 0.06560696, -0.043049205, -0.068610035, -0.050215174, 0.08459565, -0.10483045, 0.018106736, -0.032378547, 0.019787751, 0.07760368, -0.036125403, 0.06462953, 0.052582752, 0.047874548, -0.019529022, -0.089995116, 0.04893458, 0.0043347264, 0.076384045, 0.028327595, -0.077227235},
   {-0.01318454, -0.022125104, -0.0019183486, 0.041773226, -0.053104814, 0.043184407, 0.05819437, 0.0354456, 0.08256594, 0.011974099, -0.06349391, 0.073660515, -0.0049190894, 0.063874274, -0.026565328, -0.023876831, 0.050823655, 0.02590467, 0.090108074, -0.08664229, -0.063005894, 0.04336906, 0.039097633, -0.054935854, 0.06788382, 0.044403195, 0.06317437, -0.0033938154, 0.06365464, 0.04411768, -0.013643872, 0.080617614, 0.050468273, -0.011072266, 0.07184041, -0.09283224, -0.048981745, -0.005331309, 0.05597093, 0.047261767, -0.019724093, 0.051423974, 0.055521324, -0.012596235, -0.035268106, -0.080029756, -0.016698329, -0.073576264, -0.004361305, 0.05316322, -0.058342975, -0.06675322, -0.08465967, -0.068520665, -0.043593984, 0.06374941, 0.04142964, 0.030147072, 0.04676839, -0.060478408, -0.029580913, 0.048629753, 0.0128649, 0.056486454},
   {-0.02477907, 0.03841989, 0.031882573, 0.050176453, -0.047950074, -0.008697442, 0.013044491, -0.031363968, -0.013038614, 0.03254688, 0.025508173, 0.026110118, 0.0001649782, -0.004832442, -0.08259072, 0.020125397, -0.088604406, -0.023687556, -0.08285724, -0.054624945, -0.10050363, -0.034574457, 0.024525238, -0.04511313, 0.085226946, 0.041413594, -0.06042534, -0.07479691, 0.07909567, -0.027367465, 0.07332226, 0.02303726, -0.05915687, -0.08877716, -0.0040893736, 0.07281676, -0.0518064, -0.010783463, 0.061529092, 0.011886895, 0.042560384, 0.011874527, -0.0067497166, -0.0056686103, -0.08222788, 0.060985766, -0.048294656, 0.0035539968, 0.012304394, -0.013810758, -0.017190503, -0.0545447, 0.064971805, 0.0054304153, 0.0032949746, 0.066877946, 0.058113802, 0.089391425, 0.08030618, -0.06712219, 0.041424464, 0.016371585, 0.04789627, -0.040582877},
   {0.06109372, 0.06923568, 0.041812755, -0.06250228, -0.033733517, 0.022707874, 0.028336013, -0.0874676, -0.038138136, 0.063355245, -0.01794386, -0.075368434, 0.070639215, 0.03981157, -0.0908636, -0.08430348, 0.04038654, -0.08643046, 0.061515816, 0.034233548, 0.05965875, 0.09311596, -0.04446994, 0.044891395, -0.03808843, 0.06394381, -0.014627304, -0.0071914606, 0.02276159, -0.06871372, 0.06662775, 0.057679538, 0.036742814, 0.055215474, -0.068561316, -0.071246885, -0.08325854, 0.071894936, 0.07660752, 0.03713102, -0.0076387348, -0.030555286, -0.07425992, -0.007923543, 0.0682337, -0.0959339, -0.0004687861, -0.076479815, -0.07220948, -0.008283217, 0.063369416, -0.042181965, -0.035564587, -0.08862957, 0.046503387, -0.025803046, -0.055496015, -0.02568404, 0.0336264, -0.03775228, -0.013817269, -0.017549522, 0.025111886, -0.057923954},
   {0.07844165, 0.055962216, -0.009308667, -0.042178676, -0.013489313, -0.09429834, -0.0661027, 0.026093006, 0.053898714, -0.07177047, 0.0313313, 0.02333393, 0.032650165, 0.09118731, -0.046000056, 0.005594164, 0.043896034, 0.07939186, -0.073411345, -0.014289189, -0.088283144, 0.04122906, -0.046866972, -0.032797854, 0.021801477, -0.039396837, -0.05812837, -0.0031746137, 0.07664158, 0.027031258, -0.047693115, -0.043148044, 0.04755675, -0.029113797, 0.016054958, 0.0058918805, 0.05216696, -0.044187985, -0.028068798, 0.058676623, -0.033799313, 0.07703536, -0.07326356, -0.09125293, 0.036212575, 0.008317704, -0.005301455, -0.09543856, -0.0052374625, 0.036040742, 0.07385161, -0.0598804, -0.04390462, 0.04238265, 0.041949414, 0.037037596, 0.06983612, -0.058548376, 0.08445061, -0.023051823, -0.06780256, 0.015858635, -0.0056971884, -0.06586072},
   {-0.06871523, -0.0669453, -0.010994014, 0.053008344, 0.010291781, 0.04370423, 0.021243814, 0.029486718, -0.013417419, 0.028882261, 0.08859485, 0.09045054, 0.023397483, -0.0508161, 0.029827751, 0.09180152, 0.05906727, -0.07916439, -0.06185711, -0.04053979, -0.08881513, 0.090796545, 0.009995673, 0.022899017, -0.066826075, -0.08193077, 0.09005434, -0.029012997, -0.038291365, -0.055275857, -0.06532654, 0.07398647, -0.013388045, 0.05762103, -0.08741225, -0.029664261, 0.030635444, -0.061739936, 0.011388422, 0.04881508, 0.011588331, 0.02981525, 0.030401142, 0.03657966, 0.03328594, -0.09521012, -0.06257051, 0.041959193, -0.08783117, -0.048405666, -0.053605113, -0.002820231, 0.00102584, -0.055785466, 0.08903272, 0.07293629, 0.07125971, -0.032301847, 0.007578492, 0.011671251, -0.052552734, -0.05165089, -0.065611616, 0.06615768},
   {0.05184817, -0.012909285, 0.07233675, -0.0202654, -0.064446956, 0.033383034, 0.059663754, 0.062124453, -0.068794705, -0.016931934, -0.017983593, 0.0463634, 0.0020964593, -0.024148444, -0.0059663206, 0.08834564, -0.098536775, -0.0155129805, 0.033548974, 0.04368078, -0.09543182, -0.00942187, -0.027166327, 0.078879334, -0.06851493, 0.0454678, 0.087280005, 0.041762844, 0.033171527, -0.078186646, -0.0025664878, 0.062966034, 0.016418926, -0.016995406, -0.029057577, 0.006053342, 0.036897745, -0.022820314, -0.06725621, -0.0016859248, -0.004746782, 0.031871878, -0.06265355, -0.06462702, 0.0034731787, -0.0066191703, -0.07839534, 0.0073793856, 0.07880385, 0.0891846, -0.08232307, -0.04030706, -0.09154256, 0.026942886, 0.060607128, -0.03690588, -0.049414556, -0.081169665, -0.03584422, -0.008557309, -0.076729946, -0.08115677, -0.050758135, -0.066807024},
   {-0.071696825, 0.09083156, 0.017593278, -0.025133207, 0.024150923, 0.0686067, -0.02844769, -0.0673991, -0.066534646, 0.07161562, 0.05098044, -0.048883755, -0.013363615, -0.041435603, 0.07508252, -0.09119479, -0.093194805, -0.07637673, 0.05215309, -0.08971335, 0.038812406, 0.03238535, 0.08025004, 0.040377147, -0.052286673, 0.08579757, -0.047449008, 0.090806626, 0.052927874, -0.034967154, -0.0473909, 0.06764396, -0.018063955, -0.07080093, 0.051076062, 0.037516106, 0.05872365, -0.040027983, 0.049371, 0.0051491708, 0.023206254, -0.010052264, 0.0433441, -0.036688052, -0.062996686, -0.033872053, -0.09659353, 0.019705938, 0.024279118, 0.07879533, -0.004181659, -0.024602361, 0.08241368, 0.03378866, 0.050961845, 0.0012755439, 0.008667296, -0.08611316, -0.07142126, 0.041873004, 0.09161817, -0.015716515, -0.07903359, -0.010229804},
   {0.062101614, -0.061292466, 0.082692124, 0.039615028, -0.012558368, 0.08138828, 0.022579921, 0.03632128, 0.044671476, 0.045022547, -0.053295027, -0.007425611, 0.05689303, -0.039212435, -0.09153169, -0.01770188, -0.0006998386, 0.087906875, -0.045628633, 0.0031527441, 0.04005891, -0.03547825, -0.009205653, -0.044768564, -0.09490144, 0.085672565, 0.050454658, 0.023738483, 0.059581287, 0.030723333, -0.023976482, 0.077947475, -0.045622982, -0.0005822552, -0.09023861, 0.022506677, 0.017571378, -0.02383172, -0.0026127729, -0.06371208, 0.026937708, -0.004924543, -0.09062523, 0.06499573, 0.086434424, 0.02860983, 0.05508107, -0.073792964, -0.07866179, 0.012474769, 0.06818916, -0.077396594, 0.049402405, 0.0852327, 0.087372206, 0.05806569, 0.03652085, 0.09191718, 0.049973704, 0.055936765, 0.07229483, 0.010582738, -0.04427914, -0.032099},
   {0.075945, 0.0038016206, -0.039200824, -0.0021777737, 0.0050717574, 0.05920382, -0.003835071, 0.04783177, -0.04097864, 0.01444788, -0.0033021867, -0.033384442, -0.030996904, 0.05104666, -0.061702084, -0.023694277, -0.07812244, 0.024449848, -0.05174489, 0.0868835, -0.036072284, -0.049073365, 0.04275046, 0.06940209, 0.004949207, 0.062495247, 0.06277864, 0.03398583, -0.07566564, -0.06978502, 0.030890368, -0.08209818, 0.089257754, -0.07812727, -0.02234763, 0.08233176, -0.05451013, -0.0057436214, 0.06951966, -0.09094498, -0.013745215, -0.073025264, -0.009881517, 0.032219358, 0.030303674, -0.050586574, -0.035987977, 0.026376767, 0.013098812, -0.07193069, -0.0131770605, 0.05637764, -0.062901706, -0.0017167404, -0.045887053, 0.04681364, 0.06689669, 0.06272298, -0.039300393, 0.055552803, 0.06950836, 0.08061456, 0.016821079, 0.032490704},
   {0.0325197, -0.008013472, -0.01228822, 0.05559579, 0.06577267, 0.08697426, -0.06983477, 0.06873221, -0.030136993, -0.06400734, 0.033493884, -0.048893295, 0.020973384, 0.052312266, -0.002509348, -0.03295789, 0.024339579, 0.029517494, 0.035236545, 0.07659414, 0.063209, -0.08819024, -0.003921728, -0.03620659, 0.072616085, -0.0032087783, 0.060226027, -0.024172526, 0.05439768, -0.018273495, -0.043615222, -0.021194486, -0.08097874, -0.05231892, -0.09805396, 0.07009924, 0.035452828, 0.01989342, 0.015882704, -0.012866378, 0.048634745, 0.012376435, -0.009650503, 0.004378006, 0.030157017, 0.012964248, 0.02198114, 0.065477446, 0.091010936, -0.05849359, 0.03543163, 0.06212627, 0.078782186, 0.079899095, 0.07786391, -0.05989402, -0.08063462, 0.024817783, 0.038471542, -0.08121443, 0.02534057, -0.08249935, 0.0125561, 0.08148412},
   {0.071847245, 0.028002882, 0.054770026, -0.078278765, -0.09149223, -0.08144622, 0.05034158, -0.028770298, -0.06140974, -0.04034999, -0.0774606, 0.041122384, -0.03194913, 0.0054768655, -0.07932805, 0.053228565, -0.07593258, 0.0077022836, -0.0049817264, -0.056921974, 0.008139421, 0.07285672, -0.007344556, -0.07724926, 0.030416256, 0.09247341, 0.056960396, -0.07906903, -0.018578462, 0.030470856, 0.0832704, 0.058198094, 0.03161738, 0.09448075, 0.08060731, -0.06163521, -0.048791826, -0.06946336, -0.04016355, 0.045880757, -0.054406457, -0.048225176, 0.026937554, -0.07780537, -0.08776631, -0.07681661, -0.076510675, 0.0148227895, 0.024971655, -0.0028054756, 0.06250835, 0.055302404, 0.032064572, 0.00276421, 0.017408244, 0.055880334, -0.06482307, -0.024345879, 0.008887872, -0.033183955, 0.035337023, -0.07212435, -0.09135602, 0.0076957154},
   {0.064364746, -0.02566388, -0.028676797, 0.015172648, -0.061107565, 0.087656476, 0.027909165, 0.04182225, -0.01891051, 0.08386816, 0.00922621, 0.003919312, 0.07937635, -0.06882493, -0.083537206, -0.0058695152, -0.06094631, -0.051165465, -0.026021145, 0.07603924, -0.029777393, -0.021218948, 0.08085151, 0.065890156, -0.06583995, 0.020727696, -0.05629918, 0.035972465, -0.05587858, -0.05555219, 0.025116708, -0.010260018, -0.037687134, -0.062662, 0.07789346, -0.027364071, 0.002961875, 0.09429349, -0.0376686, -0.09170518, 0.02009533, 0.092206575, 0.08330118, 0.01019717, 0.08952905, 0.050909694, -0.01571735, -0.017106539, -0.036062784, -0.050159708, 0.077411994, -0.070899546, -0.057471313, -0.07224026, 0.011795141, -0.0036309403, 0.006978879, 0.024884209, -0.092625834, -0.08984224, -0.029867548, -0.015888631, 0.07256567, -0.010627058},
   {0.061949935, -0.010968419, 0.082583554, 0.082996406, -0.053390883, 0.014922176, -0.08390049, -0.05518063, 0.0072003654, -0.06382544, 0.032114945, 0.0069028856, 0.002697885, 0.022717858, 0.07068785, -0.025094748, -0.005896841, 0.05133734, 0.060920127, -0.004941197, 0.02970061, 0.039777104, -0.034568742, 0.002263993, 0.06993136, 0.006750413, -0.0725696, -0.051274676, -0.037143573, 0.06689037, 0.06374668, -0.09093313, 0.08580344, -0.045987956, 0.049175628, 0.055768244, 0.0435456, -0.037603635, -0.04969312, 0.041594572, 0.067471705, -0.04307601, -0.026925286, 0.04540337, -0.02343439, 0.017077846, 0.06987198, -0.0901591, 0.022040863, -0.02526338, -0.077438064, 0.008803487, -0.0855822, 0.092789225, 0.055394404, 0.052517824, 0.07705111, 0.008775976, 0.032956637, -0.07085404, -0.004447419, -0.048578333, -0.022178939, 0.03184474},
   {-0.036914594, -0.06722473, 0.019482391, 0.077521585, 0.0071643, 0.0047522504, -0.040695485, 0.0364543, 0.010490201, 0.072626494, -0.0321758, -0.04978727, -0.03989559, 0.014218562, -0.07086771, 0.08708758, -0.09775339, -0.067398414, 0.029405318, 0.060758725, -0.08086621, 0.0035285652, -0.036763616, 0.004835792, -0.04453864, 0.01587034, 0.078115, -0.06311312, -0.0773927, 0.050160684, 0.00031279493, -0.010362789, -0.057749745, -0.012885056, 0.06538097, 0.046543945, -0.06471316, 0.051672198, 0.0070425333, 0.082652114, 0.04024505, -0.04116575, 0.0839797, 0.05691441, -0.06857702, -0.0042171245, 0.029394586, 0.07732421, 0.072805, -0.08099149, -0.05726265, 0.087049045, -0.058250222, 0.08553784, -0.0919462, 0.07486605, 0.014089296, 0.0051086713, 0.055512182, 0.0035011598, 0.017615648, -0.05203793, -0.008791526, -0.03707777},
   {0.052626744, -0.016076827, 0.06026985, 0.083081126, -0.09345424, -0.08736019, 0.06668161, -0.030855514, -0.0911872, 0.022773445, 0.0015480667, -0.08924035, 0.012746453, 0.09508504, 0.08416062, -0.059415665, 0.07184877, 0.056602158, -0.08332118, -0.029463418, 0.0745298, 0.08157288, -0.030845666, -0.047147848, -0.04897172, -0.08391668, 0.072888926, 0.07557077, 0.056691386, -0.037281472, -0.058645427, 0.023613432, 0.025110677, 0.012666552, -0.081069134, -0.046823926, -0.050571974, -0.063540556, -0.017297996, 0.07142519, -0.040378217, -0.062383074, 0.0392971, -0.09019006, 0.05654487, -0.0975755, -0.06363422, -0.060710475, -0.09095747, 0.022784393, -0.07835442, -0.06456196, -0.069938526, -0.017702572, 0.031985633, -0.06067304, 0.037876725, -0.0724187, -0.030947935, 0.08966497, 0.07740259, 0.018912196, -0.0070119794, -0.03982992},
   {-0.06678582, 0.06855972, 0.0018960587, -0.079391345, -0.06486568, -0.03951304, 0.0064263185, 0.030776273, 0.075377345, 0.033752564, 0.08669499, -0.05455215, 0.014352173, -0.05950899, 0.036243327, -0.034932647, -0.040623102, 0.004950665, -0.029726297, -0.028563522, -0.08335023, 0.09206492, -0.05105957, -0.01645615, -0.019478062, 0.08075703, -0.081563674, -0.09371525, 0.0072738156, 0.037221156, 0.058482643, 0.013104935, -0.07695829, -0.03724558, -0.053027652, 0.057753954, -0.08557683, -0.053727575, 0.020732198, 0.08779294, -0.045054264, 0.04166948, 0.026450364, 0.08969981, -0.061713498, -0.039292805, -0.095058486, -0.09192311, 0.06749359, 0.061761472, -0.037765983, -0.026036717, -0.04817727, -0.036959644, 0.008988373, 0.10114886, -0.02587019, -0.07494486, -0.034731273, 0.04342323, 0.04527758, -0.0046103, -0.06875598, 0.08371291},
   {-0.0725894, 0.010025531, 0.05460435, 0.04093172, 0.028266925, -0.06961181, 0.08090871, -0.021024764, -0.016793102, 0.05983385, -0.03732292, -0.08667399, -0.021117404, -0.04254159, 0.013843656, 0.03936135, -0.034975745, 0.08931268, -0.06758428, -0.058648266, 0.059031516, 0.028881354, 0.06521218, -0.011023, 0.0010289162, 0.012438693, 0.022442088, 0.06649103, -0.004904188, 0.03694979, 0.0062603094, -0.07834757, 0.062549256, -0.02457626, 0.04547314, 0.056932807, 0.07238889, -0.037522, 0.0666506, 0.005693175, 0.04224737, 0.036663868, 0.05305162, -0.011866629, 0.052873638, 0.085060395, -0.015449161, 0.055201527, 0.053130526, -0.035362195, 0.009129499, 0.05115018, -0.09246986, -0.04111073, 0.040375702, 0.08793979, 0.017593056, 0.06702554, 0.05372914, -0.027118975, 0.074365176, -0.012763187, 0.077285826, 0.060812965},
   {0.07691153, 0.027851503, 0.06349561, -0.03612385, 0.04243982, 0.032263882, -0.054566894, 0.051354274, -0.04921995, 0.082344145, 0.027998373, -0.006189972, 0.04742033, 0.038300678, 0.046533532, 0.00079630315, 0.013300473, 0.023469567, -0.04754205, 0.065979205, 0.009251903, 0.040849324, 0.034956366, 0.036969103, -0.09151053, -0.025992159, 0.04081613, -0.06826737, 0.018435933, -0.047709316, -0.033971593, -0.08409714, -0.032864355, -0.08343139, 0.014423456, -0.053060003, -0.091674685, 0.006842529, 0.005638194, -0.06335319, 0.085131176, -0.051621497, 0.048118897, -0.03993279, 0.053532545, -0.0723641, 0.019667678, -0.090229094, -0.048855305, 0.03410704, 0.023632398, -0.064129874, -0.074885815, -0.024937987, 0.016487986, 0.0029588735, 0.0766268, -0.05204041, -0.027855597, 0.075333774, 0.013195394, 0.059751265, -0.050628666, -0.0037458476},
   {-0.07427102, 0.022171106, -0.041250892, -0.04878892, 0.0832111, -0.044240527, -0.006922374, 0.041828897, 0.06053567, 0.029955877, -0.068158835, -0.04758379, 0.073699765, -0.028638588, 0.03473229, -0.03923861, -0.07760304, -0.053336766, 0.03195461, -0.04526769, -0.033706713, 0.08740187, 0.06311247, 0.07960648, 0.018934904, 0.046856947, 0.052999847, -0.041472044, 0.09015093, -0.03330208, -0.07510816, -0.0015688256, 0.09102813, 0.09194482, -0.060018037, -0.07699597, -0.0302612, -0.0069263736, 0.033669367, 0.00093146414, -0.066964015, 0.08125784, 0.07808905, 0.046035744, 0.037830196, 0.08710062, 0.05308361, 0.06533767, 0.0016725293, 0.012360401, 0.019299623, -0.04348194, 0.033980843, -0.08323794, -0.00021336228, 0.04077116, 0.07244365, -0.05876366, -0.04859219, 0.06931298, 0.044717323, 0.07774071, 0.008309692, 0.027778165},
   {-0.011478581, 0.014717941, -0.028274685, -0.019617796, -0.083211936, 0.07946385, -0.08751874, 0.0462746, 0.07149179, -0.002583898, 0.02347146, -0.077049, -0.06681819, 0.09327677, 0.05851517, -0.033593003, -0.06924579, 0.05278387, -0.092609145, -0.09432957, -0.08816471, -0.05240425, 0.068742596, -0.023310639, 0.040175512, 0.04823278, 0.014568636, -0.04319107, 0.091584675, 0.07029534, -0.059828434, -0.050598703, -0.041839734, 0.07102181, 0.013184046, -0.05263672, 0.0487356, -0.01766666, -0.03368722, -0.015819237, 0.04628297, -0.041299377, -0.06814899, 0.01592122, 0.05045268, 0.05523297, -0.014395598, -0.07276725, 0.08996281, 0.043554902, 0.0060491487, 0.06060695, -0.0010570914, -0.060101595, 0.08515275, -0.018704774, 0.04525059, 0.011558829, -0.0052653477, -0.060680415, 0.047325645, -0.049453463, -0.008446633, -0.071318164},
   {-0.041295014, -0.052188892, 0.057302132, 0.027775992, -0.06902585, -0.05282552, -0.0064984625, -0.08437251, 0.057385776, 0.062794924, -0.023404777, 0.073540665, 0.008693263, 0.012368934, 0.008870654, 0.04306931, 0.025941955, -0.020547412, 0.022393212, -0.088962555, 0.018722149, 0.07062594, -0.028234433, -0.013745628, 0.05230356, 0.08716698, 0.052966293, -0.0076452154, 0.02719123, -0.059118666, 0.022259666, 0.06861551, 0.019954927, 0.0044197943, 0.055888824, 0.06846764, -0.07585356, 0.07068019, 0.06831747, -0.06851381, -0.01730311, 0.027060494, -0.02371763, 0.043507524, 0.042657003, 0.042214777, 0.02834023, 0.060619175, 0.090128385, -0.01672605, -0.011996768, -0.08127611, -0.044649802, 0.08255317, 0.052611075, -0.007852202, 0.05982262, -0.089355655, -0.0649773, -0.07249514, 0.0537548, -0.05675627, 0.044485852, 0.05502465},
   {-0.0022919804, 0.047268823, -0.08541825, -0.08433203, 0.04450479, 0.019240402, 0.01259584, 0.064091936, 0.06310967, -0.044697642, 0.0026452914, 0.056141138, -0.013512395, 0.022380143, -0.06385178, 0.05045057, -0.0704929, 0.034549944, 0.065165035, -0.025543362, 0.05890641, 0.04291864, 0.063944854, -0.05955652, -0.00016376188, -0.033172548, 0.07398345, 0.0042043547, -0.013227455, -0.08099113, -0.06216514, 0.015193909, -0.028039664, 0.074520156, -0.025739314, -0.008562475, 0.078570485, -0.030874232, 0.011001453, -0.022593431, -0.07304148, -0.08788582, 0.060025986, 0.0031658486, -0.07119105, -0.011724833, 0.048041675, 0.017331988, 0.09853371, -0.022962965, -0.05560063, 0.028647989, 0.011464711, 0.029333696, 0.08243518, -0.053399924, 0.063283786, 0.013468807, -0.0812283, -0.07500223, 0.0043117297, -0.049844842, -0.03387527, 0.056499477},
   {-0.083787054, 0.082730405, 0.038931254, -0.060584158, -0.021302408, 0.024572251, -0.0033226905, 0.018145584, 0.04203803, -0.009858895, -0.0848858, -0.04149394, 0.08581104, -0.004508561, 0.08414429, 0.08557133, -0.014558029, -0.0015070215, -0.0032894164, -0.08832923, 0.015789663, 0.012023544, -0.033303156, 0.06391076, -0.0031526794, -0.057417713, -0.031584654, 0.03861776, -0.035882402, -0.034496102, 0.052976225, 0.002977032, -0.053099904, -0.07466972, 0.08636533, -0.017530791, -0.086083554, 0.026290208, 0.08328441, -0.05633214, -0.08105303, 0.06275625, -0.0871781, 0.040021546, -0.005898411, -0.05486171, -0.047251392, 0.007889142, -0.07192215, 0.037700124, 0.00074823806, -0.08091268, -0.05148689, 0.06778347, 0.07160301, 0.06299858, 0.05031956, -0.012088435, 0.066969775, -0.036416613, 0.030718489, -0.017788231, -0.06536332, 0.006006608},
   {0.042384785, -0.009160554, 0.028097728, -0.039979957, -0.036103036, -0.003724988, 0.0033813603, -0.060878124, -0.049878065, 0.09725321, -0.0039956123, 0.016387276, 0.05542379, -0.012626141, 8.456409e-06, 0.05814857, 0.036261097, 0.016223654, 0.0028996617, -0.056285385, 0.030091558, 0.009612163, 0.07364048, 0.024664633, -0.08168754, 0.05560409, 0.08357364, 0.04870545, 0.003135495, -0.01203011, 0.05134462, 0.07360523, -0.050951518, -0.042370647, -0.003441818, -0.01695382, -0.033632863, -0.0908315, -0.039812077, 0.019715577, 0.07057664, 0.06929179, -0.05208813, 0.03816537, -0.042414933, 0.073370226, -0.019866182, -0.036026303, -0.01713888, -0.061495192, 0.011947068, 0.053092204, 0.08603028, 0.085667945, -0.08986792, -0.06976362, 0.08228039, -0.049071148, 0.074439414, -0.0430804, 0.07669716, 0.014007315, 0.044659004, -0.015538374},
   {-0.04595548, -0.009796429, 0.038225945, -0.023901518, 0.045790486, -0.030050607, 0.06652927, -0.053320784, -0.06485952, 0.02506288, 0.054429628, 0.0145984795, 0.06193509, -0.0641178, 0.055717833, 0.08934725, 0.045252237, 0.006978728, 0.023986824, 0.06825017, 0.02875285, -0.07109771, -0.075478554, 0.039252974, 0.026451504, 0.07290556, 0.05943266, 0.009243671, 0.08677732, -0.0712143, -0.00035523743, 0.08706588, -0.023319185, -0.05625916, 0.07402324, 0.045143306, -0.05224432, 0.09455379, -0.013237347, -0.025050253, 0.047800567, -0.0016177967, 0.06323171, -0.049338482, 0.06031703, -0.043937296, 0.048937015, -0.04931725, 0.06706295, -0.06412187, 0.067526236, -0.05504514, -0.020391194, 0.08389918, -0.0368775, -0.0557239, 0.051803995, -0.09252363, 0.07211947, -0.010237776, 0.050473373, 0.072438784, 0.026948053, 0.022999097},
   {-0.00830299, 0.08036313, -0.038343325, -0.08322492, -0.0092441635, -0.02458712, 0.06721457, -0.03297246, -0.062178813, -0.080062404, -0.051793236, 0.040727954, -0.05654949, -0.03692036, -0.08005169, -0.014596641, 0.08368627, -0.0047776997, -0.091601186, -0.080876336, -0.004058344, -0.038769603, 0.028413236, 0.08776047, 0.043212723, 0.07174635, -0.0027558277, -0.0013576049, -0.03443581, 0.03766384, 0.06466111, -0.032232583, -0.07008987, 0.08322969, -0.016362716, -0.01976385, 0.06944122, 0.06810084, -0.026151884, -0.036074053, 0.0035478822, 0.05452902, -0.030908415, -0.0016827434, 0.06566497, 0.06252699, 0.028631166, -0.061700996, -0.08258191, -0.07972036, -0.09762722, 0.021360382, -0.03809159, 0.02143336, 0.005728729, -0.04440225, -0.09073753, -0.02648232, -0.09310387, -0.07047096, -0.037825905, -0.08729732, -0.008679075, 0.019541448},
   {-0.0019413949, -0.006237125, -0.009728445, -0.08957595, -0.039187334, -0.029008687, -0.052858137, 0.04453453, -0.05814101, -0.051773567, 0.045897685, 0.079693735, -0.07133238, 0.010173399, 0.09109839, -0.00097474456, -0.04263065, 0.051395066, 0.07822173, -0.08465082, 0.018582152, -0.041581087, 0.08518001, 0.060605817, -0.04284117, -0.08797693, -0.08982961, -0.016677627, -0.04944163, -0.012272336, -0.043159436, 0.057055563, -0.009717733, -0.01063695, 0.086088575, 0.042738453, -0.0042723506, -0.06088481, 0.07147657, 0.09105287, -0.041034423, -0.037810214, 0.01515846, 0.021323182, -0.0878862, 0.000548878, 0.08785651, -0.091910064, -0.038069207, -0.051243454, -0.01743734, -0.054288637, 0.021445323, -0.049806576, 0.092458494, 0.041364443, 0.031094268, -0.045914304, -0.0043736845, 0.051404856, 0.05428269, -0.0054707527, -0.06251709, 0.07923057},
   {0.041957274, 0.071466714, 0.035936847, 0.025638621, -0.022604631, 0.050965004, -0.032823414, 0.0067238244, -0.05600643, 0.030847168, -0.013210677, -0.07520156, 0.050959595, -0.056956932, 0.072951905, 0.047401644, -0.044997275, 0.04922215, -0.061901055, -0.07699697, -0.0051646363, 0.023597393, -0.08805016, 0.065915786, 0.037379384, 0.025837, 0.011515228, 0.08480831, -0.034726888, 0.039738588, 0.07488162, -0.005433908, 0.013814352, 0.015482875, 0.05822828, 0.009329348, 0.014959713, 0.017790174, -0.033237655, -0.07840584, 0.015122139, 0.03785304, -0.06501424, -0.045706395, 0.025691401, 0.068652496, 0.06789566, 0.022474036, 0.026436698, 0.08607513, 0.06564026, 0.006391205, 0.04462872, -0.0780374, 0.071022235, -0.06238645, 0.020058714, 0.04162894, -0.014746308, 0.016997963, -0.015685176, 0.01585915, -0.026818825, 0.025994634},
   {-0.07734075, 0.06961617, -0.014153458, -0.015919272, 0.05738688, 0.050255954, -0.019553617, -0.05672752, 0.024334608, -0.026214872, -0.07755156, 0.034724522, 0.059887446, 0.028800366, -0.08995916, -0.07014589, 0.004526336, 0.02260106, 0.005725011, 0.039727867, -0.09768273, -0.04604136, -0.0940048, 0.08897192, -0.06772587, -0.045818813, 0.007082375, 0.07955095, 0.07089705, 0.048653357, -0.086117215, 0.05636988, 0.08894918, 0.058701232, -0.036884755, -0.018366804, -0.09658525, 0.09077868, 0.009201099, 0.0169814, -0.088585526, 0.01272361, -0.05436893, -0.029645689, 0.01634824, -0.03795599, 0.08149064, -0.09567381, 0.029694093, -0.08079491, 0.04487358, 0.08194164, 0.07673559, -0.05950771, 0.04097695, -0.03176846, 0.06454929, -0.042240247, 0.030359253, -0.05485462, -0.0361168, 0.08600507, 0.03527178, 0.007259959},
   {-0.09142017, 0.07496482, -0.08202027, -0.03502356, 0.072525285, 0.024430003, 0.08887297, -0.079226315, 0.01415207, -0.019619687, -0.010286495, -0.017268775, 0.016872756, 0.07232003, -0.017544292, 0.088777594, 0.0058175875, 0.01004988, -0.03893193, -0.02728411, -0.008843381, 0.02361413, -0.09887634, 0.080596216, -0.07580372, 0.013202775, 0.08935372, -0.09076173, -0.020112917, 0.006781541, -0.010244825, 0.054835744, 0.08171252, 0.018626587, -0.0033916424, -0.06827449, 0.020462926, 0.07872534, 0.038404223, -0.028135315, 0.064819574, -0.06811374, -0.04027179, 0.021723635, 0.013491627, -0.015642397, -0.03556596, -0.04192572, 0.035191815, 0.09510984, 0.05988911, 0.064247794, -0.015363229, 0.0713756, -0.00094711035, 0.08332841, -0.030378409, -0.0694349, 0.04915399, -0.044642203, -0.029223407, 0.08477468, 0.014798715, -0.08346286},
   {-0.005740404, -0.047133528, 0.07754292, -0.0060324585, 0.069690734, -0.09305654, 0.08580016, -0.049738914, 0.025154933, -0.058519635, 0.0021079853, -0.082527034, 0.0036030784, -0.022814093, -0.013215616, 0.019129232, -0.078691445, 0.072901644, -0.016995572, -0.07221183, -0.09243502, 0.004980947, 0.03872202, -0.07454172, -0.07638385, 0.0647448, -0.036637586, 0.0032615734, -0.0057853237, -0.09027739, 0.0390233, 0.049464997, -0.034884144, -0.0048713027, -0.08967661, -0.023375755, 0.019787738, 0.04124287, -0.03718827, 0.03834299, 0.051906694, 0.05232718, 0.040242936, 0.031734027, -0.06925662, 0.04530553, 0.012598186, 0.034776025, 0.047112208, -0.0752281, 0.052457258, 0.08696384, 0.029966068, -0.0907352, -0.03418429, 0.08964833, -0.054495484, 0.04915151, -0.011221483, -0.05265833, 0.048833035, 0.0007691607, -0.086370744, 0.071273856},
   {-0.029057492, 0.031533275, -0.06467692, -0.022429653, 0.015174961, 0.057061415, -0.057371534, 0.08652778, 0.07684476, -0.08613085, -0.08342058, -0.0075482065, -0.019450188, 0.005262267, -0.064520046, 0.046737738, 0.019599251, 0.07637081, -0.061500244, -0.053224217, -0.081464365, -0.077656716, -0.09436237, -0.08927657, -0.03887144, -0.08022567, 0.012766529, -0.01100771, -0.028576791, 0.038331874, 0.016371021, 0.013431812, -0.066863045, 0.06604517, 0.025066772, 0.014212346, 0.062454306, 0.07857791, 0.0060418695, -0.025129393, -0.0886073, 0.018922336, 0.058258682, -0.008408591, 0.07464227, -0.06872925, -0.07999122, 0.043204114, 0.0543495, -0.07386812, 0.06717466, -0.04602366, 0.027610483, -0.079615906, 0.030847348, -0.020714292, 0.07102664, -0.034265917, -0.052810494, -0.013144732, -0.07571634, 0.057394303, 0.015178376, -0.012680553},
   {-0.029341124, 0.06790626, 0.018777551, 0.06866508, 0.08835596, -0.072458625, -0.028059911, 0.010581385, 0.06535845, 0.07123194, -0.07236752, -0.075441904, 0.041907288, -0.06660667, 0.037372686, 0.051180266, -0.041925613, -0.030146688, -0.050632495, 0.01633571, -0.052625638, 0.018991688, -0.07809897, -0.05706239, 0.017205423, 0.00026110475, 0.035342287, 0.092201956, -0.019244455, -0.023081996, -0.08656722, 0.05101286, 0.054677017, 0.007205556, -0.068702444, -0.030577516, 0.05313127, -0.021818176, -0.09755944, -0.09225239, 0.031945083, -0.08161178, -0.0027821804, -0.022889651, -0.055909414, -0.040966958, 0.07267439, -0.044262927, 0.060241453, 0.037857015, 0.027145563, -0.07354633, 0.06856273, -0.040529214, -0.034780797, -0.012086669, 0.028514495, 0.05362392, 0.06332155, 0.062944084, 0.032508034, 0.07809598, -0.018445654, -0.012279228},
   {0.050199103, 0.00012458356, 0.0068847924, -0.028053515, -0.029765526, -0.067250304, 0.03240488, -0.050302744, 0.040612087, -0.01955335, -0.017483868, -0.0001662858, -0.014981389, 0.09310238, -0.089516565, -0.06509051, 0.01502159, -0.055099715, 0.00041956455, -0.08197658, -0.069789395, -0.031247323, -0.087071605, 0.026746877, 0.0081374245, -0.07256465, 0.012300408, -0.0850769, 0.0031773224, -0.09095933, -0.037515353, 0.090309665, 0.031897582, 0.09263703, 0.036774393, -0.0076233577, -0.09011451, -0.0635555, 0.034933947, 0.055534996, 0.043755446, 0.011372238, 0.08318287, 0.05929973, 0.03715175, -0.06637606, 0.024090782, -0.022076357, -0.0059813205, -0.018823233, 0.040113796, 0.07962855, 0.06949722, 0.04693947, -0.017152473, 0.015493067, 0.020454807, 0.039553534, 0.036412172, 0.05618209, -0.086405635, -0.07419778, 0.035256147, -0.04361857},
   {-0.075172335, -0.07885763, -0.053352147, 0.08548811, 0.021822492, -0.024501707, -0.00036329761, 0.005068165, 0.050714727, 0.05958925, -0.00015491992, 0.09849175, 0.0774933, -0.037991084, -0.040296137, -0.06066064, 0.071628734, -0.039612677, 0.07422169, 0.02689148, 0.08086599, 0.07250118, 0.014266826, -0.016144998, 0.027178202, 0.0110889375, -0.06293962, -0.030977774, 0.022082865, -0.07287673, 0.06110767, -0.062816165, -0.0029433817, -0.060865305, 0.04560875, -0.012477321, -0.024667636, -0.074309446, 0.03193875, 0.03742329, -0.023802811, 0.0469046, -0.053617362, 0.025144584, -0.08643074, -0.0500514, 0.020302193, 0.04443368, -0.052798238, 0.050013725, -0.064331904, 0.084743746, -0.01962733, 0.04757253, -0.041052684, 0.0036498671, 0.06598534, 0.0075826044, -0.047674697, -0.031838052, 0.07528784, 0.002268441, 0.008207755, 0.022490308},
   {0.006286414, 0.013597912, -0.03012446, 0.05214206, -0.012824806, 0.07732946, 0.021871764, 0.05825681, -0.025132015, -0.07119004, -0.064641036, 0.040618725, -0.012652501, -0.035444852, 0.07150767, -0.055782307, -0.09416673, -0.07804415, -0.030310817, -0.09609009, 0.028363254, 0.0881549, -0.035982605, 0.017140657, -0.046832424, -0.047397573, -0.04099315, -0.03513833, -0.08222496, 0.0024682134, 0.09619768, 0.019532016, 0.027609058, 0.08514855, 0.031091228, 0.071146205, -0.066297494, -0.08320071, 0.06955918, -0.039810468, 0.0006355438, -0.03007643, 0.056017764, 0.07194991, 0.0206744, 0.07591554, -0.082776554, -0.08927565, -0.08856421, -0.005000771, 0.012671485, -0.06496535, -0.054008234, 0.088084675, -0.041899003, -0.08202224, -0.030689301, -0.020117862, -0.043154947, 0.08938267, 0.08847977, -0.058575153, -0.027962355, 0.042575244},
   {-0.04379798, 0.052772984, -0.022233699, 0.08013101, -0.024050238, 0.0069843633, 0.04903575, -0.041221507, -0.07221605, 0.05690527, -0.06962347, -0.009106069, 0.028946124, -0.07394987, -0.0015631989, -0.075524226, 0.03864556, 0.06517955, 0.07222674, 0.06001761, -0.09522186, -0.014443651, -0.023596715, -0.015350543, 0.066261046, -0.023544034, -0.07005247, 0.065284856, -0.051822383, 0.013579227, 0.09059235, 0.03315214, -0.0015909895, 0.001714392, -0.087503254, 0.05527337, -0.09501774, 0.0075919167, 0.023569541, 0.067111276, 0.034191053, -0.03462993, -0.0022655018, 0.02512946, -0.032679353, -0.057859585, -0.050142553, 0.066342205, 0.08362987, 0.08271914, 0.04205705, -0.04649983, -0.097828254, -0.093131974, -1.31726265e-05, 0.061905, -0.02671423, 0.02552772, 0.048292033, -0.031960666, -0.059147693, 0.0034813136, -0.04463299, 0.008844895},
   {0.063707724, 0.086897366, -0.02362818, 0.043770544, 0.0050199265, -0.08872002, 0.013973321, -0.047397856, -0.033401728, 0.042648155, 0.042054392, 0.07695387, 0.06112849, 0.023007428, 0.057166584, -0.026759982, -0.022330984, -0.06176714, 0.0224865, -0.094536595, -0.043661274, -0.084398195, -0.04752574, 0.049210556, -0.04369364, -0.09243953, 0.03456055, -0.018227275, -0.059045848, 0.076077424, -0.098704405, 0.05947745, -0.09095858, -0.0034663193, 0.023685876, -0.085235305, -0.08777883, 0.03965907, -0.0718697, 0.053748988, -0.0026120257, 0.07021166, 0.087464266, -0.080325864, -0.0025052214, 0.052640628, -0.033284295, -0.020824973, -0.06455513, -0.04171291, -0.054795597, -0.035029806, -0.033869028, -0.07678882, 0.053527705, -0.045379784, 0.08698832, 0.046593074, 0.039914988, -0.015880233, 0.041364092, 0.07526373, -0.011467327, -0.07290708},
   {-0.007220972, -0.032656863, 0.061700713, 0.032860614, -0.056653064, -0.0075869747, -0.08883555, -0.088037394, -0.042716388, 0.041547492, -0.0016983151, -0.007569257, -0.063988015, 0.024242738, -0.075773075, 0.011941828, -0.026575007, -0.08262779, -0.06201528, 0.010210758, -0.074962914, -0.058314107, 0.058234207, 0.058055468, 0.05453253, -0.016599663, -0.03543919, 0.08996388, 0.07172253, -0.08566757, 0.04694492, 0.083233565, -0.032774847, 0.03621755, 0.04938289, -0.03122224, 0.08691934, 0.053124238, -0.09898303, -0.005032137, -0.0102831675, 0.08040578, -0.033761322, 0.06194497, -0.0822102, 0.0852479, 0.083672315, -0.002309725, -0.07976014, 0.06851287, 0.07092234, -0.060231462, -0.07044171, -0.03757976, 0.03525185, 0.076020494, -0.07941803, 0.06566471, 0.025115706, 0.019581314, -0.08227713, 0.028796256, -0.051177714, -0.02422906},
   {0.016709823, -0.08361982, 0.04922992, -0.024216183, -0.03992272, -0.0048716604, -0.040218115, 0.03951123, 0.006254915, -0.060006868, 0.012208328, 0.02224434, -0.018202543, 0.0935365, 0.068884544, 0.017639585, 0.02459117, -0.092675805, -0.079262465, 0.03707773, -0.06849965, 0.015116708, -0.07403368, 0.061429597, -0.02997686, 0.07040874, 0.09413884, 0.051116817, -0.04516953, -0.06057645, 0.007133306, 0.025435857, -0.06090538, -0.03836572, -0.08154398, 0.06910028, -0.03267459, -0.014611546, 0.035350144, 0.08570715, 0.0045289863, -0.060518336, -0.061571736, -0.010246515, 0.08278421, 0.019514462, -0.08689876, 0.076773606, 0.005896013, -0.08423585, -0.067540616, 0.00432992, -0.02487944, 0.061735563, -0.015979715, 0.035937, -0.069248624, 0.03604889, 0.050716035, -0.011855418, 0.016878972, 0.05460637, 0.0559551, -0.075974695},
   {-0.059296444, -0.025622282, 0.056210265, 0.056922924, -0.046594866, -0.032562047, -0.032320857, 0.027503688, -0.030740911, -0.065057494, -0.0892365, -0.028816031, -0.0218153, 0.0035889412, 0.025331832, 0.08553731, -0.09108094, -0.007530518, 0.09133213, -0.01613715, -0.092569165, -0.017693296, -0.03210449, -0.012053609, 0.036980413, 0.03204776, 0.044299055, -0.06711077, 0.011099935, -0.06459463, 0.03188356, -0.053634726, -0.0578417, 0.028962085, -0.06075035, 0.024737174, 0.019519769, -0.042879406, 0.08756396, 0.0068863556, -0.07474269, -0.052745417, 0.043922886, 0.042388104, -0.04770696, -0.09677686, -0.083063975, 0.044672824, 0.041019548, -0.055533025, 0.07951956, -0.06799257, -0.00093323144, -0.09086406, 0.033012696, 0.08145466, -0.039369855, 0.03569056, 0.03766922, -0.0044940077, 0.035253156, 0.032719232, -0.03429011, 0.0851995},
   {-0.027536344, 0.06016187, 0.04885034, -0.035551615, -0.056919575, -0.013223298, -0.05955293, 0.078710176, 0.013750064, 0.01830744, -0.018734604, -0.06637678, -0.09193706, 0.04683973, 0.031928398, 0.05585403, 0.087025404, -0.024931625, -0.05930489, 0.0035780084, -0.042030178, 0.09126192, 0.01722251, -0.032308847, -0.09899185, -0.030620145, -0.070578754, 0.060491655, -0.05962251, -0.037316713, 0.04949134, -0.105084434, -0.06984923, 0.043445557, 0.08479457, -0.095961034, 0.017076299, 0.029874692, 0.056420706, -0.09034237, 0.04837041, -0.024206176, 0.047041453, 0.0036477074, -0.04361331, -0.052564375, -0.024947274, 0.0199122, 0.04116821, 0.069589324, 0.04300099, 0.06590957, -0.026000906, 0.01375553, -0.059491556, -0.008501892, -0.025590897, -0.00034591134, 0.0866855, -0.0013359842, 0.066782035, -0.037110757, 0.04089335, -0.028235132},
   {-0.049107626, -0.06501025, 0.0643044, -0.067914955, 0.06951915, -0.032614313, -0.09604254, -0.005823572, -0.08466234, -0.018904444, 0.06074331, 0.075298145, -0.067594334, 0.09516622, -0.031262133, 0.059783243, 0.059627287, -0.034736767, -0.06276795, -0.017393736, -0.09066632, -0.07095026, -0.09458202, 0.05406294, -0.075153366, 0.004625321, -0.009600783, 0.059042595, -0.041461237, -0.043826416, -0.079163134, 0.037325393, 0.09266528, 0.04876934, 0.02951436, 0.08402678, 0.03884492, -0.041012414, -0.05596747, -0.056503125, -0.06524505, 0.04312823, 0.08405472, -0.08886826, -0.0016029222, 0.037528586, -0.096002676, -0.06095228, 0.022164093, -0.0030058487, -0.08689106, -0.04645522, 0.07935555, -0.050033603, 0.07703302, -0.033448406, -0.029675603, 0.073661834, -0.060973927, 0.053511173, -0.08761981, -0.06740371, -0.06420872, 0.08598347},
   {0.020931229, 0.021796513, -0.06059139, 0.030461382, -0.04724698, -0.03559358, -0.019392576, -0.051926453, -0.081095845, -0.033958524, 0.0088300705, -0.070432864, 0.029315852, -0.011149497, -0.04312035, -0.01749245, -0.060347445, 0.011851035, 0.040188514, -0.0776788, 0.051110342, -0.03000678, 0.05887406, -0.06786769, 0.045965195, 0.018512331, -0.020049732, -0.0045734392, 0.06027799, -0.04628368, -0.01653295, 0.054789174, -0.040600143, 0.039291997, 0.021126572, -0.024713429, 0.06316864, -0.061974943, -0.013638901, -0.006613806, 0.041787375, 0.010591753, 0.08471017, -0.07553544, -0.06507277, 0.08389079, -0.05661634, -0.08624186, 0.067710616, 0.011290058, -0.025307002, -0.009963088, -0.04170388, -0.051310327, 0.018956736, 0.071590655, -0.045588333, -0.075369075, -0.07981726, -0.002321072, -0.022516612, -0.002436176, -0.0631388, -0.0276364},
   {0.058142018, -0.025702026, -0.028083429, -0.010125385, 0.049003225, 0.021742146, 0.032581333, -0.038453884, -0.08788666, 0.0069709676, 0.016317226, -0.017904786, 0.07221178, -0.08052453, -0.041807808, 0.028707594, -0.06996917, 0.056252383, 0.06434829, 0.082172416, -0.07386333, 0.08612082, -0.021086667, -0.02122762, -0.006753482, -0.0750598, 0.07556731, -0.06714709, 0.00043080002, -0.00093120337, -0.07422245, -0.0886758, -0.029836968, -0.069784395, 0.05126721, 0.01573801, 0.072799146, 0.032405186, 0.031875446, 0.09276845, 0.08220626, 0.06768235, -0.07717078, -0.05315375, -0.07423667, 0.046911072, -0.0037268726, -0.009066826, 0.017645437, -0.017721789, -0.09194618, 0.091044255, -0.072483554, -0.092071615, 0.06750376, -0.09186646, -0.05714589, 0.032616578, -0.061496526, 0.031513855, -0.054616172, 0.060962446, -0.057841513, -0.06043408},
   {-0.049115606, 0.038628835, 0.012627072, 0.036887415, -0.03184908, -0.030814515, -0.023410698, -0.09810443, -0.0082798805, -0.030171733, -0.010666706, -0.04853776, -0.06525335, 0.0203411, 0.03271883, 0.012530066, 0.06804719, -0.07462649, -0.01753088, 0.0019088378, 0.012883813, 0.090234615, -0.026374346, 0.03206692, -0.004655339, -0.011151061, 0.0014628, 0.09105702, 0.027795836, -0.076366276, -0.06518444, 0.08037052, -0.022879615, 0.011328474, -0.051313445, -0.020357847, -0.08681479, -0.004777759, -0.010884506, -0.08236272, -0.01898615, -0.0033701584, 0.00812894, -0.018458076, 0.041795388, -0.029065892, -0.015576668, 0.0026435154, 0.023763219, 0.042765547, -0.00165017, -0.047610622, 0.04721748, 0.046857275, 0.050604068, -0.04920582, 0.034133315, -0.07354891, -0.03296719, 0.04953552, -0.09275087, 0.016345128, 0.080027185, 0.026393697},
   {-0.02876895, 0.049434125, -0.02788989, 0.08065956, -0.07716481, -0.099939846, 0.030197345, -0.046578158, 0.021552587, -0.060935937, -0.0015345216, 0.058610518, -0.057366554, 0.017974162, 0.08889698, 0.0775053, 0.055392075, 0.07646906, -0.027926326, -0.09773522, -0.07355259, -0.052930586, -0.06765167, 0.07923245, 0.024616392, 0.08961664, 0.07808339, 0.04643298, 0.041034706, -0.039682202, -0.03503922, 0.06584452, -0.07456343, 0.079728514, 0.0823382, -0.00087448256, 0.08495899, 0.0719565, -0.09613294, -0.07474334, -0.022214102, -0.06283386, -0.04869597, 0.04979349, 0.050848804, -0.01861755, -0.007579887, -0.06812108, 0.011557719, 0.010776702, 0.03305251, 0.07189796, -0.0481269, 0.0851411, 0.0018910319, 0.08643354, -0.06109472, 0.09253887, 0.056429453, 0.0519602, 0.0052768816, -0.0023299158, 0.027694644, -0.070766225},
   {-0.07986415, -0.046841186, -0.053388014, 0.022152394, -0.058529183, -0.084847905, -0.09091908, 0.008359129, -0.051352892, 0.024938667, -0.000117495656, -0.038814954, 0.0865232, -0.030019097, 0.03411538, 0.039636217, -0.09119159, 0.066282235, -0.04950397, 0.007518198, 0.017308544, -0.012090665, 0.059442386, -0.02419895, 0.0067440956, -0.060872015, 0.006222374, 0.02828978, -0.084039964, 0.020327814, 0.0006309134, 0.062450066, 0.033099465, -0.09229425, -0.030810362, 0.087548725, 0.0762737, 0.07072313, 0.018281978, -0.0131827295, -0.03580794, -0.050859388, -0.0398273, -0.067108095, 0.046279144, 0.045705203, -0.08100508, -0.039521076, 0.050032623, 0.026659096, 0.009230502, 0.07450623, -0.09435561, -0.068381034, -0.041259486, -0.06132609, 0.06226475, 0.08323967, -0.084273465, 0.0644528, -0.08868169, 0.021472536, 0.062732615, -0.06870806},
   {-0.10039587, 0.034275416, -0.08356036, -0.0630083, 0.068660446, -0.07272937, -0.006713505, 0.040791348, -0.007499061, -0.072257094, -0.08538039, 0.073483124, 0.014202349, 0.0132193435, 0.0801254, -0.06839125, 0.03682879, 0.04566651, -0.0223796, 0.069542125, 0.050039828, -0.054074578, -0.020392854, -0.049365338, 0.08952429, 0.00880598, -0.07900697, -0.0361407, 0.016288817, 0.029810712, 0.022073695, 0.0073695905, -0.039041284, 0.06609169, 0.035171226, -0.014125594, -0.065998085, 0.08081792, 0.08848378, 0.023848288, 0.04174079, -0.05103473, -0.013733379, -0.03787518, -0.042940754, 0.04877228, -0.047436755, -0.062437553, 0.050769612, 0.031812552, -0.0019859597, 0.089714624, -0.05094953, 0.011134692, 0.041425996, -0.07860356, 0.023604466, 0.08920147, 0.074392386, 0.06257927, -0.05782884, 0.011307403, 0.0034645936, 0.013968053},
   {-0.07637175, 0.08005164, 0.05559357, -0.08919733, -0.09717407, -0.050319333, -0.0043594833, 0.005551461, 0.06510056, -0.05060142, -0.07931869, 0.044965547, 0.045038976, 0.06476874, 0.05537013, 0.024960168, 0.06893916, 0.015410505, -0.035701852, -0.0045460695, 0.04583217, -0.038197543, 0.054800957, 0.058628954, 0.08199216, -0.0037938585, 0.02337502, -0.004375296, 0.0751419, 0.011508316, -0.009272017, 0.010799591, -0.06411189, 0.024973128, -0.06979244, 0.050728023, 0.034490675, -0.059632145, -0.01598224, 0.03657516, 0.065202415, 0.061321802, 0.0017142219, -0.01700665, -0.02604336, -0.0853064, 0.008940033, -0.030660337, -0.020292934, 0.0052485056, 0.044397008, -0.085642345, -0.09315695, -0.008523308, 0.031468064, 0.03389937, -0.06917881, -0.03617537, 0.060950212, -0.014473619, -0.012245883, -0.040249147, 0.04657599, -0.09480059},
   {-0.076380625, 0.0016694668, 0.046470433, -0.06563, -0.06505187, 0.028093282, 0.03842656, -0.09835226, -0.06683265, 0.03401593, -0.0069239065, 0.053115524, -0.04947331, 0.08181702, 0.0341435, 0.06089499, -0.081333496, -0.073336616, 0.048265688, -0.086517826, 0.04933204, -0.07855762, -0.049898423, -0.022437647, 0.040173728, 0.058819123, -0.027120728, 0.09293699, 0.08336138, -0.019333027, 0.06299382, 0.085718505, 0.034071602, 0.024053985, 0.002997537, 0.02207314, 0.07041262, 0.0020336218, -0.02801976, 0.02550546, -0.052577376, -0.06361801, 0.072465695, 0.08816535, 0.095008984, -0.08356344, 0.0475986, 0.06630965, -0.044041436, -0.031817388, 0.013457486, -0.008559726, -0.08176861, -0.06938401, 0.06414714, 0.049037423, 0.05295933, 0.07307439, 0.014694229, 0.07625186, -0.036864214, -0.03658484, -0.029806688, 0.046851024},
   {0.032833245, 0.09702745, -0.048110276, -0.047406092, 0.042827595, -0.07251716, -0.0021913606, -0.010410134, 0.029958429, -0.04775249, -0.042492002, 0.06622902, 0.08978545, 0.06862324, 0.07225316, -0.033225942, 0.082842335, -0.010308884, -0.09045391, 0.035521794, -0.09644992, -0.052088, -0.03494995, -0.08221732, -0.010096234, 0.00029898036, -0.032720815, -0.012824712, -0.039318014, 0.05233579, -0.03978048, 0.051083203, -0.019020699, 0.038124606, 0.016524972, 0.03606175, -0.08680623, -0.058851726, 0.06605293, 0.052872144, -0.07065179, 0.02139046, 0.09132249, -0.019117974, -0.0203757, -0.08464404, -0.08208009, 0.07532385, 0.051521175, -0.04608191, -0.07097555, 0.05538083, -0.01577656, 0.026199333, -0.06257315, 0.033147592, -0.03433061, -0.027763575, -0.030352734, -0.003351357, -0.011303086, -0.053198624, -0.08049351, -0.07820167},
   {0.015686287, -0.046493847, -0.04911562, 0.03400899, 0.06642605, 0.02671639, 0.092377044, 0.062221367, -0.030842576, -0.011092852, 0.0025989264, 0.051163606, -0.038715363, 0.07968563, 0.03603687, 0.01684159, 0.04058179, -0.013866127, 0.025033608, -0.0378587, 0.04998992, 0.046198253, -0.0030439917, 0.019373745, -0.0595127, 0.07722934, -0.035178788, 0.0031993042, 0.007788874, -0.0402825, 0.081167616, -0.050771095, 0.078568436, -0.04900982, -0.007204393, -0.0148018235, 0.077183135, 0.07530462, -0.08199597, 0.07056192, -0.056724902, 0.091991715, 0.078079015, 0.01924982, -0.0028683592, 0.06286797, 0.06689216, 0.006459082, 0.038642943, 0.09486436, 0.013355563, 0.052228905, 0.0689922, -0.07312974, -0.035202034, 0.075481966, -0.020951863, -0.02452189, 0.08452002, 0.03314121, 0.057125583, -0.014103964, -0.047850918, 0.015293867},
   {-0.050387442, -0.07014094, 0.041490108, -0.07001641, 0.032017745, -0.019459609, 0.06760897, 0.032094155, -0.05952723, -0.03430496, 0.031959303, 0.09186448, 0.017279267, 0.055331793, -0.055094063, -0.047234595, -0.0860369, -0.057505254, -0.05254124, -0.030061943, -0.026806464, -0.0679847, -0.03341964, -0.02360548, -0.091246486, -0.076485, 0.034923367, 0.062142495, 0.04275187, -0.0026553944, -0.06663667, 0.04786128, -0.092752516, -0.009431496, -0.018970162, 0.023388522, -0.051909246, -0.01836245, -0.06417508, 0.01713425, 0.038115278, 0.056583844, -0.042670336, 0.018753, -0.0827653, 0.03522333, -0.049811102, 0.007674426, 0.042568374, 0.08356268, 0.06867068, 0.09219227, -0.0027189585, -0.03107838, 0.054574795, 0.04170657, 0.00014792706, -0.00050185836, 0.06816951, 0.02608027, 0.04753103, -0.055297505, 0.042695533, -0.09116388},
   {0.071941115, -0.03690785, -0.035812773, -0.09063104, -0.08444148, -0.036203705, 0.04555517, -0.08130445, 0.030139878, 0.027972613, -0.011576571, 0.05781006, 0.079331346, 0.04170254, 0.013782114, 0.022996955, 0.029388744, -0.017416634, -0.022048317, 0.021950617, -0.09810556, -0.03644196, 0.007185317, -0.019679643, -0.006425567, 0.052356306, -0.021920169, 0.08697789, -0.040298827, -0.06873023, -0.047458857, -0.06742385, 0.08659797, 0.018317755, 0.02577639, -0.088092774, -0.09214165, -0.007187863, -0.09271882, 0.05718679, -0.015079929, -0.05522504, 0.040522926, 0.06189794, -0.034195516, -0.026099557, -0.046442464, 0.024428686, 0.026009252, 0.087837435, 0.026909761, 0.019827016, -0.06400963, -0.09232592, -0.026827328, 0.06228776, 0.013098498, 0.028787144, -0.092709176, -0.034797013, -0.018147834, 0.029367805, -0.08051816, 0.0180482},
   {-0.0022932587, -0.015432318, -0.03394316, 0.019151287, -0.015962029, -0.062093776, 0.092870064, 0.0023144525, -0.035181537, 0.077956915, 0.08401271, 0.05746138, 0.08948373, -0.06887035, 0.07537743, 0.025839329, 0.086802654, -0.008633062, 0.0746961, -0.041486867, 0.05613369, 0.0036569736, -0.013043794, 0.04150144, -0.072871715, 0.027698284, -0.03962584, -0.0775055, -0.03930133, 0.058326878, -0.035311747, -0.023014646, -0.07481026, 0.009275403, 0.080161154, 0.028925342, -0.0012878801, 0.031754453, -0.02359282, 0.07368641, -0.063464254, 0.047863998, 0.09496043, 0.0909226, 0.039259847, 0.076414905, -0.042321563, 0.0670359, -0.011899996, 0.06463436, 0.07329575, 0.0049742237, -0.034001265, -0.07868646, -0.05143176, 0.043307323, -0.029984213, 0.039481793, -0.05144593, -0.016596515, -0.030124929, -0.06056733, 0.053557865, -0.022201372},
   {-0.062804334, 0.055357132, -0.087303035, -3.6502348e-05, 0.008377673, -0.0754315, 0.086457215, 0.0543648, 0.08709858, 0.040182777, -0.069242015, -0.04242731, -0.036516357, -0.00799378, 0.013687134, -0.06638465, -0.06478766, -0.053161826, 0.04526516, -0.045782067, 0.07115976, -0.025316145, -0.015640482, -0.083753444, 0.0649266, 0.023184545, 0.053390093, 0.07402089, 0.05246099, 0.0037947297, 0.024701012, -0.08866528, 0.06534945, -0.045099005, 0.04428918, 0.022605749, -0.0056131207, 0.06488505, -0.061442632, 0.05528087, -0.044362657, -0.00053207576, -0.026663871, -0.07198373, 0.07497899, -0.061608057, 0.08658619, -0.063310795, 0.040566493, 0.021764316, -0.061870098, -0.017920785, -0.0109017985, 0.037056558, 0.0026860312, -0.053690437, -0.05741798, 0.08690542, 0.055886097, 0.08466727, -0.08897836, 0.027423576, 0.05515494, -0.03445846},
   {-0.06736437, 0.104666024, 0.0025124538, 0.006665072, -0.0069887117, 0.052985243, 0.08097369, -0.07809382, 0.022432104, -0.054897316, -0.017056026, -0.08669792, 0.004664324, -0.011392765, -0.067810774, 0.067462064, -0.05704626, 0.04378944, 0.07769241, -0.022940828, 0.03700488, 0.074550316, -0.09264356, -0.0849464, 0.0040022605, 0.024232952, 0.0802532, -0.07258358, -0.056002147, -0.01849176, 0.07101837, 0.05028362, -0.0831309, 0.055479843, 0.07804102, -0.064340524, 0.05455228, 0.07354007, 0.013678256, 0.03992165, 0.011913859, -0.00023724139, -0.015703175, -0.042156514, 0.07498196, 0.04431289, -0.07053574, 0.02996498, -0.035843577, 0.065161616, 0.054678094, -0.09088431, 0.056120757, -0.051910263, 0.06920586, 0.054373033, 0.042255197, 0.009816288, -0.024607971, 0.035457004, -0.028544307, -0.081324704, -0.017683487, 0.08346333},
   {0.06574867, -0.024289789, 0.06654259, -0.0772675, -0.035454337, -0.06802858, -0.01934381, 0.043337386, -0.029164925, -0.05860395, 0.067203976, 0.017443359, 0.012508437, -0.039474018, 0.040102966, 0.07020605, 0.03727829, -0.043841455, -0.036521655, -0.008300211, 0.0068859304, 0.074079715, -0.065020405, 0.051198594, 0.07760376, -0.015712477, -0.041001, -0.04628627, 0.018998072, -0.040016625, -0.01832398, 0.027289247, -0.020894736, 0.08633704, -0.07608625, -0.025110556, 0.044605143, -0.08321448, -0.0129884295, -0.07751186, 0.08598374, 0.063546084, 0.03968192, -0.032334346, -0.051479634, -0.07870649, -0.08805728, -0.029971346, -0.031410888, 0.01260663, 0.034480717, -0.06693745, 0.005922788, -0.092175916, -0.08568695, -0.08909417, -0.01600775, -0.07693375, -0.017335288, 0.057368927, 0.0447097, -0.061916497, 0.004978666, -0.044748247},
   {-0.025068197, 0.035561148, -0.083836436, 0.010718416, -0.053225044, 0.009766913, 0.05036742, 0.045924272, -0.061592128, -0.08149289, -0.08172547, 0.038520467, -0.027485982, 0.02672389, 0.0006563589, 0.071454994, -0.0151455, -0.08145951, 0.033093147, 0.06490703, 0.03085594, 0.07055012, -0.093272135, 0.040054403, -0.03893111, 0.0724154, 0.01632749, -0.048733562, -0.076708436, -0.012561284, 0.06958003, -0.046148855, -0.07844945, -0.027980145, -0.06524972, 0.008530078, -0.036739163, 0.060379475, -0.020130636, -0.049914014, 0.06109997, -0.014513321, 0.042008393, -0.0847147, 0.09015846, -0.0694002, -0.054416616, -0.00085185055, -0.025679873, -0.07826532, -0.042557053, 0.05792723, -0.0062454627, -0.07370652, -0.037428003, 0.08329896, 0.03249933, 0.025674108, 0.020813972, -0.030752804, 0.068600796, -0.058222577, 0.04134516, -0.0053291693},
   {-0.03474897, 0.09220971, -0.024691638, -0.035051357, -0.099490926, -0.09124472, -0.0031233528, -0.07313461, 0.06795896, 0.039623637, 0.051872693, -0.009957122, 0.056002043, 0.06966771, -0.08485823, 0.0730743, -0.032071885, -0.089350566, -0.07631216, 0.08153516, -0.015038812, 0.034407433, 0.03846879, 0.010022096, -0.020464424, 0.07050883, -0.07467033, -0.053589653, 0.06781428, 0.045530118, 0.05382612, 0.08793718, 0.063238494, 0.08971304, 0.082564585, 0.09407832, 0.056793153, -0.07181082, 0.056644842, -0.02106236, 0.011938934, -0.09053592, -0.039698947, 0.054608397, 0.014591828, -0.002652389, 0.020224528, -0.00809438, 0.085203245, 0.0035936837, 0.022969145, 0.029261187, -0.04538885, 0.054856844, 0.058135517, -0.01189236, -0.0645671, 0.07246739, 0.0648757, 0.06390506, -0.0069637634, 0.0048205554, 0.07214123, 0.009880691},
   {0.047900386, -0.07817247, 0.04034916, 0.049966343, -0.034102328, 0.009170068, 0.017825156, 0.006053756, -0.037848495, 0.016397206, 0.054653667, 0.08662042, -0.038246535, -0.03350576, -0.018790916, -0.08823426, -0.08809345, 0.003491275, -0.030187696, -0.07815888, -0.091646284, 0.08681118, 0.016167982, -0.09234003, 0.048035827, 0.038446452, -0.04723904, 0.09299427, -0.06243892, -0.038862247, 0.089314595, 0.07542762, -0.054087706, -9.74894e-05, -0.012528546, -0.0877771, 0.0015025835, -0.039590728, 0.06823077, 0.033892475, 0.047792785, 0.078091584, -0.0069598877, -0.0016826093, -0.056360777, 0.056878533, -0.047422454, -0.007366134, 0.042556167, 0.021297961, 0.050612938, 0.08059964, -0.07246503, 0.027341746, 0.06532339, -0.05491429, 0.05541484, -0.018595872, 0.04447051, 0.07948333, 0.047325082, -0.08250676, 0.03164588, 0.08383747},
   {0.08265819, 0.039826546, -0.02496455, -0.07836187, 0.0623502, -0.020212347, 0.020664977, 0.020012945, -0.061275866, 0.03889291, 0.026566394, 0.01698036, 0.015506595, 0.009713487, -0.04347217, 0.013956793, 0.05579707, 0.013729207, -0.025695711, -0.019447174, -0.0012311446, -0.057367373, -0.028917039, -0.08008133, -0.037648633, 0.07309965, -0.057792805, -0.07042286, 0.08417993, 0.011946239, 0.081725374, -0.005610012, -0.05921756, 0.08652467, -0.01782708, -0.022950843, 0.05654939, -0.05818147, -0.05649224, 0.051621474, -0.053972915, 0.0083312765, -0.091197684, 0.086457245, 0.0030109282, -0.03871649, 0.04761624, 0.045293808, 0.09424649, 0.0558519, 0.014872261, 0.08294546, -0.06555173, -0.052141096, 0.05555264, 0.058779582, -0.0845851, -0.026764356, 0.022397906, 0.004708079, 0.08683237, -0.021081738, 0.04839975, 0.060829602},
   {0.055253156, -0.08614232, -0.095574535, 0.055780657, 0.020194007, -0.070310675, 0.017315146, 0.06561963, 0.056768864, -0.036960013, 0.001958914, -0.050879084, -0.03575912, -0.024887774, 0.041942723, -0.032197338, 0.05386603, -0.07100165, -0.0799093, 0.053253848, 0.03160316, -0.0893771, -0.035408434, -0.013444245, 0.090484306, -0.012283041, -0.029827964, 0.035470728, -0.01016549, -0.04929343, 0.06408296, 0.028376939, 0.05081334, -0.037854843, -0.009036286, 0.06446355, -0.0028263656, -0.04048667, -0.01964806, 0.08441966, -0.10068612, 0.03459587, -0.0029314256, 0.036870115, -0.06999619, -0.0848447, -0.0010588693, -0.051775362, -0.071995646, 0.021180077, 0.06346123, 0.08494269, -0.0417788, -0.078216285, -0.03824936, -0.06536065, -0.06245374, -0.018498296, -0.044411648, 0.056509294, 0.05855717, 0.005900599, -0.06809163, 0.01309212},
   {-0.01692513, 0.069158494, 0.014363947, 0.011585169, 0.053608485, 0.06656273, -0.024369787, 0.0010306076, -0.005132001, -0.011029658, -0.08607335, 0.102880016, 0.042281173, 0.027187426, 0.05901777, 0.070693545, -0.07805306, 0.08136264, 0.021756008, -0.0108697545, -0.071442164, 0.025500963, 0.052443117, -0.012897372, -0.06163093, -0.09705939, -0.06386343, 0.054630753, -0.080828086, -0.053454842, -0.059848815, 0.082106, -0.087435886, 0.0073386976, -0.07435659, -0.05971516, 0.009182338, -0.08923911, -0.029849205, 0.011248402, -0.0680381, -0.03506981, 0.07613518, -0.041139543, 0.07875961, -0.03339679, -0.021139525, 0.00064220803, -0.078109324, -0.059002623, 0.017827202, 0.0668206, -0.080469355, -0.019102529, -0.046407897, 0.041817155, -0.06467608, -0.039118487, 0.09166727, 0.013099573, -0.06631208, 0.0333175, 0.0082459655, -0.057291396},
   {-0.08920704, -0.011808496, 0.012033254, -0.06260299, -0.04572876, 0.01990087, -0.059337974, 0.056750823, 0.053116426, -0.061519958, -0.022959426, -0.069212735, 0.08984182, 0.035995256, -0.01643657, 0.035832874, 0.03651334, 0.07061637, -0.015103318, 0.041105665, -0.06883937, 0.02637439, 0.012956869, 0.03358128, 0.06514165, 0.087670766, -0.011950529, 0.01138868, -0.02476725, 0.056609847, 0.042929072, 0.0036801547, -0.017861314, 0.07782308, 0.058600858, -0.06159423, 0.00882567, 0.0054287994, -0.024662873, -0.006277226, 0.02605641, 0.051399164, -0.08678004, -0.047729854, 0.014895971, 0.074083954, -0.08808772, -0.021521041, -0.06596126, -0.010262463, -0.04973073, -0.01270254, 0.008409718, 0.023144402, -0.04719544, 0.039214738, -0.0070578475, -0.03718183, 0.001466617, 0.04759095, -0.05202974, -0.033031132, 0.027256452, 0.01930844},
   {-0.088435076, 0.07310626, 0.040153455, 0.015174776, 0.0014954533, -0.024311597, 0.060079545, 0.0027698635, -0.012371041, 0.07072558, -0.08973332, -0.022499006, -0.05253096, -0.054290313, 0.0056914836, 0.057570867, 0.060605053, 0.048756905, 0.00018718094, -0.015076961, -0.023095544, 0.09433538, -0.033654127, 0.034407623, 0.009430373, 0.054031793, -0.007118723, 0.058523502, -0.088627286, 0.028628297, 0.025241563, -0.08970709, 0.0483089, -0.07741213, 0.059266288, 0.07937867, 0.022012215, -0.039280176, -0.08186419, -0.05356395, 0.06520378, 0.058822982, -0.022896402, -0.026040122, 0.026009949, 0.07019793, 0.019714978, -0.0031661724, 0.012587797, -0.011084743, -0.08411358, -0.074536085, 0.041459452, -0.09149546, 0.026054516, 0.042148337, 0.03652026, -0.012495231, 0.040378116, -0.05958863, -0.080196835, 0.05253724, 0.057647556, -0.060492862},
   {0.09113989, 0.01442589, 0.054056007, 0.072046936, 0.03477885, -0.086220644, -0.046236116, 0.061880786, -0.05431916, -0.063395835, 0.04523254, 0.056926772, -0.039859194, -0.0033871036, 0.04247593, -0.059334725, -0.0065721096, 0.04759323, -0.08735479, -0.041497648, 0.011871057, 0.08312256, 0.02273587, -0.027046122, 0.044412207, 0.045958135, -0.08456337, -0.026934294, 0.06877165, 0.07967355, 0.016930213, 0.047933623, 0.011785865, 0.033545684, 0.075269505, 0.07140203, -0.033362333, 0.05032735, 0.06333178, -0.062462658, -0.02674366, -0.05646312, -0.0274155, -0.091989405, -0.061395332, 0.024003625, 0.07049529, 0.018064078, -0.020875312, -0.019414185, 0.02046226, -0.021913506, -0.085264094, -0.087623864, -0.016766056, -0.051866867, 0.04505131, -0.07661517, 0.046043657, 0.06304042, -0.05234719, 0.073198445, -0.028173605, -0.05317634},
   {-0.028858336, -0.06305749, 0.08189735, 0.008364824, -0.060469676, -0.09509196, 0.06757507, -0.036969356, 0.02850318, -0.07948131, -0.08290083, 0.0707967, -0.045840975, -0.015857164, -0.026106648, 0.014801778, -0.088380344, 0.060387067, -0.061923616, 0.0808861, 0.051175058, 0.08388287, -0.058106802, -0.052948814, -0.011235065, -0.08084363, -0.011973966, -0.0458824, 0.01477363, -0.026087843, 0.019037034, 0.053523168, -0.05858356, 0.0032615135, -0.01585881, -0.091589004, 0.037183225, 0.02134714, -0.08094251, -0.03357734, -0.089215815, -0.058333173, -0.03581414, 0.028516188, -0.0386457, 0.043334547, 0.027829938, -0.06461175, 0.09254595, 0.053601302, -0.051880278, -0.07761855, 0.06495707, 0.07483467, -0.023103014, -0.07221361, -0.05517176, -0.03658396, -0.07575428, -0.06019584, 0.06965675, 0.026151098, -0.08133543, 0.050080847},
   {0.044538427, -0.04243577, -0.09860914, -0.030500233, 0.019859426, -0.0915805, 0.0032468473, -0.039145865, 0.07075502, 0.08500817, -0.02772747, -0.09674314, 0.022055767, 0.06571151, -0.051029235, 0.0010973513, 0.07407151, 0.009305708, -0.053750794, -0.097432755, 0.01728752, 0.030976567, -0.08072825, 0.008112974, 0.024400441, 0.011946908, -0.015563704, 0.023043301, 0.08311614, -0.020141684, -0.058559034, -0.06329572, 0.055813767, -0.09339803, 0.06027897, 0.05824179, -0.08897646, -0.030304732, 0.022567172, 0.06207239, 0.084693044, 0.08798943, -0.103351064, 0.036010243, 0.07719495, -0.02393703, 0.022954559, -0.036456026, 0.07889562, -0.021479014, 0.050202057, 0.07729482, -0.045002513, 0.07785887, 0.052580513, 0.05606747, -0.024430146, -0.06590417, 0.00790973, 0.072151415, -0.044384893, -0.025159292, 0.036770802, -0.061796114},
   {-0.058995508, 0.04084468, 0.039138418, 0.0116427755, 0.044359636, 0.020914432, -0.07344814, -0.0011754603, 0.0021916672, -0.09130325, -0.063274756, 0.09264937, 0.07119217, -0.015868885, 0.0073319525, -0.017345324, 0.02437095, 0.0011813641, 0.089725934, -0.0802179, 0.08575879, -0.023060419, -0.09364724, -0.0617347, 0.031024992, 0.029757267, -0.022793176, 0.08629974, 0.009579435, -0.06739717, -0.058390148, 0.06994447, 0.0663786, 0.086057104, -0.014600629, -0.010455393, -0.062124018, 0.027686276, -0.08797572, -0.049950793, 0.021047898, -0.048122477, -0.06761635, -0.09329597, -0.05824892, -0.06630696, 0.048341375, -0.0341287, -0.041798547, -0.03812875, 0.016199261, -0.044738416, -0.093203604, 0.03202734, 0.0066768155, -0.10503951, 0.004540686, -0.079713605, -0.07781963, -0.001451645, 0.004045467, 0.06926102, 0.024902387, -0.02296362},
   {0.038543962, 0.04070825, 0.060951613, 0.038304664, 0.05184128, 0.01781217, 0.020205282, 0.032394264, -0.002583151, 0.0023790714, -0.073485725, 0.066409774, -0.053000633, -0.060611703, -0.06307192, -0.056923114, 0.045374963, -0.0070746914, 0.030119121, 0.047732268, -0.06289835, 0.05064935, 0.022771755, -0.08825028, 0.037471674, 0.088969626, 0.08232549, -0.0036889422, -0.00030389428, -0.0066166073, 0.012978268, -0.08300108, -0.015142694, -0.034580026, 0.017347282, -0.0567043, -0.09221889, -0.021789076, 0.038613796, -0.01785431, 0.03667933, -0.045262575, 0.021727104, -0.011319041, 0.0011065229, -0.03957705, 0.01129791, -0.095586054, -0.07971751, 0.0015447139, -0.021098124, 0.016430922, 0.022331497, -0.042614326, -0.056800902, 0.030916426, -0.0783262, -0.041162204, 0.07238089, -0.058703728, 0.0010010634, -0.015341729, -0.04865864, -0.012427206},
   {0.057186186, -0.014864494, 0.026863018, 0.004818432, -0.043893002, 0.027111739, -0.019236488, 0.08619561, -0.0076202904, 0.054340012, 0.03210988, 0.07242547, -0.041224733, 0.07691843, 0.07675096, -0.051377293, -0.01736648, -0.012837723, 0.014459968, 0.025775174, -0.079256885, 0.0814955, -0.016471958, -0.056945674, -0.07344445, -0.05008453, 0.053460006, -0.055558506, -0.04871563, -0.03292612, -0.041497927, 0.013703848, -0.051827542, -0.089570664, 0.033909734, -0.0047671227, -0.0018720718, -0.008286728, -0.038468305, 0.0041552708, 0.0053223106, 0.04107573, 0.023473267, 0.027304322, -0.054345146, -0.021351147, 0.01571913, -0.060235824, -0.055941243, 0.0106924465, 0.04749546, 0.041733213, -0.09631502, 0.031365857, -0.055869613, 0.028818985, -0.06473334, -0.0025441153, 0.031021781, 0.022739027, -0.032119986, -0.07665461, 0.021237051, -0.0087978095},
   {-0.0059525785, 0.04477374, -0.035979938, 0.033258334, -0.0025428508, -0.03379867, 0.0280521, -0.08973474, -0.043217923, -0.019532612, -0.015663669, 0.05548827, 0.07815332, -0.034190804, -0.0051371977, -0.07230919, 0.061772782, 0.07976248, -0.059855815, -0.092020236, -0.09440831, 0.0038757862, -0.0434646, -0.058556486, -0.08873285, -0.0005628394, -0.04623341, 0.08924481, 0.013858072, -0.06158897, 0.051362477, -0.004892232, -0.0017098412, 0.05552865, -0.062130645, 0.0397749, 0.010474652, 0.03744678, 0.060153898, -0.03907154, 0.043437093, -0.018957578, 0.06338188, 0.007952176, 0.05870217, -0.09210582, 0.013873204, 0.00093901786, -0.07868421, 0.060702972, -0.002778446, 0.080190085, 0.038959414, 0.06418491, 0.019063532, 0.035508294, -0.055621535, -0.039388794, -0.06330735, -0.04218366, 0.03646505, -0.02034054, -0.025303697, -0.09632404},
   {-0.04705264, -0.0039034593, -0.08562952, -0.061830435, -0.059977554, -0.048968248, -0.08281719, -0.019492734, -0.05644113, -0.017324165, 0.09268112, -0.10223607, 0.065787755, -0.08807302, -0.034386683, 0.04588505, -0.060937583, -0.001919955, -0.024456747, -0.019787634, -0.008466346, -0.043232653, 0.095773816, 0.028767265, -0.08571879, 0.015212727, -0.0070380243, -0.037424654, -0.056983896, -0.06195897, 0.07288827, -0.029115418, -0.04018022, -0.02895032, -0.09171851, -0.086965896, 0.050443877, 0.0705608, 0.009936949, -0.06677996, 0.083555505, -0.07744966, 0.04908967, 0.074245386, 0.108398825, -0.016217506, -0.029295612, -0.012195847, 0.0032838057, 0.044884045, -0.08946856, 0.05159522, 0.046742976, 0.039631434, 0.07855458, -0.026345722, -0.07277522, 0.029574152, 0.07138873, -0.006931098, -0.0053459955, -0.06345306, -0.0118562635, -0.047812715},
   {-0.041911174, -0.06737362, 0.002182945, 0.029024584, -0.0072850985, 0.05991598, -0.035183102, -0.020629779, 0.06641227, 0.054855693, -0.00076822937, 0.08856026, -0.09064051, 0.03585683, 0.009069294, -0.02050583, 0.03352265, -0.085641876, 0.012289263, -0.07550943, 0.012653185, 0.014193817, -0.030286813, -0.05545227, 0.0812769, -0.06476975, -0.008301436, 0.044141486, 0.07088279, -0.06697969, -0.07499679, -0.036539294, -0.049913235, 0.07086144, -0.00458828, 0.0425628, 0.012238384, 0.01965252, -0.044831038, -0.044866525, -0.07305789, 0.007944971, -0.022310998, -0.0400637, -0.08357041, -0.050839253, -0.040190287, -0.021849742, -0.0418702, -0.050820503, 0.035655383, 0.04802195, 0.01887731, 0.024387948, -0.018835992, -0.049818266, 0.028243447, -0.058767468, 0.002058655, 0.03382692, -0.029958323, 0.03496366, -0.027547026, -0.09721842},
   {0.012088299, 0.008685671, -0.05608691, 0.057036024, 0.06314448, 0.08265437, 0.010946313, -0.082098976, 0.04402976, 0.033609852, -0.08702415, 0.07783425, 0.037010066, -0.0501766, 0.01963646, -0.05952998, 0.011171689, -0.07171257, 0.06234456, -0.0046596397, -0.069223315, -0.008535733, -0.06508017, 0.060517408, -0.010634596, -0.07819782, -0.0763996, 0.048605707, -0.09265031, -0.010165952, 0.0053366004, -0.078677006, 0.07400579, -0.017586324, -0.05452046, 0.043244228, -0.08161138, -0.054017447, -0.0076803407, -0.03558685, 0.05880243, -0.04275407, -0.074409604, -0.019921668, 0.057498917, 0.058320023, 0.08290362, 0.06594098, -0.023901789, -0.021861829, -0.07864651, 0.074183665, -0.049299475, -0.06419388, 0.079284914, 0.07738315, -0.021447636, -0.08391263, 0.07029808, -0.025364632, 0.022770295, -0.038415805, 0.070147894, -0.076657705},
   {0.084529966, 0.06995799, 0.06596048, 0.07520959, 0.05215776, -0.005366085, 0.049218312, -0.09365127, -0.08237634, -0.048657667, -0.048915423, -0.0083231, -0.012590118, 0.07109667, -0.07345969, 0.0070887282, -0.08512018, 0.005494669, 0.06235262, -0.09711223, 0.03128567, 0.0919722, 0.008416547, -0.06692988, 0.044395983, 0.06244288, -0.029760322, 0.08938575, -0.039923426, -0.060198955, 0.062486257, -0.08901561, -0.086150974, 0.01484903, 0.06719343, -0.03247867, 0.021387031, -0.06553937, 0.047150653, -0.051590703, -0.02411248, 0.053891964, 0.088899866, -0.03223941, -0.011447963, -0.04154102, 0.040475298, -0.04502199, 0.068272315, -0.08610966, -0.008185717, -0.08369996, 0.05023059, 0.0372018, 0.041866653, 0.03267069, 0.05810805, -0.058116354, -0.070292115, -0.0001607601, -0.051179647, 0.0910724, 0.070730664, 0.057609558},
   {-0.09181066, -0.010469091, -0.052065197, -0.05895412, -0.09224207, -0.090822555, 0.0958416, 0.062951356, -0.032300904, -0.030314183, 0.050127693, -0.04390618, -0.050233442, 0.051116325, -0.05753905, -0.08933086, 0.03238785, -0.0030609444, -0.08938465, 0.06472085, 0.029979054, 0.07396339, -0.092128724, -0.03288961, 0.008885215, -0.06555084, 0.059256997, 0.08095428, -0.016806573, 0.036381043, 0.037251987, 0.05978267, 0.068184085, 0.059641715, -0.043324854, -0.005255, -0.009446819, -0.053194135, 0.076419584, -0.02950561, 0.04079159, -0.07065354, -0.032416902, -0.042625315, -0.0691307, 0.054240208, 0.06769555, 0.029673334, 0.086780064, 0.07902645, 0.009085551, -0.072432, -0.05673459, 0.043579794, -0.069625385, -0.0747407, -0.030752668, -0.03527604, -0.035682384, -0.09092458, -0.0035136323, 0.07972845, 0.017470837, 0.05968827},
   {-0.019151583, 0.025250854, 0.006045245, -0.045168288, 0.011810477, 0.08430366, 0.06615968, 0.0693443, 0.092238866, 0.07963085, 0.043380313, 0.060463104, 0.07240098, 0.064211726, 0.055743568, -0.03735685, -0.096429594, -0.038020354, -0.00042962283, -0.032392498, 0.07188641, -0.04799511, 0.073336214, 0.09184248, 0.03372714, -0.036309395, -0.050694756, -0.048432406, -0.0014053881, -0.07028675, 0.044112403, -0.020827195, -0.052432444, 0.09527173, 0.0009459146, 0.04774678, -0.066034295, -0.017998464, -0.07463416, 0.024686843, -0.07845526, 0.05858586, -0.062427204, -0.016530707, -0.0633272, -0.09390779, 0.030056689, -0.058599215, 0.023238715, 0.08521086, 0.004434399, -0.05080806, 0.010498866, 0.04027594, -0.057590064, -0.08831242, -0.024446309, -0.011848457, -0.012995712, -0.09655664, 0.029002046, 0.08090956, -0.08571861, 0.036671232},
   {0.010036094, 0.0126003, 0.01973996, 0.08070197, 0.009121838, -0.018094648, 0.061782755, -0.04828184, 0.012641909, -0.049377643, 0.07160691, 0.01907261, 0.031686135, -0.021264762, -0.09094748, 0.04000228, 0.079062134, 0.060837828, 0.092758976, -0.042691957, -0.074996, 0.059983693, 0.045755833, 0.093248494, 0.06958151, -0.08016311, 0.016631987, 0.011302179, 0.05682204, 0.041327618, -0.022737274, 0.076150104, -0.066576615, -0.07817437, -0.010427556, 0.028964879, 0.08617843, 0.0845863, -0.033572637, -0.045927834, -0.048393127, -0.0659989, 0.037607264, -0.039287556, -0.06665598, 0.04223619, -0.050112188, 0.045622088, -0.047501694, 0.08502279, 0.0006515254, -0.07291618, 0.010405669, -0.034119476, 0.07287387, 0.029651547, 0.06964728, 0.07380906, -0.027172871, -0.04675678, -0.05634754, -0.054193854, 0.022525832, 0.001961996},
   {0.005867706, -0.022462675, 0.019053059, -0.059153065, 0.037007693, -0.09301005, 0.07786483, 0.016462311, 0.06909884, -0.013390949, 0.00276234, 0.09520306, -0.050798558, 0.051491786, 0.049962558, 0.04326544, -0.06454482, 0.051504172, -0.071195856, -0.054826543, 0.028794222, 0.07777241, 0.069151886, -0.009401932, 0.042585947, -0.007412469, 0.03352781, 0.09531287, 0.06361733, 0.06310246, -0.057757318, -0.015192925, 0.0007546097, 0.09741911, -0.088875644, -0.08451124, 0.03409131, -0.010401433, -0.05576281, -0.06337641, 0.032188646, -0.072919406, 0.097005494, -0.006465316, -0.049475286, -0.08506104, -0.012884255, 0.053866018, 0.03928614, -0.009130873, 0.0054126265, -0.08800814, 0.054238643, -0.058434073, 0.04636251, -0.01896062, -0.012431358, 0.043219622, 0.05130688, -0.042681247, 0.07487113, -0.011922203, 0.07365113, -0.07677548},
   {-0.021043481, -0.038038783, 0.0065212674, -0.058036983, -0.04066346, -0.01984259, 0.07257625, -0.013267834, -0.022820717, -0.018930105, -0.07234332, 0.09019579, 0.08042986, 0.013992722, -0.020134918, 0.07831753, -0.038885046, 0.04116515, -0.058387082, 0.06659884, 0.058772154, -0.098804064, -0.10297507, 0.036903925, -0.062112805, -0.07551916, -0.024980523, -0.08873222, -0.073679134, -0.06808944, 0.007840864, 0.009213859, -0.048372377, -0.078653164, -0.024500005, 0.02498483, -0.048699986, -0.019122332, -0.033526257, 0.035577573, -0.06509962, -0.08271469, 0.0847527, 0.09140111, 0.021928849, 0.05648352, 0.04244189, 0.079845, -0.010332418, 0.085471995, 0.030907614, 0.08278484, -0.04731485, 0.003766559, 0.06704519, -0.004497064, -0.0012877409, -0.086741954, -0.060617212, 0.04899981, 0.04132071, -0.06927114, -0.012066578, -0.00026824922},
   {0.03105454, 0.027877493, 0.00906626, -0.022106707, 0.034150828, 0.043130692, 0.08832682, 0.02010639, -0.08713374, -0.08192646, -0.008724347, -0.06714035, -0.03119848, 0.068023, 0.08153426, -0.010895804, -0.056324176, -0.041480016, 0.065648966, -0.022027802, -0.050578922, -0.08323543, 0.0478482, 0.078496955, -0.03858797, -0.006355434, 0.0047654337, -0.088010944, 0.07558078, 0.052197613, -0.05461892, -0.052134756, 0.07526829, 0.04180499, 0.0073386324, -0.01986767, -0.032634266, 0.056887414, 0.012154205, -0.0053017735, -0.05874352, 0.055021085, 0.037504937, 0.07421983, 0.08453341, 0.073175825, -0.042108435, -0.09556772, -0.08931809, -0.01732499, 0.09008024, -0.06054984, 0.034765515, -0.07764596, 0.045593016, 0.08050414, -0.04481514, 0.07915322, 0.059080712, 0.08867556, -0.06419684, 0.05565592, -0.05621948, -0.043380912},
   {0.006403801, -0.048346575, -0.023994273, 0.025214925, -0.07323686, -0.008779573, -0.033246305, 0.068002045, -0.09437261, 0.041882567, 0.029161803, -0.0029639273, -0.07328044, -0.0038259537, 0.06284436, -0.043912586, -0.042291693, -0.03912812, 0.0023084432, -0.020009281, -0.07245478, 0.07631875, 0.054389715, -0.066021614, -0.055332568, 0.047569398, -0.061583016, 0.0062233927, -0.081639126, 0.033388667, -0.025880016, 0.017173728, -0.058081005, 0.058579076, -0.0739885, 0.067507304, 0.08842128, 0.007448243, -0.034188487, 0.082883336, -0.0014592637, -0.08825037, 0.11186111, -0.034190916, -0.021087816, 0.004401941, 0.0681044, 0.05401737, -0.0135988705, -0.037057154, -0.08595732, -0.09222213, 0.072100416, -0.010608681, 0.0758295, 0.01895566, -0.009665953, 0.08271228, -0.012244232, -0.07279894, 0.039016746, -0.013013884, -0.06262364, 0.03303157},
   {-0.0068484657, -0.01216046, -0.08540984, 0.075747184, -0.026151, 0.051312827, -0.039230134, -0.07681494, -0.08946319, 0.037125047, 0.062009536, 0.06711482, 0.03628535, 0.015417793, -0.01611884, -0.031353842, 0.060898773, 0.02051913, -0.072046295, -0.069083765, 0.032313015, -0.09074652, -0.06351769, 0.007286586, 0.049488574, -0.07778364, -0.05535005, -0.024384838, 0.085222356, 0.02381438, 0.02474661, -0.017192634, 0.061264746, 0.060030986, -0.06817977, 0.017235806, 0.06865302, 0.041736443, 0.06540843, -0.032553963, 0.015112342, 0.028440095, 0.049737275, 0.07582102, 0.03336496, 0.08335499, -0.08153012, -0.0039437506, -0.05723518, 0.045713164, 0.048803616, -0.07344802, -0.05686267, 0.04507398, 0.08991478, 0.047010068, 0.06521529, -0.06752301, 0.080927335, 0.04724077, 0.031240318, -0.092129156, -0.012316505, -0.031102734},
   {-0.04942834, -0.04614752, -0.033397324, -0.024592921, -0.00830947, -0.033614174, -0.06910851, 0.008316662, 0.0628419, 0.010681853, -0.075051084, 0.00018547341, -0.09295027, 0.11083978, 0.043919213, -0.085682616, 0.03438446, 0.020008944, 0.04645913, -0.09407722, 0.024087839, -0.06856318, -0.021956904, 0.01083044, -0.028579999, 0.02062789, 0.041741103, 0.048207052, 0.09013329, -0.036517806, 0.0018356628, -0.06275084, 0.075366594, -0.025027273, -0.030296046, -0.017904688, -0.026733981, 0.06811585, -0.01716578, 0.055146106, 0.031761978, -0.037478372, -0.06250481, 0.0046317726, -0.07719832, 0.063658945, -0.038062923, -0.05399249, 0.056306813, -0.029510891, 0.013243744, 0.0155924335, -0.0028152347, 0.05397121, -0.089212604, 0.068113804, 0.07907965, 0.020044014, 0.05210697, -0.090988904, 0.051889952, 0.061299108, -0.082309455, 0.039191656},
   {-0.040030196, -0.04694646, 0.06631387, 0.050281428, -0.08352591, -0.004307075, -0.00574903, 0.04793014, -0.029463354, 0.012658652, -0.045965057, -0.061425433, -0.0148083195, 0.10302652, 0.07798078, -0.0670919, -0.02292452, 0.0063006952, 0.066114105, -0.08245531, 0.06426981, -0.06063819, -0.019982122, 0.06687493, -0.09012655, 0.05150515, 0.077259704, 0.032798134, -0.010613397, 0.07689337, 0.07402433, 0.042063892, 0.08705605, -0.06456113, -0.019294286, -0.07895804, 0.058968697, -0.081463404, -0.019850014, 0.03130082, 0.08192202, -0.09172416, -0.034309234, -0.03620641, -0.029108437, -0.072959736, -0.024927568, 0.074562855, 0.03115554, -0.032587443, -0.0061093853, -0.008498833, 0.004595353, 0.007513635, 0.05399642, -0.04349191, 0.04347151, 0.0003087759, 0.028619133, -0.05281232, 0.02436778, -0.050176885, 0.027112054, -0.09361272},
   {-0.09365801, -0.06881151, -0.06810783, 0.004446158, 0.0340242, 0.0069261394, 0.0059824483, -0.08770491, 0.076521106, 0.06962573, -0.04691931, 0.09458893, -0.08052782, -0.0025134091, -0.0017668232, -0.035842177, 0.019400708, 0.03918623, 0.050719194, -0.07951978, -0.053160664, 0.085941255, -0.031077843, 0.03103546, 0.07550785, 0.08422274, -0.086174995, -0.06963716, -0.08262107, -0.06800741, 0.064511865, -0.08710037, -0.038190756, -0.08252969, 0.01631146, -0.014781355, 0.08724572, -0.027871672, -0.046027586, 0.046239875, 0.059978005, -0.036356658, -0.030095616, 0.08262371, -0.024486423, -0.045771506, 0.06633052, 0.088616505, -0.06939374, -0.0293941, -0.02664388, 0.024140365, -0.05316546, -0.012116946, -0.037838936, -0.056542482, 0.023950111, 0.054570634, -0.09305617, -0.06361659, 0.025795586, 0.05493129, 0.06848596, 0.022783464},
   {-0.095486574, 0.083693616, 0.021921664, -0.025070505, -0.08939577, -0.006740874, 0.036343735, -0.0109272385, -0.08797897, -0.038939334, -0.062270496, -0.055685397, -0.043542743, -0.05588527, -0.0856619, -0.03241751, 0.013716946, -0.061219376, -0.017086014, 0.02307316, 0.06570371, 0.07106505, -0.04861477, -0.032522924, 0.046791025, 0.061836384, -0.0034549173, 0.07696733, 0.047425263, 0.03344751, -0.054744307, 0.070266336, -0.041792367, -0.045451935, 0.021149864, 0.08743019, 0.020208187, -0.075721025, 0.00228777, 0.08631199, 0.037498746, 0.06599454, -0.050507605, 0.01975894, 0.028572295, -0.041303262, 0.06283791, 0.01579283, 0.07132785, -0.07484367, 0.009000179, -0.014556147, -0.035754275, -0.058588166, 0.02615624, 0.06448197, 0.0722001, 0.018925875, 0.049001507, 0.037800554, -0.10394001, -0.08092347, 0.028916998, -0.05163127},
   {-0.055806044, 0.018214663, -0.03252759, -0.0011837628, 0.08673741, -0.011760983, -0.084696285, 0.06089527, 0.044512838, -0.007928802, 0.085504, -0.012583381, -0.019726142, -0.08041128, -0.030541338, 0.08458137, -0.027229637, -0.03173968, -0.07451373, -0.06275169, -0.009791118, -0.0141832335, -0.027246375, -0.08598249, -0.06997203, 0.06258542, 0.021193884, 0.05777558, -0.04280642, 0.011983946, 0.019727342, 0.07665783, 0.038675226, 0.007976471, -0.024211047, -0.08620225, -0.085114665, 0.08194316, -0.085131794, -0.08107196, 0.049152553, -0.032935597, 0.07061689, -0.04569974, -0.06731818, 0.069267094, -0.020629827, 0.055838387, -0.01930117, 0.054926928, 0.0785753, 0.015104495, -0.07558132, 0.023062661, 0.061981328, -0.08672947, -0.06978774, 0.0048900517, 0.06718867, -0.089510374, 0.06336051, 0.03909976, 0.043995764, -0.09891999},
   {-0.027449612, 0.026306843, -0.07534315, 0.02515997, 0.10245626, 0.08844167, 0.03484539, -0.0414649, 0.032321036, -0.018281553, 0.029074036, -0.042906668, 0.004986331, 0.074365705, -0.09021665, -0.041148487, -0.0041604983, 0.03070373, 0.03411018, -0.07432026, 0.034235433, 0.046154574, -0.040196467, 0.047990657, -0.09503007, -0.022192316, -0.0035904201, 0.014974425, -0.06689989, -0.021950483, 0.037227184, -0.10432018, 0.03021326, -0.036878265, 0.042250067, -0.014650386, 0.027142921, -0.061843798, 0.016011618, 0.08391466, 0.039613307, 0.0379579, -0.01230754, -0.078519136, 0.012009501, 0.0053587994, 0.019416358, -0.05835685, 0.0769616, -0.038328145, 0.040254027, -0.030071132, -0.07905105, -0.07454192, 0.06589653, 0.107812434, -0.024293268, -0.02600955, 0.010363728, 0.018783523, 0.0052424697, 0.01958555, 0.017639795, -0.018424094},
   {-0.08159375, -0.017457986, -0.004542466, -0.05205664, -0.027923811, 0.031180901, 0.031832073, -0.034563646, -0.068492584, -0.038312763, 0.09149606, -0.10367609, 0.038311742, -0.06273335, 0.074438505, 0.0874859, 0.077427156, -0.03640636, 0.048566677, -0.048068635, -0.054455988, 0.034328017, -0.09774512, -0.090031095, -0.06334269, 0.006092048, -0.02474243, 0.053214334, -0.028307848, 0.056194715, 0.07684519, -0.04265699, -0.013814129, 0.079102755, 0.07246247, -0.047076683, -0.03143694, 0.07776361, -0.07565388, 0.075782426, 0.034054466, 0.0026171878, -0.057333585, -0.0056727007, -0.07933347, -0.088247, 0.042021282, -0.08282387, 0.075858094, 0.025587423, -0.016810585, -0.009811357, 0.084194414, 0.068269856, -0.027103439, 0.055629678, 0.072774924, 0.09294545, 0.011386253, 0.07781757, 0.023621527, -0.010880031, -0.07349723, 0.024689509},
   {-0.07797112, 0.07209904, -0.070993915, 0.05585467, 0.017146656, -0.07602465, -0.020195296, 0.06703478, -0.034665316, -0.04612524, -0.03670705, -0.03058282, 0.020112626, 0.04440868, 0.040259786, -0.0018637106, 0.04256424, 0.0006769672, 0.053059973, -0.038379345, 0.024475206, -0.05488823, 0.006990668, -0.06508625, 0.0910272, 0.07576817, 0.047722984, -0.09473672, -0.05359452, 0.08977508, -0.003682462, 0.018327722, -0.08509507, 0.090763055, -0.061029684, 0.08640311, 0.0126657365, 0.011012145, -0.09324428, 0.055697955, 0.054567456, 0.022122428, 0.06565064, -0.08420828, 0.022256192, 0.021094402, 0.021917608, 0.0083432915, -0.056540325, 0.09706042, -0.10018137, -0.021672845, 0.011583146, -0.021621913, -0.07542807, -0.0078015896, 0.0514572, -0.06667852, 0.045345925, -0.013934691, -0.027090017, -0.05332306, 0.017772662, 0.032075085},
   {0.011288343, -0.020726139, -0.03228712, 0.080610186, 0.05595188, 0.004626273, -0.050496574, 0.08235497, -0.018855179, -0.039168037, 0.046092503, 0.019754479, -0.050338745, -0.016406354, 0.010541804, -0.055842377, -0.0950851, 0.010687202, 0.020738684, 0.083303824, -0.086135544, -0.07258357, 0.050514176, -0.01433938, 0.08643086, -0.07501043, 0.016131392, 0.08564465, 0.0924973, -0.077691324, 0.085171, 0.015066538, -0.06602952, -0.05210754, -0.09527754, -0.092725046, -0.040124215, -0.023781328, 0.0740076, -0.09284569, 0.07141671, -0.035601445, -0.028058168, -0.07750441, -0.08893642, 0.06056876, 0.06597631, -0.00060725806, -0.02966765, 0.08566232, 0.07983188, -0.03133453, 0.058547363, 0.064821355, 0.02106107, -0.035066057, -0.03670791, 0.07518337, -0.043378882, 0.013037019, -0.04619286, 0.010471985, 0.09222166, -0.075546116},
   {-0.028855361, 0.058943, -0.0185686, -0.035176907, -0.08441132, -0.047287136, 0.06255664, 0.02506518, 0.03103153, -0.03231044, -0.012660734, -0.08396425, 0.040862598, -0.01838068, 0.076546885, 0.031613283, 0.06439377, 0.08217146, -0.016266234, 0.047730245, -0.059219297, -0.023725607, 0.07777035, -0.039684385, 0.029234603, -0.037989736, 0.027508652, -0.010348441, -0.05577641, -0.040788367, 0.07395931, 0.0078353165, -0.089626275, 0.096271776, 0.021969104, -0.06075988, 0.012865214, -0.041076954, 0.03561056, 0.010338068, -0.033348937, 0.08231602, 0.092543304, 0.0016676337, -0.08766812, 0.05457594, -0.015884398, -0.026734078, 0.01797019, -0.05447213, -0.022127446, 0.0684165, 0.03264095, -0.08193056, -0.09216377, 0.04953404, 0.0060396907, -0.0952796, 0.0064302757, 0.081950694, 0.067420624, 0.07865999, -0.036505587, 0.051779263},
   {-0.029109849, -0.07877663, -0.09119781, 0.06362587, -0.029087732, -0.008264728, -0.06913496, -0.039670695, -0.05896941, 0.029701248, 0.04813374, -0.07921625, -0.0069471374, -0.050423916, 0.04614941, -0.06673331, -0.04924702, -0.058172047, 0.08522799, 0.06803131, -0.02718873, 0.022537312, -0.020462254, -0.08407872, 0.04756382, -0.07815935, 0.069807544, 0.04231648, 0.07580472, -0.023163646, 0.030379288, 0.0017144111, 0.07172618, 0.043715663, -0.06713569, 0.036857415, 0.07285828, 0.08563144, -0.05897277, -0.0063360706, 0.028842904, 0.08726888, -0.038396005, -0.0845841, 0.06486084, -0.09084768, -0.09024207, -0.014316121, 0.03592216, -0.023463918, -0.053771816, -0.05322245, -0.0678789, -0.06401008, -0.05019831, -0.02983265, 0.011109009, -0.077388756, -0.0005154386, 0.038012892, -0.033319145, -0.06735425, -0.092410624, -0.020486996},
   {-0.06263565, -0.01030398, -0.032604214, -0.04909189, -0.04746241, -0.0867532, 0.016121194, 0.029060189, -0.0061529316, 0.0778239, -0.018332437, -0.0026495939, -0.030517869, -0.08962185, 0.028923139, 0.08173341, 0.033863526, 0.05067516, -0.015435845, 0.016013013, -0.040953916, 0.051229406, 0.058231004, -0.016230702, -0.0862464, 0.083377264, -0.047963288, 0.05449947, -0.022206277, -0.04065352, 0.06482116, 0.06395767, -0.0060801655, 0.075769596, 0.065121174, -0.027640263, 0.02839284, -0.033457827, 0.01726689, -0.077203855, -0.04852543, 0.0028381646, -0.042029034, -0.018423162, 0.016866116, -0.056977637, -0.046948817, -0.08635391, 0.023374373, -0.09161891, -0.07738959, 0.038683407, 0.080555975, -0.08255252, -0.068817884, 0.012339367, 0.013256885, -0.04325836, -0.022316769, -0.088224635, 0.07021052, 0.008145921, 0.07673739, -0.089497976},
   {0.03885829, 0.07665376, 0.025520733, 0.059951268, 0.0043190187, 0.029110098, -0.083469056, 0.047816932, -0.009551385, -0.06096142, -0.093030766, 0.018723277, -0.079225644, 0.034435205, 0.07939304, 0.057573713, 0.040324043, 0.06799232, 0.05299162, 0.040207714, -0.09114099, -0.038775157, -0.048691895, -0.06417185, 0.01735545, -0.028322948, 0.04787776, -0.046149243, -0.046673458, 0.078766786, -0.003443498, 0.007510458, 0.05819594, 0.08809652, 0.052494343, 0.025751017, -0.09548582, 0.0463943, -0.026436996, 0.06345468, -0.09412706, 0.08296382, -0.025821695, -0.0452353, 0.09292791, 0.042066056, 0.07546247, -0.09046866, -0.042791575, 0.081014834, -0.038775425, 0.002457425, -0.018467594, -0.035083048, -0.055985462, -0.0077245478, 0.030717585, -0.008071026, 0.09099407, 0.07537249, -0.00063872617, -0.053433817, -0.068366006, 0.06453056},
   {-0.05411794, 0.02104843, -0.077418864, -0.08830587, -0.04617691, -0.06478739, -0.04500372, -0.06441508, 0.0007845181, -0.09078362, -0.004486151, 0.04270673, 0.016948275, 0.034543384, -0.032183122, 0.08522313, 0.064650215, -0.07702559, 0.09191284, -0.01768917, -0.047605768, -0.023629304, 0.02457986, -0.08500111, -0.056006603, 0.08110132, -0.011862667, 0.03155321, 0.09168834, -0.005874589, -0.0037932263, -0.0140707735, 0.017491207, -0.017725453, -0.057529904, -0.06754252, -0.022159504, 0.036251247, -0.01052661, 0.09118039, 0.044760108, 0.054964133, -0.019218868, -0.09135623, -0.0786707, -0.015736904, -0.07908102, 0.08594582, -0.08934516, -0.07917946, 0.08623139, -0.05148823, 0.056059036, -0.08231182, -0.0016979575, -0.06395645, 0.068207674, -0.024949804, -0.08102892, -0.05469414, 0.02272325, 0.06555515, 0.04537522, 0.034501594},
   {0.026750911, -0.02581791, 0.02175127, 0.0043031997, -0.055812016, 0.0064733718, 0.09410145, 0.009461228, -0.03390126, 0.02389224, 0.07202127, -0.002226311, -0.047598295, 0.006394827, -0.012760788, 0.08334225, -0.03432828, 0.042917214, 0.028752424, 0.035551965, 0.008142205, -0.040176928, -0.09846006, 0.016747206, -0.095600516, -0.065068625, 0.024730582, -0.05424274, 0.056082018, 0.09161665, 0.049377613, -0.07470106, -0.029805616, 0.04169665, 0.037069887, -0.07933603, 0.037380885, 0.028690424, -0.08768389, -0.09159623, 0.0008051913, -0.047779467, -0.008256912, -0.055847853, 0.06126991, -0.065118454, 0.036425263, 0.08867221, 0.01912329, 0.038587525, 0.04799367, -0.0289663, -0.0030178612, -0.06955861, -0.06400014, -0.08388928, 0.086439244, 0.069345914, -0.09318281, -0.027600745, -0.0245776, 0.018259726, -0.021469565, -0.036087174},
   {0.06795116, 0.07676581, 0.00989108, -0.08993278, 0.09051425, 0.08659739, 0.06019621, -0.056600656, -0.0070293997, -0.0683537, -0.04072685, 0.023357548, 0.05077847, -0.027805937, 0.066296674, 0.03188596, 0.04954763, -0.028793722, 0.055065744, -0.047121573, -0.04774326, -0.06562197, 0.06350033, -0.06134054, 0.07867854, -0.032310385, -0.07026194, 0.035146832, 0.044048987, 0.08163243, 0.08709035, -0.020762453, 0.0471131, 0.04865267, -0.024979297, -0.08517438, -0.08976208, -0.0848488, -0.05031366, -0.07095079, -0.054509208, -0.055789873, -0.06800681, 0.0889165, 0.041988175, -0.013610442, 0.069429114, 0.014299842, 0.08091574, 0.049775723, 0.051395763, -0.08378724, 0.0012351238, 0.080286525, -0.050752014, 0.026212515, -0.07032905, 0.06646, 0.068163745, 0.062120035, -0.026900906, 0.00047656894, 0.027099501, 0.07559149},
   {0.05531171, -0.038675886, -0.029304087, 0.039203074, -0.052749917, -0.009792133, -0.030606404, 0.010581833, 0.05416873, -0.054018617, -0.010219999, -0.056320656, 0.032797523, 0.024160562, -0.079030745, 0.014371462, -0.047579225, 0.019631073, -0.045798037, -0.068067715, 0.06437478, -0.04610866, 0.011579312, -0.015118308, 0.022529192, 0.030195285, -0.03725573, 0.07335991, -0.07603517, 0.015866421, 0.03322904, -0.03850556, -0.033109136, 0.067442924, 0.05593336, 0.023588669, -0.01383186, -0.05510855, 0.046263844, 0.04678286, -0.035197098, -0.078741, -0.07568364, 0.07265469, 0.006811038, 0.073001094, -0.03446105, 0.046182737, -0.018785793, -0.071224466, -0.096293196, -0.026784346, -0.038631815, 0.05689446, 0.037995346, 0.056750074, 0.019659055, -0.060763437, 0.08825747, -0.0053637596, -0.048139825, -0.027407713, 0.08555409, -0.06591702},
   {-0.03214632, 0.012330312, -0.034488972, 0.045322727, -0.030950624, 0.055968568, 0.03847341, 0.030877901, -0.029062252, -0.014537094, -0.008814566, 0.030237732, -0.04748053, 0.025547951, -0.007923342, 0.0027981848, -0.01315372, 0.08174484, -0.026192859, -0.063455455, -0.031932283, -0.035888672, -0.094961844, -0.09144158, 0.085846834, -0.07033237, -0.067340046, -0.012087713, -0.09126988, -0.0908304, -0.02413252, -0.021232435, 0.016100883, 0.04325364, 0.07230182, 0.06653651, -0.041254032, -0.02431982, 0.016294785, -0.044824876, 0.035338916, -0.04612596, -0.03182495, 0.01619991, 0.0363649, 0.04377776, 0.043412693, -0.00012728127, -0.06762421, 0.049753543, -0.09010853, 0.0741194, -0.095136195, 0.03028661, -0.01574041, 0.03009761, 0.05352647, -0.00709625, 0.054135226, -0.0101813, -0.08329537, -0.006544009, -0.021246402, -0.09787788},
   {-0.0073188464, -0.055215374, 0.023175009, -0.058050662, 0.08856701, 0.06306051, -0.054178465, -0.009659277, 0.085927516, -0.06374996, 0.052295126, 0.045487586, -0.08154792, 0.09115607, -0.07021983, -0.07143246, -0.022178646, 0.040484644, 0.07204632, -0.038291316, -0.09192666, -0.008990028, 0.06423261, -0.06136655, -0.0101828445, 0.04595158, -0.012477765, 0.063631624, -0.01897794, -0.040559895, -0.041653335, 0.029647652, -0.06270272, -0.015426387, -0.021747192, 0.0024616465, 0.04200522, -0.013907449, 0.053245135, -0.020311244, -0.013639932, -0.038251676, 0.007296896, -0.056877103, -0.0523931, 0.008944916, -0.020688178, -0.07210041, -0.005359349, -0.06303059, 0.07054907, -0.023719512, 0.08166775, -0.057217065, 0.091517426, -0.025262782, 0.0016929954, 0.0016707554, -0.048242375, -0.04034299, -0.08565677, -0.02573821, -0.057609398, 0.058941808},
   {0.060418982, -0.07747067, 0.043848902, -0.055331305, 0.016424758, -0.005821077, 0.06009776, 0.057584845, 0.07369434, 0.065359294, 0.032043494, 0.058206797, -0.07931119, 0.060989298, -0.011162497, -0.053680133, 0.082875445, 0.025394283, -0.072751425, -0.022904314, 0.056638144, 0.015648993, 0.06521797, -0.09029102, -0.04146614, 0.077908136, 0.07997274, -0.050130762, 0.07652449, -0.018953867, 0.03782038, -0.05424097, 0.053896107, 0.03856399, -0.0218287, 0.08034757, 0.04371935, 0.07942308, 0.053463966, 0.013896048, -0.053720422, -0.07028924, -0.048148658, 0.045632638, 0.03630046, -0.09034329, 0.02088469, -0.071390435, -0.08039679, -0.007585476, 0.012953326, -0.017734766, 0.051802706, 0.02887506, -0.008987702, 0.0078393975, -0.06835192, 0.028928472, -0.0812813, -0.019895712, 0.070621215, 0.04640747, -0.063546054, -0.032599296},
   {-0.060233112, 0.025644116, 0.044322155, -0.09709337, 0.0280109, -0.09268813, 0.0897243, -0.06435083, 0.04168508, 0.018649656, 0.06454673, 0.0014261325, -0.06590581, -0.0075203744, 0.014289252, -0.03966872, -0.09196292, -0.08645952, 0.013119638, -0.07116801, 0.06612905, 0.040904984, 0.06325104, 0.03779597, -0.03433772, -0.040038154, -0.06425012, -0.040259734, 0.06479963, -0.05481838, -0.012003641, -0.08602755, -0.027785987, -0.042739503, 0.07375715, 0.03462755, -0.075702235, 0.0026685249, 0.043617614, -0.04527748, 0.045866083, 0.02001702, 0.0826428, 0.075814925, -0.06006022, -0.05872858, 0.013010987, 0.018053688, 0.06493655, -0.07866192, -0.02951525, -0.015468553, 0.023165232, -0.08896731, -0.089031346, -0.07613034, -0.036510758, 0.010623635, -0.07955439, 0.047043443, 0.04993385, 0.05498662, -0.013363897, 0.063947916},
   {0.008438344, 0.09298969, -0.022333609, 0.079787746, -0.024190592, -0.026544916, 0.03193695, 0.04372095, -0.06405017, -0.08329726, -0.030336626, -0.042428073, 0.032213874, -0.0019504889, 0.015973888, -0.027576648, 0.035325546, 0.06279228, -0.082389265, 0.06522504, -0.047577962, -0.09103826, -0.091223426, 0.029460229, 0.034850955, 0.05869979, -0.08356177, -0.076414004, 0.014705062, 0.081324585, 0.020481467, 0.050143223, 0.08967256, 0.007495968, 0.031253982, -0.08153594, -0.026670886, -0.027964097, 0.0300343, -0.026278406, 0.07667701, 0.092808895, 0.09518158, 0.01161553, 0.08975853, -0.011711887, -0.09127881, -0.07798001, -0.008673621, 0.04421253, 0.08265366, -0.058622386, 0.05700591, -0.04061474, 0.08793188, -0.073524244, 0.041974396, 0.029469337, -0.0062062293, 0.06433521, 0.059065193, 0.030543938, -0.055459004, 0.012294904},
   {0.049649525, 0.063773334, -0.0711836, 0.08356795, -0.006966405, -0.0050732004, -0.022528209, -0.05665699, -0.047029965, -0.04803929, -0.08777978, -0.06544469, -0.07831925, 0.095036216, 0.056744568, -0.06989119, -0.02271524, -0.024947084, 0.074002184, 0.029216442, -0.00010885013, -0.020988306, -0.012338745, -0.08700679, -0.07279285, -0.07867648, 0.010469466, 0.085002296, 0.0292231, 0.022602797, -0.0639985, -0.042033426, -0.059956, 0.075155355, 0.06571809, 0.014721323, 0.0016417973, 0.045028716, 0.023745287, 0.01011087, 0.074093856, -0.05660175, -0.0033505196, 0.03931526, 0.019008858, -0.0830234, -0.009802929, 0.0678036, 0.008401481, 0.05463736, -0.06888709, 0.018672928, -0.050454434, -0.050394278, 0.06137783, 0.02064427, -0.04814316, -0.042749207, -0.028694734, -0.0056673912, 0.04952965, -0.023546278, -0.067213, 0.0783378},
   {-0.06953424, 0.040526576, 0.025505563, -0.060450174, 0.05187329, 0.013319207, 0.040856156, -0.0033587578, -0.0883007, 0.060254674, 0.08694973, -0.07865555, 0.0712964, -0.041526817, 0.045821972, 0.0686573, -0.0017323933, -0.05092669, -0.092387594, -0.04476154, -0.028260978, -0.031536806, 0.076029174, -0.07715105, 0.024402235, 0.08360521, -0.0135575505, -0.011385444, 0.053879283, -0.047522094, -0.0014223099, -0.032310363, 0.047532313, 0.019717256, -0.005061969, 0.08778978, -0.06457216, 0.0017390663, -0.059373803, 0.0046147928, -0.005452677, -0.067249395, -0.033744674, -0.047450095, 0.07928673, 0.009718712, 0.0015760957, 0.008737078, 0.061842352, 0.012930584, 0.011232463, -0.080515295, 0.074763626, 0.09273232, -0.013253972, 0.04947741, -0.039342925, -0.032088157, 0.080542885, -0.04964906, 0.03591501, 0.07802481, -0.045705386, 0.061615508},
   {0.0047325087, 0.099915095, -0.06316759, -0.05972887, -0.060134187, -0.05700467, -0.019779572, 0.07729975, -0.025829667, -0.08745661, 0.029288284, -9.2413095e-05, -0.05800169, 0.08242015, -0.058413025, -0.08155371, -0.087325245, 0.021320201, 0.026887469, 0.06646448, -0.011280048, -0.09492453, -0.053432938, -0.06625561, 0.05721428, 0.061562397, -0.01839358, -0.010574584, 0.07114244, -0.036480516, 0.06991832, 0.054427706, -0.09311809, 0.0034139757, -0.05101283, 0.0071874694, -0.002116656, -0.07458337, 0.08343398, -0.044154786, -0.07305632, 0.023044392, -0.059484128, -0.036051203, 0.09495246, 0.05210207, 0.044075467, -0.065026864, -0.07670309, 0.00086532143, 0.08531718, 0.004242465, 0.030007495, -0.050059546, -0.07458826, 0.08434218, -0.06973512, -0.0038496738, 0.03286267, -0.0116692325, -0.07736545, -0.00021229684, -0.06305574, 0.0050279633},
   {0.07703715, 0.052927367, -0.09729135, -0.061272357, -0.042527765, 0.0362106, 0.022534784, -0.052897923, -0.06514438, -0.055233106, 0.06348755, -0.0085258465, 0.06977599, 0.06927508, -0.09083901, 0.015917934, -0.04453114, 0.0359473, 0.02412337, 0.048502583, 0.019729389, 0.018169068, 0.0011317817, -0.09115868, 0.08823255, -0.040831584, -0.012794084, -0.02563219, 0.050444983, -0.058965486, -0.02038178, -0.0859638, -0.07824605, -0.006130593, 0.033818558, -0.02474635, -0.0044419887, -0.044897255, 0.07634576, -0.061996035, -0.023100775, 0.08175909, -0.027059106, -0.07194994, 0.09408092, -0.003108222, -0.042848125, 0.044409133, 0.053881098, -0.06199446, -0.06387441, 0.04620429, -0.055756778, 0.0058359206, -0.047610734, -0.048434366, -0.04703522, 0.018232781, 0.04045274, -0.085894756, 0.038853686, -0.0070868805, -0.0116917975, 0.008443616},
   {0.06364913, -0.016235098, 0.020616371, 0.003921577, 0.074227676, 0.066434994, 0.083982445, -0.06470271, -0.0012325943, -0.04467875, -0.041405793, -0.0055402247, -0.06296924, -0.062391426, 0.002678752, 0.08494302, -0.084610194, 0.088093586, 0.076441415, 0.023464032, 0.0738602, -0.00903509, 0.071486704, 0.009571046, -0.018445814, -0.06675527, -0.059341297, -0.015284654, -0.072830185, 0.02218341, 0.09107846, -0.07339627, -0.09319262, 0.09831519, -0.0077712946, 0.034980804, 0.024449548, -0.08487077, -0.038229655, 0.029522233, -0.08659326, -0.006489031, 0.05521025, 0.034644164, 0.07101029, -0.06325147, 0.0851093, 0.08879004, 0.012207174, -0.060901195, -0.040218927, 0.048995234, 0.062247075, -0.04323182, 0.052131154, 0.02892376, -0.05169894, 0.035263978, -0.08705378, 0.078685455, 0.07416488, 0.025509156, -0.090644784, 0.012945769},
   {0.038518555, -0.033215016, 0.030094445, -0.03412426, 0.026060492, -0.08909896, -0.00044587994, 0.06662359, -0.017306864, 0.07578098, 0.028944097, 0.018387124, 0.03324776, -0.03923645, 0.035018854, 0.07184506, 0.058056228, 0.009474173, -0.08752839, 0.012123255, -0.06345841, -0.1020769, -0.0703329, -0.036054898, -0.067413844, 0.08354145, 0.010298976, 0.083382316, -0.026461758, -0.07317409, -0.06662972, -0.040721823, -0.04136579, 0.00039540895, 0.0053150714, -0.07296997, 0.06276997, 0.00074054976, 0.0122771645, 0.07066714, -0.018249305, 0.08328337, -0.0054861004, 0.06336958, 0.07050258, -0.017812366, 0.012388917, 0.06617092, 0.032043748, 0.042731706, -0.08552458, -0.049177047, 0.06746069, -0.033705425, 0.022470243, 0.047756106, -0.013871814, 0.013626091, 0.07760651, 0.069270924, 0.03876193, -0.0207434, 0.03480457, 0.029911429},
   {-0.0396119, -0.010386229, -0.00324896, -0.09564393, -0.021700129, -0.0209445, 0.11829991, -0.024610536, -0.07188648, 0.076729715, -0.042159893, 0.040763058, -0.0007705167, -0.02757868, -0.08307786, -0.046290156, 0.030824129, -0.0872532, -0.06845332, 0.0021660698, -0.01631795, -0.08375134, 0.0059088347, 0.07410053, 0.098238796, 0.020777838, -0.02376608, 0.08741349, 0.032509826, -0.040914297, 0.10993032, -0.04323701, -0.0137361735, 0.06006195, -0.06672805, 0.071980916, 0.075634226, 0.027784545, -0.013005508, 0.008552119, 0.07307057, -0.07358689, -0.019255295, -0.007941276, 0.054796793, -0.019874472, -0.05752126, -0.05536683, 0.02508272, 0.04459842, -0.072093554, 0.055644877, -0.009455739, -0.07575915, 0.07460273, 0.057406493, -0.054376833, -0.08188226, 0.00068832934, 0.03443429, -0.07352308, 0.001875259, 0.050952595, 0.040572595},
   {-0.09583128, -0.039750177, 0.03150946, 0.085823044, -0.08275813, -0.0025627587, 0.041065082, 0.07086297, -0.04976488, -0.040629473, -0.05916372, 0.109135404, 0.0021552593, -0.059139945, -0.0566333, -0.049708057, -0.05966778, -0.049401492, -0.044562694, 0.021519892, -0.053018518, -0.100761615, 0.019121997, 0.008461677, 0.05902783, -0.092669375, 0.03713186, -0.081718385, 0.027122147, 0.0137954205, 0.032504868, 0.05256901, 0.07743103, 0.0139522, 0.069973946, 0.06829756, -0.012970843, 0.01602368, -0.02613269, 0.017725825, -0.08854762, 0.040082343, 0.0009329799, -0.036172193, 0.057968512, -0.024251293, -0.047466688, -0.059453975, -0.0043609543, 0.113912255, 0.06364679, 0.08033309, -0.061279155, -0.08200462, -0.043737732, 0.014294466, -0.015216649, -0.012290985, 0.082756795, 0.02464875, -0.05560621, 0.06117583, 0.026937133, 0.07065404},
   {-0.06043287, 0.033102017, 0.019638704, -0.046856552, -0.078527726, -0.07802789, -0.0847187, 0.00043785112, 0.0007715307, 0.08000577, -0.07599036, -0.08204852, -0.045609612, 0.07550891, 0.01734855, 0.04035618, 0.06731505, -0.08643064, -0.06260073, 0.022505043, -0.076431215, -0.08130971, 0.03257445, 0.026628844, 0.056916274, 0.057018448, -0.00045296646, 0.04235351, -0.08402239, -0.054249324, 0.06619963, -0.021087768, 0.023251772, 0.008192654, -0.08699118, -0.09376657, 0.08682814, -0.014212631, 0.016008316, 0.033069618, -0.025593769, 0.00818824, -0.035161313, 0.030653805, 0.07941864, -0.08867976, 0.0365276, -0.0201581, -0.07847218, 0.03954776, 0.029178875, -0.091211654, -0.06549472, 0.043060593, -0.034274973, -0.06616072, -0.08291398, 0.021429593, -0.06270352, 0.025469162, 0.092368886, 0.062479325, 0.08926086, 0.05322008},
   {-0.030139998, 0.039587975, 0.07968047, 0.06057914, -0.063869186, 0.038640283, 0.077968575, -0.07998539, 0.026221944, 0.080634914, 0.016733862, 0.018138332, 0.028662808, -0.0858763, -0.05066805, 0.07056562, -0.09207182, -0.07182661, -0.052767333, -0.082178324, 0.08174678, 0.06783575, -0.07323584, -0.00029459596, -0.025252271, 0.062080875, -0.02604556, 0.06691798, -0.0003521964, 0.053048216, 0.016039459, -0.09454825, 0.05611404, -0.004446765, -0.038850397, 0.051680997, -0.017444318, -0.021349916, 0.018087935, 0.05514025, -0.057909828, -0.078235835, 0.08305644, -0.05517596, 0.010609201, 0.0090328315, -0.092909925, 0.03576012, 0.028240165, -0.034439854, -0.09490208, 0.047673993, -0.013235933, 0.00075589865, -0.050949764, 0.052555613, 0.055144254, -0.051382538, -0.022768065, -0.018398108, 0.07794579, 0.077385284, 0.0144540975, -0.08976442},
   {0.016681321, 0.020209668, 0.05560206, -0.039278854, 0.017145013, 0.06517929, -0.082952745, -0.046521932, 0.09117768, 0.011893329, 0.015845641, -0.010698134, -0.04858781, -0.0017354437, -0.02448649, 0.03724251, 0.05821011, -0.0798117, -0.0781953, 0.032007426, -0.08938215, -0.04927745, -0.031077018, -0.06802726, -0.090541855, 0.001768329, -0.053612188, 0.080108576, 0.09083278, 0.011626698, 0.0110435635, -0.08676284, -0.00093504786, 0.069083765, 0.08130354, 0.08725139, 0.056240868, 0.037591536, -0.055311374, -0.0059982464, 0.061555553, 0.0616559, 0.05506138, 0.07805791, 0.027726565, 0.05928944, 0.048507888, 0.07345951, 0.023231126, -0.034850124, 0.02872433, -0.023617052, -0.07207615, -0.056021348, -0.051742908, -0.0040793517, -0.07084965, -0.0008692729, -0.08080277, -0.012400388, 0.08987275, 0.005413197, 0.06843369, -0.0064766384},
   {0.076832056, 0.036231123, 0.026552647, 0.024929693, -0.08334067, -0.017920328, -0.0005537675, -0.016710585, 0.025652861, -0.026841035, 0.034274824, 0.051357992, 0.08818398, -0.09398802, -0.026331268, -0.06854431, 0.057864405, 0.07405519, 0.029796898, 0.047453698, 0.037457116, 0.09131358, 0.033773493, -0.085226804, -0.052922737, -0.084534585, 0.034979492, 0.07667992, 0.031271324, -0.07149286, -0.02045596, 0.013459841, -0.05429758, -0.014014578, -0.06356333, -0.018293347, 0.040398095, -0.015552735, -0.069717035, -0.029225037, 0.05102354, 0.07143348, -0.014745233, 0.057379194, -0.095762454, -0.036388595, 0.013729883, 0.08154102, 0.024003103, 0.0069712824, 0.047863066, -0.00017789751, -0.045568462, 0.042069875, 0.045046203, 0.005839569, -0.012695479, 0.038240246, -0.03943718, -0.017710786, 0.07193507, -0.07058967, -0.07698201, -0.025444603},
   {-0.064625636, 0.013085268, -0.08301313, -0.05350233, 0.05555821, 0.012842918, 0.056883406, -0.011415746, -0.07806806, 0.014555682, 0.03848491, -0.02870592, -0.047856048, 0.082228035, 0.082962416, 0.059969164, -0.09085836, -0.023891605, 0.08231083, -0.044980377, 0.07198304, 0.03646625, 0.07809847, -0.04357516, 0.09434836, -0.02393532, -0.016959256, -0.0068221563, -0.08970246, 0.060766764, 0.05231454, 0.06176773, 0.046716414, 0.054236352, 0.09017528, -0.05944354, 0.01995197, 0.07834066, 0.0742999, 0.02685067, 0.050226767, -0.014426708, 0.0034911945, 0.06608709, -0.07707912, 0.060942303, 0.038369566, 0.058892537, -0.047255334, -0.03394591, -0.074129984, 0.052387916, 0.08835149, -0.002493307, 0.024864495, -0.03480135, 0.045304578, -0.027352476, 0.07138512, -0.027584773, -0.025692118, -0.09144355, 0.08055712, 0.018761659},
   {-0.069337785, 0.004391996, 0.014109659, -0.039240196, -0.11563453, -0.006707464, -0.008196104, 0.04578847, 0.0075374115, 0.033277076, -0.05614832, -0.011355606, -0.05601196, -0.036094535, 0.05406513, -0.08006927, -0.050273124, -0.08461198, 0.053037815, 0.07700195, 0.087428, -0.02082965, -0.11018036, -0.007389307, 0.10398835, 0.0006941215, -0.050415743, -0.06752016, -0.06698154, 0.07170836, 0.021314308, 0.093630746, 0.068273015, -0.006683568, -0.09899653, -0.016225038, -0.0957635, 0.012813888, 0.009699235, 0.09135959, -0.004689423, 0.07490035, 0.09567107, 0.08519379, 0.019496262, -0.09357457, -0.085809134, -0.016196389, -0.0975692, -0.041448873, 0.090263225, -0.021032214, -0.056352437, -0.04543856, -0.008027069, 0.078562446, 0.03568706, 0.038638763, 0.010482602, 0.05802815, 0.05065318, 0.051306494, 0.034915503, -0.016257418},
   {-0.09970302, 0.015932318, 0.060056973, -0.025710246, -0.09237299, -0.076796204, 0.05393156, -0.07947797, -0.041023064, 0.06636152, 0.0118171945, -0.02694257, 0.0129926875, 0.056806345, -0.011618197, 0.009616233, 0.07761729, -0.08303719, 0.027101658, 0.06969594, -0.060774885, 0.07426675, 0.055161364, 0.05002079, -0.08429931, 0.06560374, 0.022732016, 0.041673664, 0.05026131, -0.06006929, -0.064045995, 0.03503661, 0.06700718, 0.06828472, -0.08938813, 0.08642329, -0.07784933, -0.032348998, -0.06741182, -0.07973692, 0.05421436, -0.08062934, -0.06571812, 0.038888834, 0.081703566, 0.06831225, -0.051289275, 0.057127807, 0.041738145, 0.09581966, -0.06101996, -0.0066676214, -0.036607157, -0.054348107, 0.044238813, 0.047494784, -0.07967576, -0.020287056, 0.007984661, 0.035149485, 0.0050020507, -0.008063622, -0.02111489, 0.0017055733},
   {0.054006226, 0.00087819167, 0.04782089, 0.051702954, -0.03734411, 0.016623594, 0.065701865, -0.011366962, 0.05159166, -0.04363622, 0.079306655, -0.044273272, -0.02059035, -0.023895953, 0.05595801, 0.022031024, -0.083007194, 0.058476187, 0.034337737, -0.005492246, -0.013586801, 0.062019993, 0.026886676, 0.06909134, 0.05328977, 0.05541988, -0.00046501865, -0.019135483, -0.052520037, -0.08277759, 0.0928358, -0.035922054, -0.023053154, 0.066239394, 0.08319643, -0.06848459, -0.027509345, 0.065060444, -0.06976203, 0.00054465234, 0.008854818, 0.054187454, -0.006500825, 0.028245911, 0.009522413, 0.004506096, 0.078045875, -0.08101385, 0.038077462, -0.02683869, -0.035547916, -0.0016774684, 0.081488535, -0.059596904, 0.06401033, 0.08776388, 0.088892244, 0.034019846, -0.07967998, 0.017374227, -0.0876458, -0.07253648, 0.08690307, 0.046406418},
   {-0.017188424, 0.08150465, -0.051114004, 0.053280868, -0.0055445144, -0.070909835, 0.0052617746, -0.08416125, 0.079383485, -0.07606199, 0.0901145, -0.0692118, 0.046109013, -0.00479214, -0.015411392, 0.04773719, 0.08191924, 0.018085718, 0.061136402, -0.053465337, -0.011229672, -0.06630312, 0.0721693, -0.027313218, 0.06712008, 0.00878496, -0.035431806, -0.039483957, 0.022202052, -0.06929621, -0.078618914, 0.0865165, 0.0013534576, 0.022069378, 0.06620697, 0.011767754, -0.072763994, 0.013241866, -0.084236935, 0.036632605, 0.084742635, 0.0424963, 0.076831505, -0.06843365, -0.026895873, -0.073203765, -0.05297311, -0.08376005, -0.03857146, -0.052630365, -0.08220017, -0.06460014, 0.07135927, -0.085262954, 0.009111941, 0.06478516, 0.07566819, 0.06922556, -0.016431853, -0.07911731, -0.013800451, 0.007173158, -0.0319554, 0.011135046},
   {0.04782951, 0.05921516, 0.07389912, -0.08680653, -0.08288852, -0.035767265, -0.06889944, -0.037109975, 0.009626437, 0.016160874, 0.004382983, 0.010968693, 0.032045536, -0.030421555, 0.02968961, -0.07458964, 0.031853735, 0.022597216, 0.029911965, -0.05836394, 0.030948874, 0.010753308, 0.05591448, -0.050322793, 0.083901435, 0.037514377, 0.0801413, -0.043809544, -0.063667476, 0.08576053, 0.035233777, 0.06750919, -0.022772647, 0.07435662, -0.06467947, -0.010362728, -0.08607717, -0.0016058807, 0.00644449, 0.038982905, -0.09119691, -0.07109587, 0.04732267, -0.085335135, -0.05793935, -0.05894348, 0.049767196, 0.064542025, -0.04005836, 0.054886624, -0.03588582, 0.04970848, 0.06093087, 0.044583537, -0.08100579, 0.054214206, -0.003717386, -0.034795906, 0.08206045, -0.07114631, 0.04536751, -0.083740495, 0.037615255, 0.01750008},
   {-0.018092675, 0.002092049, -0.040484395, -0.0890244, -0.021974865, 0.023875153, 0.052478775, -0.07281328, 0.023515632, 0.047980748, -0.055671908, 0.0717471, -0.07441953, -0.017452314, -0.004890591, -0.0041746944, 0.06576118, -0.0072005913, -0.04883942, -0.0325906, 0.023151007, -0.05520482, 0.0043961634, 0.0883173, -0.046760656, 0.06043921, 0.075467706, 0.05209827, -0.06803893, 0.04185208, 0.0017502863, 0.007783732, -0.05790397, -0.02289639, 0.033680405, 0.05510009, -0.08295404, -0.06895313, 0.07093024, 0.05237835, -0.08595574, 0.07651427, 0.0013827133, 0.029589206, 0.0459203, 0.035000216, 0.07041864, 0.0662496, -0.070650145, 0.09094451, 0.07048595, 0.04370282, -0.04102258, 0.033723466, -0.073281944, 0.076741695, 0.034220636, 0.019706933, -0.08805434, 0.020944439, -0.05517558, -0.07774356, 0.0804217, -0.020213194},
   {-0.071343996, 0.0904293, 0.05411902, -0.007842766, 0.054273196, 0.03442918, -0.044945277, -0.0056495853, 0.00512747, -0.066676416, -0.08382268, 0.014126735, -0.00551454, 0.06771379, 0.079115085, 0.0430518, 0.012734133, 0.034731247, 0.02926895, 0.036934614, -0.06922113, -0.056203917, 0.045961477, 0.07233436, -0.058539063, -0.012896049, -0.043337345, 0.021158287, -0.049340952, -0.015263192, 0.057379343, -0.0019566328, 0.059603043, 0.036057845, 0.052831035, -0.09139824, 0.05646205, -0.029000169, -0.015907632, 0.084237374, 0.055593785, 0.07690775, 0.077311926, -0.08283092, -0.024504578, 0.062022697, 0.042767324, -0.08465229, 0.032685824, -0.054155365, 0.016725808, -0.031482887, -0.004028304, -0.015310004, 0.060909025, 0.03071821, -0.055372395, -0.049783736, -0.04825757, 0.070929386, 0.045042608, 0.017491318, -0.036414262, 0.02853489},
   {-0.020494785, 0.062198598, -0.009188874, 0.06564492, 0.023063237, -0.056022927, 0.050697964, 0.01623375, 0.03612674, 0.0073791747, 0.005943045, 0.050487034, -0.027295977, 0.086664625, 0.074421816, -0.044780754, -0.017795263, 0.09251889, -0.081312664, 0.05775988, 0.019271836, -0.011623363, 0.018397799, 0.029828489, 0.073939234, 0.006223155, 0.006478469, 0.022893287, -0.027666487, 0.037318535, -0.05099954, -0.0052824942, -0.049111366, -0.09200934, -0.053718545, 0.0129692545, 0.03281339, 0.018779844, 0.024563545, -0.04596243, 0.04587458, 0.07285922, 0.060883544, 0.034280397, 0.044963706, -0.032007094, -0.07742782, -0.07774152, -0.03502484, 0.009625792, -0.071435325, -0.039886292, -0.05974557, -0.065587096, -0.058680676, -0.03773721, 0.06877743, -0.07744188, -0.049461607, -0.05395377, -0.017314523, -0.019759625, -0.001819701, 0.058573037},
   {-0.08512367, 0.025798608, 0.06486247, 0.012887619, -0.060643755, -0.05046345, -0.089587204, -0.099020086, -0.07518263, 0.0318323, 0.032200627, 0.058711633, -0.074303545, -0.026773145, -0.05182403, -0.027618892, -0.031835407, -0.08048681, -0.05510619, 0.06800584, -0.027492482, -0.05428156, -0.019442089, 0.0101854205, -0.07752958, 0.029295677, 0.07089477, 0.07054653, -0.06573647, 0.07275633, -0.08282129, 0.036556512, -0.050632294, -0.018332915, 0.061285302, 0.07838972, -0.022893092, 0.08789159, 0.07615777, 0.012504548, 0.017202845, 0.084711365, 0.07810755, -0.046517048, -0.056361124, 0.0030168926, -0.039236758, 0.036122207, 0.04098116, 0.06993753, -0.095886216, 0.07129585, -0.016003182, 0.07849691, 0.04970535, -0.033125047, -0.022378068, 0.010514407, -0.0012084618, -0.014436688, -0.0192906, -0.029480651, 0.062230874, -0.052590095},
   {0.07261394, 0.09764914, -0.071842365, 0.043968182, 0.08647315, 0.06712263, -0.055698916, -0.011318888, 0.038017042, 0.030903123, -0.0865426, -0.02789059, -0.01735077, 0.023627289, 0.003421843, 0.07046794, 0.061994202, -0.07436529, 0.03853201, -0.065150805, -0.054839082, 0.0809457, -0.046154235, 0.03813193, 0.01955812, -0.0017556255, -0.035328057, -0.0069525163, 0.0871555, -0.017902568, 0.04603706, 0.06318578, 0.021468736, 0.020846855, 0.072297394, 0.03569337, -0.02555282, -0.08205295, 0.05971786, 0.025940627, -0.08977719, 0.07663641, 0.0070644086, -0.028670952, 0.094889805, -0.017254991, -0.028803224, 0.021567479, -0.056033283, 0.04709548, 0.040330194, -0.039197493, -0.02974323, 0.052572586, -0.029401332, -0.05826279, 0.045995317, -0.069734134, -0.08739126, -0.07001815, 0.04225309, -0.017555974, 0.00026006266, 0.03627224},
   {0.034887508, 0.08482711, 0.040686566, 0.06758747, 0.074636586, -0.052181374, -0.04663349, 0.007408557, 0.028301802, 0.06715076, 0.05297541, 0.06375778, -0.02352634, 0.044852596, 0.0641808, -0.068382435, -0.06903053, -0.06913918, 0.07379963, -0.068840094, 0.011976791, -0.035918552, -0.024048537, 0.04941211, -0.0244436, 0.056227464, -0.053333927, -0.0074095163, 0.047650225, 0.080487855, 0.056074865, -0.05434433, 0.0844697, 0.005512584, -0.048696827, 0.06848174, 0.0004441907, -0.08774045, -0.08104805, 0.032534204, 0.05644904, -0.0891775, 0.0035128137, -0.092426196, -0.025516322, 0.05179226, 0.064468265, -0.076841585, 0.040718876, -0.07159886, 0.032869276, 0.04735332, 0.010141619, 0.008278012, 0.04913909, 0.05709764, 0.05434609, -0.036679816, -0.0020425916, 0.0787261, 0.047433008, 0.08049258, 0.069439024, -0.045624025},
   {-0.06273894, 0.0028992703, 0.017096544, 0.052518856, 0.081787385, -0.04662309, 0.079572886, 0.060460605, -0.06560739, 0.037610974, 0.06208261, 0.035496723, -0.04688996, -0.028103994, 0.068068124, 0.047042094, -0.091855094, 0.09300495, -0.07482219, 0.047346804, -0.0010904095, -0.083206594, -0.059768688, -0.089181766, 0.07347574, -0.031058224, 0.061689317, 0.073454686, -0.06570384, -0.076913305, 0.044888176, -0.09021982, -0.025886625, 0.044622697, 0.035793524, -0.016857436, 0.05670158, 0.02587863, -0.011142905, -0.06633693, 0.077158235, 0.02232004, -0.051086266, 0.054297782, 0.0112235, -0.015067022, 0.045242038, -0.084974974, -0.08359687, 0.09876646, 0.046763696, 0.04528018, -0.088834725, 0.059023686, -0.07093172, -0.009499763, 0.0755872, 0.050995857, 0.025454044, -0.052797183, -0.079407625, -0.026607446, -0.05175976, 0.038175028},
   {0.02947868, -0.028353369, 0.08307447, -0.051949646, 0.003517612, 0.031053403, 0.0659134, -0.06476726, 0.0020297458, -0.08415881, -0.08717989, 0.07589544, 0.010884993, 0.018251427, 0.039421625, 0.043613024, 0.05594556, -0.06442522, 0.0696146, 0.048768327, -0.00914485, 0.033585392, -0.0144927995, -0.07781496, 0.008226094, -0.08333494, -0.05055397, -0.052846625, 0.057425983, -0.05836497, 0.028616799, 0.052234698, -0.023331292, -0.007966112, 0.042605367, -0.022290211, -0.006733364, 0.07778574, 0.07476336, 0.072956465, -0.067327894, 0.021169707, 0.081505775, -0.029372945, 0.051877566, 0.0260811, -0.09642093, 0.04468683, -0.02438769, 0.030216305, -0.03550073, -0.021217614, -0.027968023, 0.0717011, 0.029693283, -0.071656324, 0.03673064, 0.023509664, 0.07741869, 0.01178292, 0.06361681, -0.028166816, -0.09509877, -0.030698782},
   {-0.019596247, 0.04922898, -0.0032792727, 0.05065855, 0.07387221, 0.06961195, 0.06489775, -0.099280454, 0.05040268, 0.036304105, -0.084301874, 0.072183914, 0.00886327, 0.03336032, 0.011790961, -0.08102417, -0.07668836, -0.014755629, -0.014008649, -0.01993303, -0.009107067, 0.060677286, -0.017949233, -0.09236623, 0.022745617, -0.075886555, 0.06917669, 0.08480881, -0.09157625, 0.07509961, 0.048661657, 0.016560158, 0.008019924, -0.078364804, 0.055160783, 0.027027654, 0.030575443, -0.040070552, -0.08628126, -0.032235693, -0.09382221, 0.07543982, 0.048915654, -0.016130716, 0.0017813692, -0.050969627, -0.07143967, -0.008916978, -0.035877746, -0.033893436, -0.066368714, -0.04461282, 0.07934164, 0.076510884, -0.004870124, 0.031580906, 0.06482125, -0.041302517, 0.05480329, 0.048815213, -0.04873818, -0.009569824, 0.008185317, -0.017003674},
   {-0.0011682842, 0.01945077, 0.0746819, -0.06566823, 0.019711481, 0.02158436, 0.07686307, 0.052104745, -0.08117776, -0.021629855, 0.028844513, 0.009184327, -0.036396995, 0.03629228, 0.057845972, 0.037985973, -0.05074757, -0.016658925, -0.090007484, 0.020331863, -0.030785056, -0.021875171, 0.030109549, 0.06668221, 0.09342917, 0.0019543667, 0.067759275, 0.0074810395, -0.02540183, -0.01244238, 0.018806407, 0.058529604, 0.09200708, 0.009208663, 0.082241885, -0.01911794, -0.08007112, 0.0010798688, 0.057147317, -0.04983178, 0.0744349, 0.075248204, 0.010666173, -0.06867202, 0.07207517, -0.08593533, 0.06252679, -0.0074058315, -0.063936055, 0.07441785, 0.040159646, -0.041438323, -0.032259375, 0.08376401, -0.03721508, 0.06620118, 0.032716013, -0.0851033, 0.076999344, -0.035567824, 0.07771703, 0.081579365, -0.07958329, -0.012332733},
   {-0.08031013, -0.07296903, 0.06219216, 0.035934575, -0.015849445, -0.03164677, -0.024327908, 0.02084237, -0.0008981446, -0.08388601, -0.023651898, 0.0053539732, -0.022484899, -0.0077423067, 0.070955686, 0.039634995, -0.03165495, -0.016645357, 0.041686304, -0.030859364, -0.09246613, -0.028112622, -0.057473317, 0.061042212, -0.020379651, -0.0017799066, -0.04401651, 0.058067404, -0.047268547, 0.027835488, -0.0687166, 0.09292482, -0.0043624043, -0.035110153, 0.036078908, 0.06680496, 0.036821086, -0.08762363, 0.06907535, -0.01921691, 0.052791256, 0.03430832, -0.06592857, 0.053481154, 0.024480857, -0.06475083, -0.010683784, -0.08720849, -0.080634505, -0.033441942, 0.06938865, 0.03490428, -0.005637225, -0.004259035, 0.037600257, -0.006615572, -0.004925296, -0.07616512, -0.049256165, -0.08639579, 0.008500317, -0.06856463, 0.039173488, 0.059494033},
   {0.035616353, 0.003548019, -0.042601902, -0.07626141, -0.035849176, 0.047652256, 0.012003818, -0.097482465, -0.033953406, 0.0749926, 0.05408255, 0.07106637, -0.021628104, -0.017960476, -0.07539994, 0.03305661, 0.025186943, 0.022008114, -0.035915487, 0.024122756, 0.050014228, -0.017573958, 0.069760956, -0.021164574, 0.04197342, 0.039914943, 0.046888333, 0.07788448, -0.09202441, -0.046134636, 0.0005555231, -0.019951023, -0.052278947, 0.07413031, 0.06717928, 0.0011314921, 0.050215185, -0.042544797, -0.040979005, -0.069777295, -0.037251677, -0.07158047, 0.06600774, -0.08209622, -0.029929781, -0.005637881, 0.039501444, 0.060006183, -0.016055102, -0.014591037, -0.0019075446, 0.072073705, -0.072786234, -0.04280148, 0.07732748, 0.07873873, 0.03275062, 0.06452083, -0.026446052, 0.0045798486, 0.07100949, 0.087618075, -0.056850154, 0.071023524},
   {-0.087314904, -0.07288931, -0.06872666, 0.03035451, 0.035286922, 0.000536068, 0.0008508886, -0.079398304, -0.043124374, 0.028965866, -0.02982279, 0.07443838, 0.03051611, -0.054494888, 0.09135961, 0.07369987, -0.018041354, -0.08625766, -0.043168098, 0.0029205529, -0.08297979, 0.06453321, 0.03419187, -0.04137734, -0.05082029, -0.048095293, 0.08376438, -0.025025874, 0.07110702, -0.061616715, 0.071476266, 0.082276195, -0.008556254, -0.020024288, 0.07630809, -0.030166693, 0.05718665, 0.037504137, 0.042434543, 0.005642444, 0.009954591, 0.0031631067, 0.014696269, 0.03126569, -0.019295948, -0.019052004, -0.06416513, -0.0018605699, -0.08405273, 0.0025992906, 0.043573212, 0.09018772, -0.010568023, 0.0145110935, 0.020435497, -0.006496214, 0.01764407, -0.07029534, 0.04002563, 0.08527031, -0.055777032, 0.03991299, 0.01892572, 0.044310734},
   {-0.057787802, 0.08109555, -0.07514645, -0.00883222, -0.06133058, -0.029515143, 0.076816976, 0.0009587299, 0.08592342, -0.054199956, -0.082990535, 0.04824776, 0.0643233, 0.07470157, 0.03352339, -0.023327865, -0.095675215, -0.062424503, 0.043135993, -0.065305285, 0.03958152, -0.06369791, 0.031689133, 0.004685439, 0.029331345, -0.009559318, 0.06329715, 0.029230269, 0.08032756, -0.075927526, -0.012773071, 0.020861616, -0.048755478, -0.0016399088, 0.07853431, -0.03200376, 0.08312713, 0.02497624, 0.03024109, -0.049001902, 0.0280433, -0.078493856, -0.055486012, -0.059842996, -0.0115145445, 0.068949, 0.0712412, 0.08131001, 0.027231306, 0.024159556, -0.056250956, -0.07345447, -0.04870101, 0.038390793, 0.04753969, -0.0023619854, 0.09117914, -0.033316117, 0.078454636, 0.04633314, 0.06783042, -0.030412003, -0.07898309, -0.07935976},
   {0.07403836, -0.018713493, 0.034481194, 0.035323154, 0.024314374, 0.062599294, -0.014220199, 0.021458445, 0.08575539, -0.010962929, -0.081166156, 0.08867418, 0.035857596, -0.0853091, -0.06435576, -0.05900849, 0.030773662, -0.019691788, -0.05064522, -0.004471862, 0.07065074, 0.039514728, 0.081247665, -0.08956798, -0.07625717, -0.036117364, -0.04508949, -0.08649128, 0.03756345, -0.06676419, -0.016091732, -0.029098805, -0.061184622, -0.06792375, 0.062245518, 0.04226059, -0.071190715, 0.06556037, -0.06358745, 0.08730834, -0.083515674, -0.010197729, -0.014611624, 0.021114312, 0.081628405, -0.050550032, -0.046186265, 0.020632824, 0.07446712, -0.07142252, -0.071884476, -0.006966315, 0.019685818, -0.027524091, -0.05964832, -0.07699609, 0.040752023, 0.05413291, -0.052605517, -0.04573979, -0.018622141, 0.070300035, 0.08672948, 0.0029214337},
   {-0.008705445, 0.054825816, -0.080520496, -0.005004679, 0.07395489, 0.04846371, 0.077782735, -0.010882753, 0.09625623, -0.03865692, 0.042982675, -0.07824403, 0.07710434, -0.038736083, 0.040563278, 0.08467152, 0.038377136, -0.037026234, -0.042957045, 0.0054846513, -0.029536813, -0.062027495, -0.04955247, -0.019967563, 0.05959711, -0.07706922, -0.036727913, -0.05590936, 0.05114288, 0.017552659, -0.08107585, 0.012502837, 0.009919502, -0.038887396, -0.03936879, -0.05326581, -0.05849519, -0.05365891, 0.0414404, 0.06704865, 0.007945586, 0.09205604, 0.015126037, 0.05582965, 0.011450991, 0.06618591, -0.078137755, -0.013569051, -0.0018094634, -0.071636006, -0.04239327, -0.04228342, 0.037692625, -0.08751609, 0.039792784, 0.051754627, -0.06631395, 0.064515874, 0.06524693, -0.07317903, -0.022116918, 0.05839116, 0.040366046, 0.042862665},
   {-0.087346576, -0.082227655, -0.007902996, -0.013957075, 0.01619628, -0.03528654, -0.009139505, -0.07438057, 0.0971425, -0.04519165, -0.0596315, 0.027168136, -0.00047950447, -0.08514417, -0.006127849, -0.065673135, -0.06078321, 0.053511553, -0.02445463, 0.073571846, 0.07429789, -0.055254262, -0.037275337, -0.043345265, -0.04088241, -0.015667321, 0.05797422, -0.09348623, -0.041454785, 0.05506628, 0.062119585, 0.041530356, 0.032239877, -0.041105222, -0.041919325, -0.08471614, 0.039061345, -0.08830881, 0.09010948, 0.07934763, -0.07576671, 0.027874999, 0.037226476, -0.055832524, -0.06873195, -0.07325164, -0.044325247, -0.042999066, 0.008142284, -0.052611373, -0.023993814, -0.0522203, -0.029752988, -0.0725705, -0.014020868, 0.0179437, 0.07362919, -0.012044385, 0.035374723, -0.09237751, -0.019971747, 0.0027324855, 0.010703366, 0.057717007},
   {0.063606635, -0.049008153, 0.034947503, -0.041044813, -0.069210015, -0.061544035, -0.020435324, -0.0025389493, 0.033396296, -0.07675049, -0.002107136, 0.06308427, -0.0038912892, -0.009960701, 0.039911054, 0.061963774, -0.05942645, 0.019218802, 0.07082758, -0.046234094, 0.038970273, -0.030840784, -0.07839187, 0.07912096, -0.07183373, -0.026628062, 0.06101124, -0.037133947, 0.0751385, 0.01879283, 0.005413876, 0.002093453, 0.009774357, 0.06418627, 0.02524091, 0.058683358, 0.048826132, 0.0025736152, 0.06739872, 0.049993046, -0.0123679405, -0.052521817, -0.08349032, -0.088901944, 0.049431704, 0.07354486, -0.056360956, 0.064111054, 0.044826623, 0.021049624, -0.019858943, -0.051188245, -0.0855688, -0.03165665, -0.068213366, -0.07334087, -0.039743997, 0.02207981, -0.010764115, -0.022063473, -0.022376819, -0.07198998, -0.054817356, 0.07221552},
   {-0.03152258, 0.07958512, -0.069692425, 0.07896607, 0.06809527, -0.033619225, -0.02575701, 0.049294088, -0.048341278, -0.074060306, 0.04484061, 0.03170436, 0.06862978, 0.014583858, -0.06018376, 0.045633502, -0.05508035, -0.08108168, 0.08434517, -0.039140336, -0.05829447, -0.006037926, -0.090733014, -0.026416682, -0.08282137, 0.0073504644, 0.017082173, 0.08193498, -0.032254137, 0.0113560185, -0.019295303, 0.081541725, 0.04848302, 0.08976342, 0.043128807, -0.08173875, 0.07704386, -0.0058629345, -0.045459185, -0.029560924, -0.0729444, -0.050302077, -0.048182175, -0.021329522, 0.0686756, -0.0019170461, 0.07084159, 0.06721672, 0.031931784, 0.03814336, 0.022066822, -0.07622324, 0.02047463, 0.012781635, -0.041415315, 0.011938362, 0.08272271, -0.062925234, 0.037182726, -0.055372424, 0.09328677, -0.013218664, 0.031048538, 0.038398527},
   {-0.057400953, 0.026722739, 0.0220041, -0.057667702, -0.016880171, -0.077253275, 0.04010029, -0.058250245, 0.06597394, 0.0959286, -0.034847032, 0.0228819, 0.042328186, 0.018015428, 0.032946922, 0.00791382, -0.048488285, 0.045233868, 0.025488839, -0.07390061, 0.010549307, 0.031055128, -0.09182293, -0.032043263, 0.03142368, 0.08269783, -0.043187708, -0.011363588, -0.078069665, -0.04903875, 0.051319685, -0.02206697, 0.054935135, -0.050924506, -0.041178968, -0.06765637, 0.021625932, 0.06526814, 0.086559646, -0.030210257, -0.09548009, -0.08621801, -0.014050309, -0.05693072, 0.013145731, 0.0064112307, 0.031426735, -0.012838874, -0.024988046, -0.09233356, 0.02525341, -0.05837687, -0.01072038, -0.027790971, 0.074752636, 0.04378843, 0.010237466, 0.014861555, -0.06255646, 0.060722955, 0.017322348, -0.025925294, 0.012641157, 0.053948045},
   {0.055703912, 0.071909934, -0.012286971, -0.081146166, -0.09627215, -0.03649381, 0.08014534, -0.046358205, -0.034282673, 0.09085453, -0.020600364, 0.04433505, 0.035515077, 0.008156349, 0.03447377, -0.03954284, -0.015605178, -0.0796192, 0.020111606, -0.08675202, -0.07645233, 0.028468153, -0.029798698, -0.054087773, -0.042663477, 0.04058417, 0.008799533, -0.05626137, -0.07079667, -0.051240552, -0.09076585, -0.06972446, -0.057415836, 0.09101557, -0.0032995471, -0.058406077, -0.022575213, 0.05355597, -0.0736252, 0.032688968, 0.07752995, 0.017701663, 0.014434129, 0.044593982, -0.014784708, 4.962123e-05, -0.025404882, -0.0839452, -0.022992183, 0.040613644, 0.05544922, 0.01282119, -0.06729915, 0.06642663, -0.08939122, -0.08487104, -0.049641408, 0.05867246, 0.024173535, -0.034992322, 0.050836228, 0.05787372, -0.006174476, -0.052324712},
   {0.028836433, 0.055987094, -0.07469058, -0.0969357, 0.05703181, -0.08367516, -0.030875774, 0.077811554, -0.04263449, 0.03876803, 0.008542955, 0.019203225, -0.074900344, 0.030360049, -0.062718295, -0.0377729, 0.014428683, -0.027316734, -0.053172503, -0.0852472, -0.05844179, -0.017178508, -0.0021499384, -0.0071398094, 0.0779338, -0.038434766, 0.033337716, 0.04972923, 0.019962467, 0.0155783, -0.016582148, 0.024842357, -0.085655496, 0.053325556, 0.037123255, -0.036187116, 0.028262323, -0.09606878, -0.031258192, 0.067198105, 0.05303956, 0.011029407, 0.005722367, -0.078319006, -0.04820997, 0.009358532, -0.06087901, 0.048459034, -0.09279055, -0.07505255, 0.06828756, 0.025524177, 0.084480986, 0.06993415, -0.03613773, 0.01927392, 0.02731173, 0.025264507, -0.08935544, -0.077283904, -0.06823069, 0.03458541, -0.07778998, 0.0559467},
   {-0.076661356, 0.09647548, -0.08089691, -0.0037227718, -0.026680168, -0.023696804, -0.02059908, 0.070595086, 0.085638665, -0.08813214, 0.044538237, 0.0068945903, -0.022168279, 0.08882987, -0.071887866, -0.006361395, -0.025279596, 0.089060195, 0.075313486, -0.03925476, 0.0015858922, 0.046659406, -0.05766816, -0.06644221, 0.069579266, -0.006512198, -0.030129327, -0.024076201, 0.014199123, -0.003168963, 0.05670739, -0.00043140474, 0.0058665797, 0.063264765, 0.013068275, 0.061650828, -0.07439962, 0.038164746, -0.08532075, -0.024425462, -0.025371287, -0.048028875, 0.026969438, -0.053895988, 0.06661687, 0.051336724, -0.034278568, -0.08464139, -0.047297265, 0.086270005, 0.07825805, 0.021595709, -0.059128378, 0.04994216, -0.036116038, -0.027142163, 0.09025602, -0.040632833, 0.029222652, -0.06791352, -0.06682373, 0.05435521, 0.054144796, -0.015975524},
   {0.051065564, -0.03243763, 0.08369587, 0.060778227, 0.068267405, -0.0162867, 0.06487673, -0.02001544, 0.061414998, 0.07340232, -0.067908004, -0.03197048, -0.04389837, 0.085156634, 0.023534529, 0.061435826, 0.07606289, 0.050457038, -0.06502807, 8.6459215e-05, 0.055208158, -0.06588764, 0.07635032, 0.007667817, -0.014352886, -0.019646032, 0.0080868285, 0.027480176, 0.02304297, 0.058565475, 0.090434775, 0.07803185, -0.045135, -0.04068436, 0.01000946, 0.040181227, 0.054490685, -0.043734543, 0.046898436, -0.08467047, -0.023540955, 0.026398398, 0.02931686, -0.013727739, 0.085416555, -0.071812645, 0.057987478, 0.05050458, 0.046738658, 0.038039397, -0.042625755, 0.07536138, -0.08309726, 0.09110535, 0.045724742, 0.031235494, 0.0064466717, -0.0165035, -0.08418999, 0.056952134, 0.05866098, 0.033648588, -0.07095885, 0.034963153},
   {-0.016289689, 0.08343639, -0.046635434, -0.012564436, -0.084966905, 0.020360988, 0.02264792, -0.09063223, -0.07448432, -0.037295748, -0.0006120205, -0.08051517, -0.044282492, 0.06385143, 0.07476469, 0.07124951, 0.08429578, 0.07679074, 0.09159311, -0.05056168, 0.037352253, -0.011379008, -0.011391534, 0.012402356, 0.048204366, -0.026464352, 0.0809741, 0.08157684, 0.023975834, -0.05646906, 0.0008471162, -0.00968985, 0.08720856, -0.02625833, -0.043067135, 0.05672139, -0.063754976, 0.013400854, -0.07913491, -0.022329293, -0.07708264, -0.03290407, 0.05502594, 0.0341203, -0.022509197, 0.083897434, -0.06024904, -0.035532873, 0.026234906, -0.07179952, -0.019304441, -0.011821151, -0.0031159346, -0.07496098, -0.08521067, -0.027775105, 0.027229184, 0.04196083, -0.019833162, -0.0375539, 0.06864445, -0.028265, -0.03011384, 0.02909218},
   {-0.07765381, 0.056049984, 0.05714692, -0.082253076, -0.010201076, 0.06503688, -0.092113905, -0.0074785464, -0.07882773, -0.07909152, -0.06809649, 0.033688705, 0.07035007, 0.079139955, -0.01746896, 0.08015033, 0.0662698, -0.043658726, -0.016470477, -0.04320318, -0.0063438034, 0.08824047, 0.007923855, 0.06912341, -0.05951494, -0.061478604, 0.06682521, 0.07030656, 0.091822825, -0.07114048, -0.0714345, -0.056375816, 0.07631891, 0.04788099, 0.019604899, -0.040041864, 0.008808317, 0.047730125, 0.06984353, 0.0069374368, 0.0813477, -0.02934818, -0.022950927, 0.05680012, -0.07221399, 0.0021150822, 0.038745217, -0.020528903, -0.07309099, -0.035526086, 0.0057090065, -0.037532393, -0.048828952, -0.08771012, -0.035348233, 0.033890422, -0.09118565, 0.0478472, 0.046619304, -0.0946477, 0.010669667, 0.015225105, -0.025664542, -0.048184346},
   {0.028299026, 0.0929511, -0.039010067, 0.06681964, 0.008737767, 0.050309602, 0.0310964, 0.08386973, 0.019454928, -0.06557912, -0.022156313, -0.08879872, 0.009752259, -0.042838916, 0.009087533, 0.024388552, -0.056317855, 0.012155578, -0.059782613, -0.09310394, -0.00870827, 0.009368745, -0.07856372, 0.024775505, -0.061733566, -0.0855695, 0.0066815782, 0.09089253, 0.003851667, -0.068993606, 0.060101893, 0.038805723, 0.015759319, -0.020411901, 0.03537618, 0.076225825, -0.0014568437, 0.052517623, -0.06940334, 0.08333949, 0.036902767, -0.030054204, -0.08902331, -0.023348644, 0.07150802, 0.06421105, -0.0854505, -0.00015443005, -0.073309444, -0.053428464, 0.052630153, 0.022115394, 0.004943859, 0.069798745, -0.062792875, 0.032943852, 0.08466731, 0.053215284, -0.07690198, 0.041024894, 0.070664115, 0.005277723, -0.026707018, -0.07331927},
   {-0.06319713, -0.085080184, -0.057159483, 0.07444461, 0.09112192, -0.09563868, -0.031695906, -0.047272213, 0.05409145, 0.060804207, 0.007253967, 0.0076201237, -0.08067673, 0.051055532, 0.07398448, 0.032751046, 0.00030921734, 0.018143967, 0.020665288, -0.07061261, -0.039246127, -0.08606849, 0.013511148, -0.08109249, -0.025691114, 0.030107237, 0.05335448, -0.04380897, 0.054207377, -0.041625146, -0.039075408, -0.0587193, -0.06824876, -0.07196725, 0.033441786, 0.023870766, -0.06015705, 0.012708474, -0.088124394, -0.055314414, -0.071071, -0.04601318, 0.05088519, 0.00092401356, -0.07690404, -0.08878314, 0.07218621, 0.019330695, -0.020585334, -0.03762631, 0.023148764, 0.052250765, -0.08343288, 0.036073454, 0.06266899, -0.005539685, -0.09180861, -0.053452615, 0.040419616, 0.026846897, 0.06044357, 0.08526897, 0.03865365, -0.086712204},
   {-0.030683242, -0.02330581, 0.005676824, -0.05902589, -0.040453553, 0.020182071, -0.050086007, 0.03176823, 0.023055179, 0.036625784, 0.06302021, 0.038422808, -0.0062875003, 0.017243132, -0.015711598, -0.02664987, -0.04221251, -0.06745228, 0.02604393, -0.053819314, -0.024477793, -0.08346283, -0.042938616, -0.028480522, -0.08442044, -0.018356873, 0.009001088, -0.05304604, 0.014782488, 0.0594536, 0.05441141, -0.027040545, 0.028610148, 0.022496458, -0.028984321, -0.019658688, -0.070183836, -0.057196707, -0.048976358, -0.042059995, -0.040351573, -0.009514466, 0.032969374, 0.09099979, 0.02280815, -0.0955638, -0.059030913, -0.07468256, -0.048607375, -0.0044374107, -0.09455355, 0.05662643, -0.052396074, -0.023702756, -0.0377149, 0.027438603, 0.016123565, 0.062021308, 0.031129487, -0.004024911, 0.07964042, -0.011507802, -0.019655475, -0.0650093},
   {-0.0848867, -0.026401855, -0.07281033, -0.013134571, 0.07147437, -0.013846928, -0.07104543, 0.023449922, -0.068095155, 0.09300188, 0.040432595, -0.08312469, 0.060815208, 0.028109308, 0.07034425, -0.0002503246, 0.031728346, -0.060939018, -0.0070238933, 0.024304785, 0.0751775, -0.034256637, 0.050434988, -0.07639718, 0.07521315, -0.0623276, -0.010463777, 0.09332881, 0.025550067, -0.018522903, -0.011407662, -0.04990283, -0.03348532, -0.045701426, -0.05373598, 0.03310148, 0.020357005, 0.02817515, -0.050577737, 0.020765074, -0.034565963, 0.011536546, -0.04261202, -0.036401376, 0.04581851, 0.08687682, 0.068328924, -0.017206304, -0.017863136, -0.040626697, -0.07196621, -0.067084044, 0.05997952, -0.035194002, 0.012522742, -0.07222579, -0.04254364, 0.01387061, -0.08876365, -0.03235824, 0.0724118, 0.090438865, -0.041308075, 0.03726619},
   {0.049686257, 0.049510103, -0.0054686274, 0.065749995, -0.08594531, -0.06619256, 0.041307945, 0.042945106, -0.025737228, -0.037072144, -0.008405007, -0.041505568, 0.048777856, -0.085905686, 0.010985598, 0.024963774, 0.026830051, -0.079059735, 0.021222085, 0.08408491, -0.0914614, -0.02090528, -0.053990304, -0.06561789, 0.074744985, 0.032827087, -0.06125986, -0.00882596, 0.03423161, -0.017757036, 0.011236247, 0.09262252, 0.019577518, -0.0021286716, -0.03370553, 0.029440235, -0.07462656, 0.05259565, -0.05091006, 0.0694878, 0.07920507, -0.04427967, 0.050103072, -0.08477426, -0.0528892, -0.082566164, -0.028911661, 0.07559483, 0.06424698, 0.09683713, 0.08880625, 0.011819884, 0.056687806, -0.022971414, -0.053400286, 0.044173602, 0.014610631, 0.07328344, 0.047860436, -0.018967403, 0.019511541, -0.01531928, -0.060632363, 0.07694675},
   {0.04713361, 0.06627806, 0.06431349, 0.066760965, 0.058362022, -0.0068335496, 0.089200236, 0.029605458, 0.03672328, 0.05988401, -0.061915495, -0.08873682, -0.047266077, -0.004416111, 0.06686691, -0.0370619, 0.023518207, 0.034020953, 0.073552676, -0.076724716, -0.09394889, -0.039833583, 0.03378989, -0.025496073, -0.0016829639, -0.003494275, 0.045635007, -0.06523649, 0.02226466, -0.06407298, -0.08360806, -0.06569781, -0.009063996, -0.06643091, 0.049341053, -0.007746439, -0.04341943, 0.079834715, 0.01124554, 0.031311415, 0.049115065, -0.08538617, 0.07661194, -0.025529377, -0.052365467, 0.029259432, 0.021779822, 0.071542375, 0.045200128, 0.024769712, -0.068059295, 0.04027406, -0.031607673, 0.017383948, 0.08496987, 0.014853759, 0.026793655, 0.023026979, 0.06225466, -0.002278585, -0.043747745, 0.086240746, -0.092737675, 0.058370307},
   {0.03483789, 0.0078120437, 0.08155542, 0.014924444, -0.021906504, -0.009493162, -0.028407214, 0.0033688014, 0.078203805, 0.06351813, -0.01160761, -0.038475834, 0.07128882, 0.08617399, 0.039740957, -0.023156635, -0.09124889, -0.031190269, 0.04270833, 0.0319844, 0.03673626, -0.003248148, -0.021914547, -0.08108951, -0.059785936, -0.0859645, 0.050817166, 0.06160492, 0.070790954, 0.0827151, -0.037844192, 0.044586714, -0.092546314, 0.0061629056, 0.024304807, -0.04601177, 0.036990393, 0.045204807, 0.07138871, 0.044104435, 0.018535491, -0.007656604, -0.022779312, 0.01877901, -0.06539346, -0.004346079, 0.045974404, 0.012467824, -0.025114141, 0.07606113, 0.02494987, 0.026914276, 0.076254845, 0.074341394, -0.005771287, -0.069264404, -0.051245216, -0.053434756, -0.08820002, -0.07906464, 0.08022666, -0.025558949, -0.020449296, -0.0835593},
   {-0.010877258, 0.08038805, 0.004683418, 0.06415807, 0.002344469, -0.020876953, -0.04678149, -0.054018147, -0.020086523, -0.023675373, 0.07941323, 0.027436493, -0.057938058, 0.076161064, -0.041895647, 0.05551479, -0.07878191, 0.078446575, 0.051730804, 0.013443513, 0.045215063, -0.04660513, 0.022230161, -0.08772205, 0.07538197, 0.009328616, 0.09636372, -0.066409566, -0.05058989, -0.07029923, -0.0045836163, 0.07167821, -0.026806884, 0.040130023, 0.0729255, 0.022167984, 0.062589005, -0.09981234, -0.09425765, 0.067295544, 0.053349618, -0.08558999, 0.030124841, 0.021139026, 0.046960164, 0.0037387733, 0.003614986, 0.04928314, -0.09914148, 0.07047579, -0.028289212, 0.016691655, -0.0638163, -0.07071085, -0.06099869, -0.009296994, -0.03716838, 0.050415415, -0.031061936, 0.02075973, -0.044214115, -0.070146695, -0.02664083, -0.084647655},
   {0.025678216, -0.058096003, 0.072392724, 0.046344467, -0.01641227, 0.07856989, 0.067877315, 0.01804443, -0.07064461, 0.06588357, 0.09204445, 0.01829354, 0.054176413, -0.07331539, 0.083609335, -0.034602765, -0.063346155, 0.023741245, 0.0199814, 0.023863608, -0.017635684, -0.06507163, 0.027208678, -0.072558954, 0.06082281, -0.044813596, 0.027241597, 0.028827302, -0.08082104, -0.07345613, 0.06936342, -0.019323478, 0.07782463, 0.10215752, -0.028469339, -0.050989963, 0.060234446, 0.050240967, 0.055695646, 0.031256147, -0.052415043, 0.0052491724, 0.073361285, 0.013961576, 0.06595263, 0.01102258, 0.081994265, 0.049322303, 0.06768884, -0.0285961, -0.093140244, 0.023159131, 0.004769304, 0.07938058, 0.031618044, 0.009903024, -0.0566308, 0.017628027, 0.006195329, 0.041091874, -0.00546932, -0.039305933, 0.020602189, -0.006591698},
   {0.0003354126, 0.021266472, -0.013740956, 0.025606504, -0.057749167, 0.083930925, 0.052393198, -0.06727345, -0.08525086, 0.06032217, -0.036211707, 0.015578412, -0.066300415, 0.04379306, 0.09047427, -0.06991611, 0.07532932, 0.052376725, -0.06933686, 0.0279965, -0.09939628, -0.047990456, -0.048153523, 0.01255732, 0.08936198, 0.076867186, -0.048193377, -0.0015340301, 0.046452902, 0.021021731, 0.04613608, -0.013924185, 0.05637539, -0.03190388, -0.02260793, 0.06572451, 0.06586697, -0.05257534, 0.009250254, 0.021931395, -0.08113823, 0.007548183, -0.0760804, 0.0842325, -0.0611025, 0.015556913, 0.081176385, -0.029117716, -0.0073184744, 0.0050237714, -0.0120173665, -0.04221249, 0.020413242, -0.022936307, -0.052118223, -0.0247016, -0.037396155, -0.014668832, -0.06977625, -0.04759618, -0.0817198, 0.0141323805, -0.03922375, 0.081852615},
   {-0.06197658, 0.004229919, 0.07677258, 0.07321234, -0.044349313, 0.01456513, 0.07505331, -0.031868163, 0.036409833, -0.040961843, 0.087691285, 0.03662531, 0.085365124, -0.023666523, 0.05309374, -0.064699374, 0.05283387, -0.027884431, -0.07743924, -0.051496055, 0.038776394, 0.091514476, -0.0041493545, 0.011138134, 0.042669944, 0.044672295, -0.049543213, 0.09336145, 0.08049934, -0.0066166967, -0.04622684, 0.06292672, -0.009011, -0.076312006, 0.024108112, 0.08317974, -0.032401063, 0.056901593, 0.0035238164, -0.003561385, 0.077772684, -0.058098316, -0.04539484, -0.07730615, 0.04576222, -0.097150765, 0.063019864, 0.053161737, 0.0076098666, -0.01018941, 0.08651383, -0.0922592, 0.057994664, -0.015808225, 0.023589775, 0.010896937, -0.016143678, -0.030969491, -0.066447325, -0.070482925, -0.08828381, 0.03647531, -0.044930045, 0.0020750503},
   {-0.094425544, -0.032116707, -0.07491924, 0.01452917, 0.08436416, 0.042043403, 0.08171741, -0.022095386, 0.055511717, -0.016699892, 0.047290526, -0.02945872, 0.08923597, 0.014765435, 0.015236296, 0.07753947, 0.015575077, 0.051927947, -0.009532087, 0.017739391, 0.03686113, 0.040991165, 0.024499431, -0.0065933764, 0.010531644, -0.062025003, 0.068989195, 0.00050634914, -0.0755386, 0.053365313, -0.06739119, 0.06559738, -0.037206404, -0.019180031, -0.06953726, 0.08473803, -0.032697394, 0.0034289197, -0.07274696, 0.088981174, -0.071608536, 0.025751665, 0.02232902, -0.049910944, -0.07727782, 0.047000304, 0.010200567, 0.05448483, -0.014460968, -0.006916683, -0.08959663, 0.085781865, 0.030699464, -0.08313459, -0.088513836, 0.062204182, 0.0720513, 0.08951832, 0.06938585, -0.06552059, 0.052016065, 0.0009222999, 0.008508712, -0.005015344},
   {0.06531217, 0.07210343, 0.07685136, -0.041975077, 0.078204975, 0.03190179, 0.07162444, 0.08388247, 0.04749439, 0.063614525, -0.051962815, 0.0641848, 0.01813943, -0.026560053, 0.039590783, -0.034809478, 0.06673659, -0.015518919, -0.066130325, -0.06076292, 0.069298856, -0.051083185, -0.04276407, -0.052935798, 0.025353163, 0.08396949, 0.0709031, -0.086497545, 0.025480852, 0.064872794, 0.06004754, 0.00025078605, -0.08071878, -0.04268675, -0.033364624, 0.05680498, -0.041027643, 0.032575764, 0.08400185, -0.012315743, 0.018083025, -0.004812874, 0.0750045, 0.0024341494, 0.093263656, 0.016497217, -0.045860592, 0.048788488, 0.073104516, -0.06948732, 0.047652975, -0.029935375, -0.006992569, -0.07017124, 0.052932285, -0.044353414, -0.030249493, -0.04535115, 0.014924765, 0.050221153, 0.014503589, 0.07714208, 0.035272483, -0.030253503},
   {-0.06947184, -0.020913588, -0.032447755, -0.06447418, -0.031109944, -0.079993725, -0.03125954, -0.017447788, -0.07910807, 0.029634085, 0.07899014, 0.014733058, 0.039578862, 0.080334425, -0.024552055, -0.01765979, 0.03461861, 0.067077525, -0.07951912, -0.01054012, 0.07208421, 0.073016696, 0.008330536, 0.047149964, 0.07924723, 0.08756951, -0.021434553, -0.010869279, 0.0897995, 0.0044239014, 0.013343675, 0.05900246, -0.0076333135, 0.07606313, -0.09720556, -0.0783314, 0.0056293807, -0.06415366, -0.010404758, -0.068345346, -0.033265535, -0.06597888, 0.05664519, 0.06955504, 0.05399293, -0.080105595, -0.092420876, 0.07007244, -0.07584513, -0.050538868, -0.091570266, 0.066718854, 0.04906635, 0.060486503, -0.06581339, -0.028705057, -0.024984807, -0.08229063, 0.004667595, -0.026551966, -0.06931306, 0.018248066, -0.06889685, -0.09041386},
   {-0.01252333, 0.0625997, 0.07543496, 0.0043542725, -0.023636663, 0.07590844, -0.075126566, 0.050174374, 0.051115535, -0.08190593, -0.08545345, -0.07966791, 0.053495727, -0.013145611, -0.061125975, 0.060370766, 0.009830866, 0.0823066, -0.02467785, 0.0020878962, -0.026178768, 0.086668506, 0.042909067, 0.06971689, -0.0446386, -0.05728901, 0.08596542, 0.028717674, -0.033920728, -0.039700583, -0.07036937, -0.0875602, -0.064159036, -0.03514904, -0.030758515, -0.04732565, 0.0050030304, 0.020304315, -0.0406109, 0.032536097, -0.09876712, 0.09156608, 0.08439739, 0.0777744, -0.016730716, 0.00604726, 0.0821171, 0.019139903, -0.005389429, -0.06473213, -0.007250926, -0.047966424, 0.068609565, 0.022924758, -0.0785048, -0.022020321, 0.07191457, 0.0936436, -0.07213453, -0.035840664, 0.0096421465, -0.031758323, -0.03007654, 0.060244996},
   {0.00939804, -0.08198541, -0.06249515, -0.042858, -0.0012448139, -0.0026816858, 0.06147811, -0.03188698, -0.06847614, 0.012446942, -0.023141354, 0.06526447, -0.064369425, 0.017414577, -0.03293684, 0.036994465, 0.043326452, -0.05435545, 0.09261582, -0.03886033, 0.07166774, 0.05279753, 0.059654478, -0.021652728, -0.036152866, 0.026062803, -0.076144606, 0.06991858, -0.07600164, -0.04671206, 0.03857183, -0.040800616, -0.012261793, 0.0017934368, -0.020637639, -0.06338602, 0.08663782, -0.059224766, -0.011159292, 0.00840681, 0.0029429756, -0.040669203, 0.00076251815, -0.07442393, 0.07602841, -0.009721625, 0.076626964, -0.08107671, 0.06437611, -0.018035917, 0.07956318, 0.03838692, 0.034925967, 0.0048680753, 0.043864347, -0.083594844, -0.06398191, 0.02011025, -0.0787331, 0.06532134, -0.007940295, 0.090114765, -0.09446315, -0.012515931},
   {0.025792236, -0.081848554, -0.0038895558, -0.0756304, -0.0483155, 0.052016728, 0.008663624, 0.064177535, -0.06540736, -0.07780535, -0.0021957755, 0.018358985, 0.0887767, -0.03345839, 0.025595061, 0.028599352, -0.09171552, -0.07860497, 0.09174711, 0.07252011, 0.019268584, 0.00015693076, -0.08964223, 0.07762418, -0.04697875, 0.028646598, -0.085391514, -0.023569815, -0.08175753, 0.0122470185, -0.061013505, -0.058290083, -0.011724412, 0.08568129, -0.0055302065, 0.049299985, 0.002301366, -0.0071661016, 0.042946998, 0.03612443, -0.08137335, -0.007172957, -0.031280458, 0.015625335, -0.0011616375, 0.057462562, -0.09752218, 0.00642049, -0.06612696, -0.0066581164, 0.05160684, -0.038555015, 0.028505068, -0.0007963702, -0.07821695, 0.05926925, -0.029834911, -0.004846743, -0.06114451, 0.072277404, 0.030434307, -0.008802816, 0.029955165, -0.069030754},
   {0.048709616, -0.05383384, 0.017359408, 0.036918543, 0.06755225, 0.06793528, -0.04735501, -0.08904848, 0.06417492, 0.09231025, -0.069824465, 0.050968945, 0.046687253, -0.05971679, 0.04597921, -0.044466447, 0.0408482, -0.06000806, 0.055762015, -0.04398095, 0.0008944888, 0.030518431, -0.070179276, -0.08288592, -0.040038455, -0.06082515, -0.038991995, 0.026275054, -0.01618988, -0.024173275, -0.04699256, 0.07739863, 0.013413787, 0.020329146, 0.016509408, 0.0845983, 0.041315984, 0.0049315915, -0.053656816, -0.047641236, 0.058575183, 0.08103422, -0.094939455, -0.07692063, 0.09710973, 0.015679646, -0.06433457, -0.062563345, 0.015580066, 0.050344493, 0.0407058, 0.016053535, 0.019252187, 0.00065446645, 0.025706835, 0.0940895, 0.009811101, -0.03504279, 0.0662364, -0.09058152, 0.06970937, -0.081143975, 0.017889233, 0.0011838445},
   {0.025224851, -0.03235148, 0.0785355, 0.0028767884, -0.012377968, 0.08782875, 0.0626664, -0.008710131, 0.0851571, -0.057194695, -0.029828042, -0.004525039, -0.009264454, 0.062825285, 0.01961352, 0.054428987, 0.0467063, -0.0359829, 0.07303699, -0.06897194, 0.037898846, -0.057235733, 0.012605248, 0.014702745, -0.02146511, -0.044261426, -0.0632301, 0.05938825, -0.042305868, -0.06176607, 0.085113496, -0.072337076, -0.04877432, -0.04996245, -0.08836068, -0.07757114, -0.021029845, -0.0848525, 0.046037447, 0.077836074, 0.03556607, 0.028212093, 0.07582211, 0.041994058, -0.04469847, -0.010432892, -0.063292585, -0.004210701, 0.091719836, 0.009934291, -0.038961623, 0.038647525, 0.049458727, 0.0729968, 0.0200698, 0.07976523, -0.02538389, 0.05570209, -0.06374312, -0.09426747, 0.02409022, -0.035731666, -0.014328998, -0.029484792},
   {0.034138877, 0.06058835, -0.020930227, -0.027068123, -0.06504979, -0.051308803, 0.035593413, -0.018122606, 0.0057444554, 0.07681608, -0.011046514, 0.0164523, -0.09323881, 0.049018875, -0.00584317, 0.07418992, 0.017507868, 0.056703545, 0.054471917, 0.06740167, 0.002550351, 0.028099915, -0.028550021, -0.05953205, 0.0259755, -0.0648251, -0.019386021, 0.0025178979, 0.06317117, -0.01640489, 0.048640817, 0.020712549, -0.025449127, 0.061747707, -0.038647685, -0.096414745, 0.06519362, 0.0032694207, -0.038481127, 0.07413276, -0.098035716, -0.08399471, -0.020392371, -0.07374804, 0.020938829, 0.06333665, -0.06268968, -0.011950882, -0.026404072, -0.0012744287, -0.014430179, -0.08400928, -0.05258425, 0.056630723, -0.06252914, -0.01628566, 0.034482874, 0.0024012725, -0.03690329, 0.016329156, 0.029164609, 0.042505153, 0.033760905, 0.006301744},
   {0.02914485, 0.04146165, 0.055257913, 0.011044312, -0.0009905703, 0.02806741, 0.042873003, -0.021044454, 0.073522456, 0.061616633, 0.026989013, 0.004713152, -0.029644445, 0.0051467787, -0.050830953, -3.439933e-05, -0.09681075, -0.01684063, -0.010405861, -0.090058245, 0.06206299, -0.0044396343, 0.045075763, 0.06414876, -0.0016634531, -0.051089607, -0.074391805, 0.07714241, -0.06697335, 0.029909983, 0.016893817, -0.06882985, -0.077952564, 0.030509803, -0.051893074, 0.025573289, -0.02505297, 0.007625993, -0.024634976, 0.073496185, 0.04822538, -0.08858172, -0.06995677, -0.08959491, -0.056100734, -0.033161707, 0.08217913, -0.078800835, 0.05419122, 0.04101849, -0.057954233, -0.041536883, -0.09335241, -0.08211429, -0.04387325, 0.07142088, 0.06197844, 0.09186727, -0.043680552, 0.044881266, 0.0241218, 0.0018027499, -0.074085444, -0.054995865},
   {0.060310602, -0.06565284, 0.07058178, -0.09391785, 0.11193986, -0.024492685, -0.061719134, -0.06319112, 0.040681336, -0.037316736, 0.04643578, -0.06178723, 0.03743557, -0.008258497, -0.08728508, 0.07187418, -0.016955273, 0.051304035, 0.022433482, 0.0802375, -0.09324304, 0.040508766, -0.07176605, -0.023960821, -0.10637429, 0.055549808, 0.016539345, -0.0006321175, -0.010189429, 0.010278977, -0.11692204, 0.03182635, -0.040065996, -0.082852684, -0.01342631, 0.03955768, -0.036161054, -0.0074696518, -0.0009643753, 0.016653523, -0.019383566, -0.018944211, -0.023479477, -0.045747153, -0.023038527, 0.008501567, 0.0061862404, -0.032509852, 0.05541934, 0.0031242864, -0.10347972, 0.04933817, 0.051544882, -0.04649956, -0.035947748, 0.055671778, 0.0059898826, 0.07875718, -0.05613021, -0.055409312, 0.0049080383, 0.073089845, 0.06341558, -0.07326335},
   {0.057396304, -0.057112277, 0.019163847, -0.017367821, 0.015092048, 0.033166576, -0.06625486, -0.09348693, -0.08048351, 0.0045489534, -0.009840719, -0.065136865, -0.0065637454, 0.016450731, 0.05130636, 0.07287166, -0.04594241, 0.05700966, -0.040331647, -0.041811388, -0.052747987, 0.024949482, -0.056864284, -0.066260636, -0.021853901, -0.09280814, -0.045398347, -0.046787187, 0.007810056, 0.022412747, 0.08992928, 0.04724325, -0.037186023, 0.043160822, 0.0074766213, 0.0020242948, 0.05526072, 0.043572713, 0.0529191, -0.008568734, -0.031489633, 0.06672888, 0.10638498, 0.0785955, -0.07232239, -0.010113339, 0.055438057, -0.090468265, -0.09038145, 0.10620427, -0.06711546, 0.09213976, 0.044171453, 0.07144793, -0.07116684, 0.03424, 0.07360645, 0.0858138, -0.09230096, 0.03921075, 0.055698633, -0.08351249, -0.017662544, -0.060684245},
   {0.055101395, 0.08939298, -0.07361337, -0.051432513, 0.046953827, -0.09667523, 0.01943901, -0.029881202, 0.019355832, 0.043146327, 0.0028234348, -0.032846015, -0.04340747, -0.06405502, 0.009039924, -0.05050661, -0.016805233, 0.012872897, -0.04360642, 0.044725418, -0.015305293, 0.062156104, -0.0075953533, -0.04216305, 0.07239129, -0.004370824, 0.027289093, 0.05331705, -0.04573681, -0.061301716, -0.0045576696, 0.0854283, 0.04952217, -0.07913885, 0.0015590544, -0.049736813, 0.016521934, 0.020736195, -0.030258205, 0.045475386, -0.09032096, 0.04291851, 0.055716675, -0.062603116, -0.04186121, -0.07481273, -0.08017921, 0.0047322134, -0.005675134, 0.027138175, -0.06674855, 0.08440108, 0.08254529, -0.032884736, 0.04729124, -0.08241514, 0.051013116, 0.07514959, 0.022717066, -0.04925557, -0.08356207, 0.05586583, 0.04105494, -0.09236622},
   {-0.035093226, 0.014093563, -0.052711632, 0.066364065, -0.057687603, -0.08696729, 0.018345557, -0.0121492995, 0.057737164, -0.078356616, -0.007827319, -0.07036806, -0.041412402, -0.06570701, 0.013473794, -0.0052847043, 0.019995704, 0.08171984, -0.049930967, -0.05952639, -0.037701275, 0.038192447, 0.00028746258, 0.050351508, 0.07606676, -0.089005895, 0.056785803, -0.027853234, -0.023155369, 0.0581292, -0.04658652, -0.0011991351, -0.058415785, 0.045942772, 0.004273656, -0.035535928, 0.0014004712, 0.008575827, -0.043688316, 0.07108844, 0.040187027, 0.053244673, 0.041749183, 0.008756317, 0.068987526, -0.08562637, 0.04679803, 0.07638342, 0.07830208, 0.04563091, 0.07522613, 0.003928356, -0.04920863, 0.024853349, 0.081495546, 0.044214837, -0.056234267, -0.062018648, -0.013637476, 0.072200306, 0.045303136, 0.044178434, -0.030290142, 0.01866723},
   {-0.058864653, -0.005109021, 0.06812503, -0.049034614, -0.065752015, 0.08227528, 0.012225185, 0.07602681, 0.06544935, 0.06065687, -0.06736671, 0.028872294, 0.044239752, 0.066458754, -0.08724061, 0.041334204, -0.024664393, 0.042533226, 0.017578356, -0.026332162, 0.07160496, 0.045133792, -0.03945811, 0.03720797, -0.07895804, 0.058028664, 0.072717965, 0.036213703, 0.00824257, -0.041249253, 0.022714918, 0.015674047, 0.06615723, -0.050806135, -0.058197934, 0.00037525207, 0.08630499, 0.02788268, 0.061004505, 0.034819864, -0.052389737, 0.016049087, 0.0887483, 0.020703956, 0.025051236, -0.026038699, 0.051955238, 0.05471723, 0.004427448, 0.03188449, 0.017442975, -0.08403772, 0.04170701, -0.059760634, -0.053133413, -0.038663004, -0.040043984, -0.022212168, 0.09006976, 0.0059345122, -0.061441652, 0.05699616, 0.04947242, -0.08130091},
   {-0.07455711, 0.097418964, 0.06434809, -0.04419388, 0.038135268, 0.08122334, -0.031982526, 0.04719375, -0.038657956, 0.07746374, 0.04343816, 0.044983238, -0.0786657, -0.08813018, 0.00017683208, 0.07994219, -0.012831669, -0.07050394, 0.07342469, -0.015152358, 0.005052128, 0.06295209, 0.053614266, -0.006095253, 0.055138547, 0.08516413, -0.0041758874, 0.04352059, 0.043726034, -0.035666056, 0.06335821, 0.074513555, 0.039292045, -0.0014279942, 0.08076573, 0.080595404, -0.007190805, -0.0050371536, -0.046852157, -0.041285586, 0.059487615, 0.013285033, 0.08245683, 0.03253343, -0.04077651, 0.069551565, -0.0108091645, 0.0029036675, 0.055675294, -0.037497483, 0.08210671, -0.005267933, -0.0699439, -0.028072238, 0.02241081, 0.03218803, -0.08402076, 0.07937993, -0.01108899, -0.074389175, 0.09409827, 0.044917367, 0.08368203, 0.023830883},
   {0.07127092, 0.07690999, -0.06952521, 0.016044972, 0.028953059, 0.033695176, 0.019648833, -0.078556575, -0.04779203, -0.053244874, -0.076279216, -0.005918091, 0.041416667, -0.025900051, 0.06556431, 0.0072929263, 0.007925641, -0.031376425, -0.0007831827, -0.05187077, 0.068963915, 0.04683238, 0.002289952, -0.070421, -0.061718866, -0.07315403, -0.03973468, -0.08116725, 0.047274686, 0.01268325, 0.05856137, 0.031591672, 0.07517407, 0.041016627, 0.045596316, 0.06716509, 0.020051723, -0.036917586, -0.029183913, 0.035714053, -0.06763082, -0.008503415, 0.024946399, 0.05751338, 0.05585579, -0.09333684, 0.08490562, -0.09483139, -0.01045914, 0.07079391, -0.07450875, -0.080949366, 0.0694375, -0.043589532, -0.03457609, -0.032320697, -0.07579398, 0.09171012, -0.03453617, -0.05478725, -0.026213257, 0.0024408475, -0.09226103, -0.07890491},
   {-0.033254374, -0.0019169851, -0.048238065, 0.051175933, 0.008081443, 0.064191826, 0.02737573, 0.043601338, -0.025050744, -0.07353682, -0.07030675, 0.05284124, 0.05581177, -0.074239284, 0.06967146, 0.070028715, -0.045494404, 0.06407102, -0.09224747, 0.0068796896, 0.054492168, 0.0877169, 0.039287522, -0.044090975, 0.007725, 0.040338196, -0.035494797, -0.09121428, 0.0009030327, 0.0030337796, -0.08605, -0.060409706, 0.06626766, -0.019039402, 0.014004532, -0.016864022, 0.06114461, -0.044692185, -0.06583998, 0.0766503, 0.0011768143, -0.025962204, 0.08160433, 0.038246505, 0.002184051, -0.077752255, -0.02520168, -0.070806295, -0.04384113, -0.03613751, 0.016598586, 0.039011575, 0.020833625, -0.076909184, 0.044571124, 0.050002344, 0.01874633, -0.016108412, 0.021623984, -0.04699436, 0.03165613, -0.073964074, -0.035911568, -0.08770922},
   {0.008997117, 0.081857696, -0.0011423331, -0.015383261, 0.05980548, 0.068003, -0.08066409, -0.0722577, -0.050939556, 0.0751454, -0.07122827, 0.0040892526, 0.08199502, 0.07272407, 0.04123614, 0.014855377, 0.053045053, -0.06337595, -0.009172104, -0.0060478956, 0.010016887, 0.07348481, 0.029557936, -0.011810899, -0.0040456564, 0.02380595, 0.0741156, 0.085205145, 0.07306678, 0.030724935, -0.031744573, 0.059650064, -0.015802637, 0.07990682, -0.093294196, 0.009808378, 0.013272124, 0.052419335, 0.043639842, 0.040411957, -0.025806606, 0.0067663863, 0.083535984, 0.0432202, 0.016968904, 0.08239683, -0.07575845, 0.057648063, -0.06915476, 0.096719824, -0.006853036, 0.008153088, -0.005842569, 0.05306896, 0.0749254, 0.04756538, -0.0924456, 0.05776098, 0.08553334, 0.07179513, 0.015149405, 0.053917, 0.04327861, 0.032498654},
   {-0.012660986, 0.063464455, -0.054937158, 0.042367604, -0.015956758, -0.09253921, -0.08257561, -0.09883987, 0.07318231, 0.08668994, -0.06776485, -0.028225107, -0.0318511, -0.068060644, -0.027755104, 0.039344467, -0.011621558, 0.03568486, -0.088233836, 0.035750702, -0.003798265, 0.07165006, 0.051350538, -0.03217284, 0.07937323, 0.0575879, -0.0063509196, -0.058375437, 0.069795676, -0.06462524, 0.08680201, 0.043839205, 0.0004393682, 0.06802551, -0.097693264, -0.0044570533, 0.04647208, -0.0275803, -0.084726155, -0.07482501, -0.05501377, -0.061244316, -0.01615253, -0.091629155, 0.06672595, 0.029073898, -0.092506565, -0.043339927, 0.0069926092, -0.066045485, -0.0080055725, -0.082648374, 0.080926426, 0.07587204, 0.02118858, -0.060613327, -0.08543851, -0.028961698, -0.011263177, 0.085283525, -0.016745832, -0.042098064, 0.005155774, -0.0119374795},
   {-0.0142626185, 0.017678488, -0.027590292, 0.028683959, -0.014151779, -0.053615928, 0.06765576, 0.07680033, 0.05721587, 0.042862184, -0.00476335, -0.060515545, -0.024161011, 0.08172273, 0.012638487, -0.020056784, -0.041364137, 0.01771067, 0.049562775, 0.06952802, 0.0065225945, 0.07103425, 0.042377397, 0.03630384, -0.037159726, 0.025830412, -0.056475844, 0.053090774, 0.005430527, 0.064126395, 0.045106363, -0.07319798, -0.014780752, 0.08973892, 0.08000429, -0.0033984564, -0.07301197, -0.034051977, 0.088176064, -0.07177684, 0.079592995, -0.03661025, -0.038823348, 0.04836174, 0.08192153, 0.054452747, 0.083891325, 0.058366846, -0.096740216, 0.04367352, 0.021110818, -0.052233495, -0.050613172, -0.05492266, 0.045504175, 0.005752771, 0.009334502, 0.0148899695, -0.06793693, -0.00876281, 0.08511321, -0.085449755, 0.010215936, -0.033851676},
   {7.705209e-05, 0.053195596, -0.07895035, 0.037330266, -0.09767228, 0.026007028, 0.045823433, 0.072731316, 0.063602276, -0.020737486, 0.01498504, -0.085519075, -0.054720175, -0.05922332, 0.045192428, -0.08136771, 0.05603992, 0.04529067, -0.0051264763, 0.018893031, -0.058559254, 0.079688795, 0.042488195, -0.037849084, -0.029610036, 0.044319484, 0.057933543, -0.040991995, 0.051033773, 0.0459178, 0.03511806, 0.08877397, 0.01935795, 0.017130325, -0.09427595, 0.0231451, -0.011981296, 0.052055243, -0.033900503, -0.00628116, 0.06766484, 0.04310956, -0.06339462, 0.058423437, -0.049780615, 0.0104467375, -0.080107935, -0.05178808, -0.022798823, 0.023681084, 0.064946294, 0.014859892, -0.019569498, 0.03058508, -0.028250024, 0.020458061, -0.040929142, 0.05580389, 0.04477697, -0.054102402, 0.08539929, 0.078159995, -0.06329064, 0.025839396},
   {-0.08864644, -0.0648368, -0.07390416, 0.058263943, -0.0037557858, 0.05990683, 0.054196425, -0.060192294, 0.04161073, -0.093290485, -0.08805734, 0.05543518, -0.084531575, 0.037037462, 0.020246632, -0.08173466, 0.030659992, -0.0519684, 0.07721575, 0.0391906, 0.056454457, 0.074355245, 0.015117569, -0.0111965835, -0.08093264, 0.09136608, -0.0053383284, 0.03514193, -0.07973908, -0.052368812, -0.04853042, -0.04228773, -0.026203386, 0.09968371, -0.045137733, 0.07343448, -0.08981645, -0.08351218, 0.04878447, -0.081840985, -0.017352683, -0.0677196, 0.021241335, 0.08632349, 0.058718413, -0.09115314, -0.054396834, -0.03776169, -0.08942863, 0.08853125, -0.059760023, 0.0420321, -0.023774862, 0.052619554, -0.019752532, -0.0019495148, -0.09757308, -0.08746777, -0.0900248, -0.050018784, 0.023389377, -0.010211453, 0.03932591, 0.0037332724},
   {-0.061761204, -0.046721295, 0.06657004, -0.06904588, -0.088700734, -0.05052637, 0.06754683, 0.05541425, 0.070693135, -0.06052613, 0.043369897, -0.061378095, 0.04467567, 0.06145844, -0.0134751275, 0.051357053, 0.049256936, -0.066502795, 0.07108288, -0.08276367, -0.067236036, 0.049063943, 0.0068649496, 0.088218324, -0.040640347, 0.07643877, 0.09028913, -0.008367419, 0.085179724, 0.093049444, -0.008375888, -0.015636358, -0.021681279, -0.08218087, -0.013522638, -0.02020832, 0.07349415, 0.06587804, 0.037460078, -0.030321918, -0.07123513, -0.019137949, -0.015565313, -0.03957541, 0.08368434, -0.054807182, -0.019143943, -0.01179077, -0.072111584, -0.057229586, -0.05285559, -0.07070245, -0.072367355, 0.042484947, -0.081903055, -0.0064084297, 0.030655991, -0.09622281, 0.034777723, 0.07075514, -0.06324633, 0.060466804, -0.012618433, 0.08204376},
   {0.013777743, 0.026188841, -0.049280047, -0.07624787, 0.026240349, -0.06710096, -0.06282729, -0.00148165, 0.0028947436, 0.023378592, -0.05935359, 0.08076966, 0.012393147, 0.08319682, -0.061042942, -0.07324989, -0.07961522, 0.0178295, -0.024511412, 0.009314103, -0.02906164, 0.02214503, -0.092600614, -0.07178955, -0.03933665, 0.056136314, -0.08210788, -0.05598822, -0.041372642, 0.067167245, -0.077315636, 0.03029446, 0.015747286, 0.06474022, -0.06629452, -0.02688915, -0.008604787, 0.071541235, -0.010299265, 0.01239913, -0.0006187402, -0.05241787, -0.06749943, -0.08641186, -0.07909998, 0.044663724, 0.083045505, 0.0405642, 0.05279381, 0.03294043, 0.012159534, 0.02421879, 0.022818534, -0.07384462, -0.0016333014, -0.03236737, -0.07955144, 0.08555733, -0.027264781, 0.035704117, 0.07678479, -0.05341001, 0.028808745, -0.09323374},
   {0.024160076, -0.028062705, 0.0060539376, -0.00777549, 0.0793567, -0.017411534, 0.07608511, -0.018973324, -0.060067765, 0.05203955, 0.09010247, 0.022170493, -0.06964038, 0.05706928, 0.0759516, -0.08208668, -0.030442223, 0.07684418, -0.03637359, 0.047351975, 0.06381112, 0.052824106, -0.073952004, 0.010235593, 0.009631123, -0.04065395, 0.005585003, 0.055146664, -0.06597836, 0.030821025, 0.024044095, -0.009673744, -0.005723141, -0.042569153, 0.004450778, 0.07178375, 0.027099166, 0.079242, 0.05724048, -0.0858685, 0.04060656, 0.03935439, -0.012970887, 0.07548802, -0.082947776, -0.07873169, 0.029885385, 0.013278767, 0.03852939, -0.048723426, -0.04253232, -0.025294743, 0.04589036, 0.05702623, -0.066392325, 0.030535089, -0.005200141, 0.027430583, 0.012428902, -0.061977413, -0.09263157, -0.019867867, -0.06509813, -0.0002559758},
   {0.08660637, -0.034673344, 0.07303938, 0.034102913, 0.026402753, 0.03797213, 0.072588295, 0.016287846, 0.053279016, -0.017074922, 0.017563783, 0.013016731, 0.028949574, 0.08769763, 0.026512466, 0.030730829, -0.0836488, 0.039752983, 0.07606021, -0.061152402, 0.029018119, 0.09109716, -0.08684018, -0.079785556, -0.083947584, -0.08254248, 0.07459117, -0.085063174, 0.0121971145, -0.062229067, 0.01588094, 0.06385741, -0.072021976, 0.08370882, -0.06362645, -0.07173649, -0.013611243, 0.07302803, 0.079389594, -0.011492118, -0.009971761, 0.07767049, -0.01646891, -0.057553954, -0.043537, -0.038017903, -0.034119416, 0.061377358, 0.039550543, 0.021807564, 0.010970987, 0.09109331, 0.033204895, -0.05943809, -0.010523625, 0.04647597, 0.07718884, 0.027696393, 0.05660554, 0.054058246, -0.07425047, -0.054940503, -0.024417242, 0.014569766},
   {-0.039740436, 0.04140873, 0.048920054, -0.015311458, -0.01087377, 0.011385493, -0.03746833, 0.06543615, -0.008332536, -0.07604571, -0.048126947, 0.094756186, -0.010501869, 0.055629894, 0.088015534, 0.086533256, 0.041418083, -0.015367143, 0.025948815, -0.06708882, -0.026187448, 0.040543433, 0.05214686, -0.023053132, -0.0749301, -0.054247536, 0.04867436, -0.06719025, 0.04099246, 0.09106707, 0.0053860676, 0.07651149, 0.02212336, -0.008941164, -0.062426865, -0.08847551, 0.035499353, -0.042364433, -0.013337334, -0.055949505, -0.044967305, -0.09015493, 0.053612087, -0.08695449, 0.07603639, -0.0035832557, -0.037007336, -0.051725782, -0.08906849, 0.09095145, 0.03691725, -0.054485224, 0.042747155, 0.030897833, -0.013214238, 0.07792726, -0.04911462, 0.038786735, 0.056541987, 0.05010693, -0.0006428486, -0.050560564, 0.026472306, 0.07740455},
   {-0.064183176, -0.027197808, 0.016825998, 0.008035931, 0.057952814, -0.048834402, 0.088285424, -0.04537817, -0.027568748, 0.07145196, -0.029984385, -0.06945412, -0.009207815, -0.025861964, -0.020825744, -0.051063232, -0.08670147, 0.006133005, 0.0647851, 0.033326652, -0.042412687, -0.055316642, 0.020017633, -0.0537564, 0.04361007, 0.042589, 0.056634843, -0.056145046, 0.03811785, -0.015338413, 0.07214511, 0.03308478, 0.062276296, 0.02497104, -0.019481698, -0.03516186, -0.09112339, 0.019212086, 0.09094396, 0.06984732, -0.09697055, -0.06923349, -0.05545749, 0.07256741, 0.03170057, -0.040048633, 0.0033465459, -0.022389086, -0.08810017, -0.080616616, 0.02995617, 0.09066147, -0.048257615, -0.0024919733, 0.056996025, -0.052709844, -0.014473849, 0.07655676, -0.081343345, 0.009876784, 0.034108784, -0.05487894, -0.086977, -0.012430012},
   {0.090801656, 0.0689443, -0.05223063, 0.037061427, 0.005503318, 0.012594267, 0.06314177, 0.069790475, -0.06986728, -0.015698582, -0.033530217, -0.009143836, 0.04008282, -0.07197183, -0.034374513, 0.022103198, -0.04458203, -0.05176658, 0.0062191114, 0.0049298964, 0.045111354, -0.028418811, 0.0012082154, -0.042256474, 0.022884179, 0.024143437, -0.043116894, 0.039096773, 0.007386461, 0.035576798, -0.007108051, 0.03254469, -0.08429002, 0.056771457, -0.08168055, 0.003526109, -0.073386416, -0.06290923, 0.0813926, -0.04793641, -0.030456867, 0.07123422, 0.08574636, 0.047556885, 0.08270784, 0.0422782, -0.003985574, -0.09024817, 0.07071614, 0.031794507, -0.01588813, -0.092329904, 0.07973099, -0.030982688, -0.074992746, 0.09851395, 0.07903011, -0.07367917, -0.020292372, 0.02812747, 0.015775207, 0.023579873, -0.052306123, -0.02230471},
   {-0.032793943, -0.06616101, -0.030666167, 0.029481132, 0.07490463, 0.04779273, 0.033182453, 0.056384686, -0.082213804, -0.042655572, 0.030536197, 0.025910802, 0.09206339, -0.031287152, -0.076276876, -0.030220047, 0.062349435, 0.027700707, -0.014788963, -0.039457086, 0.023518372, 0.09319569, -0.05039903, 0.08579644, -0.017680166, 0.091179974, 0.03314917, -0.064067766, 0.04040382, -0.056223366, 0.06426932, 0.054278713, 0.0024439394, -0.06664332, 0.046595678, 0.069944344, 0.07130026, 0.026370095, -0.06437981, 0.008323133, 0.07287967, -0.019803613, -0.00403542, 0.051660545, 0.07110476, -0.042794824, 0.08082875, -0.08387802, 0.009290869, 0.006968941, -0.0061195213, 0.009223521, -0.07180406, -0.03629552, 0.085235454, -0.045153707, -0.022824762, 0.0050064432, -0.07996886, 0.040945474, -0.06024087, 0.039324798, -0.097377926, 0.011519753},
   {0.022594186, -0.045535643, 0.016013296, -0.023542214, 0.0015606112, -0.083081886, -0.041562997, 0.033907626, -0.07164916, -0.046728045, 0.043392725, 0.089613125, 0.06719179, -0.021331172, -0.07340387, 0.034289785, -0.0905363, 0.09282748, -0.00338462, 0.04267451, -0.101081476, 0.05422714, -0.008527609, 0.0806086, 0.040811125, -0.088101424, 0.0622235, -0.081422634, 0.014178209, -0.041241664, -0.02991981, 0.060855765, -0.08320034, -0.07729558, 0.006913561, -0.04953023, -0.021321237, -0.06281401, -0.08664973, -0.031584874, 0.019414825, -0.0779094, -0.05937595, -0.046457335, 0.08070673, -0.032935154, -0.029429505, 0.017733986, 0.0440637, -0.053842865, -0.028029675, -0.07208425, 0.08590036, 0.03939555, -0.07601761, -0.07281198, -0.064632826, -0.0017225471, -0.06697951, 0.06376842, -0.0724676, 0.047983132, 0.046423208, -0.0011463576},
   {0.032560676, 0.027351337, -0.040488124, 0.036749236, 0.025932694, 0.084138975, -0.04398228, 0.065982796, -0.069596365, 0.041859504, 0.076182015, -0.08564821, -0.02043815, 0.073876195, -0.085512124, 0.013915315, -0.05915322, -0.06718247, -0.013110891, -0.0035611687, 0.05895372, 0.019249525, 0.0014375552, -0.025588274, -0.07596758, 0.020474652, 0.010500319, 0.043237157, 0.004885517, -0.0758127, -0.048319705, 0.018872594, 0.06959542, 0.009725374, 0.0014686527, 0.02461651, 0.021672357, -0.043660227, 0.05711833, 0.07128025, -0.032912575, -0.017492764, 0.007468087, 0.024834529, 0.075, 0.036679674, 0.07747895, -0.022300202, -0.02011777, -0.042875938, 0.0024241374, -0.025891922, 0.08620764, 0.011731446, -0.031745754, 0.05287827, 0.0896216, -0.013399173, 0.0155098215, -0.0793894, 0.07466116, 0.06043894, -0.09583969, -0.0070484215},
   {-0.041500185, 0.090831496, -0.008474998, 0.07235976, -0.01023092, 0.08387119, 0.005741444, 0.012777167, 0.008706491, 0.079525486, -0.006785743, 0.04505985, -0.052388433, 0.07276001, -0.033296384, -0.059243616, 0.053618114, -0.0020952374, 0.052786507, 0.06058138, -0.041594442, -0.007742826, -0.09233654, 0.007260196, -0.07240891, -0.010336317, 0.06682461, -0.04077124, 0.06197948, 0.008292541, 0.06164142, -0.09539714, 0.059410043, -0.018540336, -0.048416883, 0.04052724, 0.008447968, 0.05788391, -0.067902, 0.08396254, -0.01589698, 0.022889785, 0.052539323, -0.010139234, 0.05570032, -0.0074496856, -0.0648251, -0.094486095, 0.061258595, 0.016300028, -0.017564377, -0.030407846, -0.05842959, 0.08160808, -0.07167879, -0.004453275, -0.036236625, 0.0634092, 0.024031594, -0.053892594, 0.09502865, 0.082390465, 0.07538291, 0.02299581},
   {-0.03563257, 0.03343219, -0.001341864, -0.017491836, 0.049162872, -0.03240771, 0.07513771, 0.02800042, 0.005853719, 0.06479432, -0.08541754, 0.039005037, -0.016846374, 0.07438568, -0.06875984, -0.040014844, -0.07311778, -0.018329345, -0.048825473, -0.03267326, 0.07980757, 0.014210338, 0.03404384, -0.021570742, -0.015574567, -0.03764242, -0.014123261, -0.07739378, -0.0041420534, 0.021788716, 0.0055220784, -0.00066628325, -0.014929332, 0.07048272, 0.08237601, 0.07895282, 0.050974756, 0.07565914, -0.047380324, 0.03846527, 0.029287186, 0.08621318, -0.012974625, -0.08385257, 0.02122744, -0.08162224, -0.056290124, 0.031261276, -0.01799163, 0.05202138, 0.05089004, 0.0852577, 0.018205442, 0.05569949, -0.083630145, -0.047997456, -0.06579263, -0.021488631, -0.0669877, 0.06986223, -0.0025278996, 0.056714036, 0.012416805, -0.030196888},
   {0.062382173, -0.05991059, -0.02308146, 0.049764093, 0.020284861, -0.057144992, 0.030541936, -0.0509174, 0.025170697, 0.005806445, -0.0022339746, -0.09146859, -0.022951506, -0.0902301, 0.008483015, -0.018490337, 0.016452957, -0.027808897, -0.084605396, -0.049109213, -0.07469556, 0.033443443, 0.005370031, -0.035903472, -0.07626124, 0.06032831, 0.056041524, 0.064561985, -0.059364203, -0.012975909, 0.05835578, 0.0073538935, -0.020442128, -0.08127512, -0.043553527, 0.08520671, 0.076095976, 0.06836642, -0.0026334166, -0.07068988, 0.018985528, 0.067252465, -0.0046117553, 0.050053246, 0.032904606, -0.0755511, -0.07777723, 0.08799167, 0.03336448, 0.0487234, -0.042877518, -0.04798847, -0.086247146, 0.051178657, 0.035074554, 0.04113289, -0.0005535666, 0.034595393, -0.040183447, 0.04672887, 0.029372105, 0.033983402, 0.017974265, 0.01849036},
   {0.06361541, -0.033816792, -0.07526344, 0.048890583, -0.094859235, 0.072494194, -0.042987507, -0.03531299, -0.00247113, -0.029425535, -0.07788531, 0.0252362, 0.06544613, -0.02918631, -0.055781886, 0.08361248, 0.04082086, 0.08910594, 0.016999885, 0.088082634, -0.06836421, -0.07443256, -0.06921161, 0.026773244, -0.0006661074, -0.0551187, -0.034472547, -0.0964858, 0.03241884, -0.07383799, 0.041384716, -0.010884888, -0.08750506, 0.058392316, -0.07982086, -0.07310976, 0.015347851, -0.09573307, 0.046775986, -0.08239089, -0.06172005, -0.008958623, 0.053022414, -0.06051313, 0.0266901, -0.04283273, 0.032727353, 0.00551933, 0.06845813, -0.0034405517, 0.04686723, -0.053304106, -0.018438686, 0.09136022, -0.008708261, -0.07223168, 0.08937046, 0.082350895, 0.09039826, -0.05265893, 0.017527316, -0.021771893, -0.013811891, -0.017485972},
   {0.0019799687, -0.044464737, 0.0040631793, -0.03551896, -0.032377027, -0.09521387, -0.038567197, 0.02144208, 0.066914685, -0.048531163, -0.004578352, 0.06741036, 0.026003122, 0.088681184, -0.0060373843, -0.01705204, 0.06519061, 0.028171778, 0.055639736, 0.08709034, -0.07824353, 0.028467482, 0.059176277, 0.015621841, 0.066096, -0.038466804, -0.06330637, 0.0302804, -0.006311044, 0.08091969, 0.082988, -0.05548528, -0.063979894, 0.07031631, 0.036051545, -0.042881355, 0.08654296, 0.03631061, -0.015202946, 0.0020209923, 0.0319632, 2.0220876e-05, -0.033916872, -0.027546339, 0.06449539, 0.075308345, -0.0051745623, 0.02309376, 0.028547233, -0.038186423, 0.049491234, 0.008015923, 0.010289311, 0.075697295, -0.06418173, -0.07862633, 0.09378947, 0.0696294, -0.0686967, -0.016605813, 0.00431084, 0.005954303, 0.04864212, -0.04836059},
   {0.057375953, 0.08326819, -0.012227438, -0.088624015, 0.00066327635, 0.015005823, 0.08335511, -0.05808981, 0.086613305, 0.07568541, -0.029568866, 0.045803055, 0.06842565, 0.02157386, 0.018841133, -0.05907023, -0.08313559, -0.04885188, -0.06096547, -0.07255951, 0.07774583, -0.011397194, -0.03160211, -0.03105206, 0.03435898, 0.08716364, -0.024416361, -0.013538428, 0.049847953, -0.071869396, -0.04309536, -0.052932955, -0.09157205, 0.06666873, -0.08165658, 0.021383785, -0.04722888, -0.049733225, -0.03373577, -0.020289123, 0.025030196, 0.024502419, -0.008506056, -0.06859353, 0.02830031, 0.023184381, 0.06520204, -0.066530205, -0.044345506, 0.05152418, 0.0840857, -0.018529467, -0.09659181, -0.08638492, 0.016945958, -0.0001441871, 0.030075395, -0.021473903, -0.07929579, 0.05764342, 0.0013694054, 0.028563336, 0.076486, 0.06122617},
   {-0.012981772, -0.015849667, 0.020361252, -0.09527813, 0.04803363, 0.030993404, 0.05415894, -0.08977821, -0.012632279, -0.04912898, -0.06776151, 0.052428786, -0.016049623, 0.03691541, 0.00075715035, 0.00074864924, -0.0161971, -0.079682544, 0.025309585, -0.09651688, -0.07846259, 0.04865972, 0.080528736, 0.06906932, -0.07912212, -0.04443191, -0.05801392, 0.008845979, -0.01610431, -0.07879564, -0.029396148, -0.0379865, 0.03931568, 0.07411802, -0.0018809862, -0.026073037, -0.025449013, 0.007307659, 0.08416345, 0.016917102, 0.07689247, -0.007573575, 0.020058854, -0.09230899, 0.018159872, -0.051149912, 0.022008106, -0.08831073, 0.01720934, -0.08240715, 0.048296418, 0.0026518553, 0.07549662, -0.06262109, -0.0661843, 0.00045705857, -0.019207632, -0.025049238, 0.06465887, 0.027953478, -0.071218245, -0.0025284365, -0.011825441, -0.0027805006},
   {-0.009660884, -0.08437661, -0.036050286, 0.040274125, 0.05294684, 0.035051685, 0.057709295, -0.071377516, -0.080428496, 0.06947225, -0.007877514, -0.01361461, -0.02909194, 0.01634405, -0.057797734, -0.042745437, -0.010432045, 0.04306037, -0.09087154, -0.08704224, 0.0086561665, -0.05487362, 0.0174328, 0.07749344, 0.071977414, 0.055861086, -0.022620177, -0.025391774, -0.0077857375, -0.0773288, -0.08575982, -0.014378911, -0.07991517, -0.01579799, -0.020436319, -0.027885837, 0.06312154, -0.04423049, 0.07811174, 0.020346835, 0.05536807, -0.06484261, -0.055709004, 0.028897174, 0.019082217, -0.021738261, -0.013614845, -0.0467433, 0.01963746, 0.06602888, -0.06978306, -0.04079324, 0.0819123, -0.010472208, -0.08869617, -0.080531344, 0.0053798873, 0.04863579, -0.08824625, 0.0884894, -0.023671543, 0.024242952, -0.07251089, -0.039441712},
   {0.022945926, 0.06564687, -0.06872983, -0.0912805, -0.093553886, -0.078511894, -0.05804568, 0.06088867, 0.07182173, -0.038597316, 0.030341364, 0.0037905686, -0.0036175624, 0.08135649, -0.024194919, -0.04646176, -0.077580296, -0.026833266, 0.03072925, -0.012826264, -0.073509954, -0.0034726623, -0.028024387, 0.07950949, 0.066882804, -0.026570981, -0.021008005, 0.05395057, -0.021450937, 0.018935867, 0.07622196, -0.04593709, -0.08677478, -0.0014838998, -0.09106086, -0.037005585, 0.023319328, -0.08053821, -0.028638812, -0.062246688, -0.046697013, 0.049079068, -0.06574355, 0.00797803, -0.041772828, -0.060102463, 0.08030538, 0.086910054, 0.05265452, -0.04064888, -0.069336176, 0.0462934, 0.04042006, 0.07260657, 0.07507516, -0.070827335, -0.061139032, 0.049579922, 0.015835166, 0.043394748, -0.028922524, -0.056249153, 0.08662321, 0.040640935},
   {0.04132216, 0.028077463, -0.025378041, -0.014307594, 0.05344773, -0.05955613, 0.022992978, 0.0015231109, -0.009783986, 0.00050833664, 0.087288864, 0.023943203, -0.080049515, -0.039389625, 0.016164206, 0.030145802, -0.025530336, 0.07943269, -0.08237398, 0.009721317, -0.05074656, 0.094207615, 0.034625214, -0.07884092, 0.022038955, -0.07096495, -0.06929974, 0.047421027, -0.03963904, 0.041336663, 0.073185906, 0.030129265, -0.0053682923, -0.06013018, 0.034946725, 0.00024412673, -0.07336, 0.0889018, 0.012636779, 0.08272787, -0.062327016, -0.01207383, 0.034330342, 0.08240374, 0.08819776, 0.011327166, -0.03434275, 0.0474918, -0.03554387, -0.08336884, 0.05489041, -0.031530764, 0.004967468, 0.004027009, 0.048054643, -0.08712176, 0.05954748, -0.035916824, -0.047421172, -0.07618707, 0.01054158, -0.012647092, 0.04784948, -0.02866926},
   {0.01900047, 0.046522886, -0.028534636, 0.07897948, -0.087937914, 0.08330421, 0.040799268, -0.08311436, -0.06308441, 0.037710246, -0.07340739, -0.061776184, -0.061602853, -0.08558755, -0.016764432, -0.08157725, -0.046579693, 0.0031243935, -0.03841736, -0.051015377, 0.009910819, 0.08709435, 0.0049803164, -0.026358902, 0.084169246, -0.05470189, -0.014657216, -0.081054576, -0.060640305, -0.06591357, -0.07913243, 0.04803783, -0.07657419, -0.0070672086, -0.09280713, 0.024653608, 0.03305368, -0.014063278, 0.06508926, -0.05192217, -0.03759179, -0.057978306, 0.08706238, -0.06454508, 0.017648363, -0.039276518, 0.008326311, -0.020382132, 0.048699223, -0.05610676, -0.026275078, -0.028139852, 0.045068257, -0.07516895, 0.058367528, -0.049683988, 0.053734407, -0.0128336605, 0.077493794, 0.007461426, 0.026573591, -0.0032525957, -0.04581159, 0.065601885},
   {-0.0017066139, 0.052858725, -0.09737407, -0.041469473, 0.063185595, 0.05073955, -0.04016817, -0.02301465, 0.090674564, 0.09364461, -0.059377465, -0.023963548, 0.067116685, 0.052869402, -0.013023168, 0.08527493, 0.00092859985, 0.05224987, 0.083425544, 0.04417227, -0.06688015, -0.014290236, -0.05064703, -0.081614025, 0.01444514, -0.03555829, 0.06662648, -0.0019421239, 0.06297927, -0.044529945, -0.081639685, 0.07674654, -0.00022239983, -0.028520918, 0.013285683, 0.078003205, -0.04446255, 0.0020554867, -0.0625811, -0.06003476, -0.09637828, -0.03752463, -0.08680885, -0.09016672, 0.058752563, -0.047495462, -0.04660193, -0.027453272, 0.052503835, 0.034846008, -0.07464051, 0.065446444, 0.031815346, 0.07632498, -0.09228434, 0.02413674, -0.008695132, -0.044369496, -0.036848977, -0.036862615, -0.05790148, -0.06727135, 0.014855074, -0.010025957},
   {-0.06530987, -0.059832964, 0.06840782, -0.06236632, -0.06091154, -0.09201366, 0.010653969, 0.06599039, -0.05638897, -0.041136056, -0.045164924, -0.08303206, -0.0101601705, -0.009415891, 0.087126605, 0.0006438345, -0.04232991, 0.06507579, -0.018434264, 0.07810535, -0.00034850914, 0.055048052, 0.051477857, 0.0812828, 0.07165466, -0.021211723, 0.03867423, -0.06687854, -0.07905275, -0.029094592, -0.05983259, 0.01521322, 0.030390583, -0.07119609, -0.07971175, 0.026645426, -0.07626335, -0.044871002, -0.016667599, 0.014196701, -0.049341895, 0.041506253, -0.07865038, 0.011500016, 0.03735098, -0.02256678, 0.04000941, 0.04698729, 0.04085329, 0.06998134, -0.070437096, -0.060108226, 0.060933523, -0.08601791, -0.091184095, -0.028476795, -0.08661359, 0.01382972, 0.0711749, 0.08726802, 0.032684892, 0.048379563, -0.08113454, -0.08360828},
   {0.00081085996, 0.083465144, 0.05852133, -0.089096405, 0.012398956, -0.046101872, 0.0019907348, 0.07129258, -0.023532826, 0.011593376, 0.08056406, -0.025653739, 0.063029, 0.02106632, -0.019868538, 0.0234956, -0.05661316, -0.041969065, -0.022339597, 0.04595558, -0.09568564, 0.0033541273, -0.03402924, -0.087419935, 0.0050205975, -0.018084161, 0.019733325, -0.065092236, -0.05419192, -0.01610522, 0.060118884, 0.08503473, 0.050395362, -0.0103530735, -0.06441236, -0.03139729, -0.064295076, 0.049735066, 0.050479, -0.009570129, -0.0761386, -0.08996459, 0.0048805876, -0.0882855, 0.04571755, -0.016213143, -0.083686754, 0.057748437, -0.05951173, -0.053986955, 0.011859297, 0.033368386, 0.029390095, 0.0909225, 0.030389845, -0.052647967, 0.04775287, 0.020227052, 0.06585517, 0.034125056, -0.09419159, 0.079265706, 0.009496279, -0.08653331},
   {0.0017332254, -0.08032632, -0.0700365, -0.08193884, -0.050814632, -0.04443289, 0.060037564, 0.035526562, 0.082726136, 0.038970977, 0.022878908, -0.025152462, -0.02968394, 0.032557137, 0.065559156, 0.07734137, -0.06519192, -0.015154265, 0.07103222, 0.07334544, 0.025218029, 0.08071385, -0.04958307, -0.07976983, -0.07244563, 0.08163695, -0.024965828, -0.018434504, 0.05007296, 0.039636172, -0.0005029784, 0.08601108, 0.027322233, -0.018556964, -0.006632257, -0.0010062837, 0.06414346, 0.033585805, 0.02070901, -0.03936249, -0.06266144, 0.07367893, 0.015299445, 0.08210074, 0.009475985, -0.074820116, -0.051270634, -0.0065014693, -0.00144072, -0.035697993, -0.02044729, 0.057858564, 0.04489667, -0.05357612, 0.040166564, -0.030714884, 0.024465173, -0.019523604, -0.04504645, 0.033329673, 0.062908866, 0.02010493, 0.085544065, -0.039798692},
   {0.055213556, -0.009179572, -0.020416621, -0.046716046, 0.063854456, 0.025788702, 0.018741947, -0.08026094, -0.060674116, 0.07801162, 0.04878346, -0.0045461133, -0.071398966, -0.028668592, -0.04555646, -0.011815347, 0.049370546, 0.033015363, -0.08636305, -0.07632871, -0.07159816, -0.035235338, -0.060559433, 0.038359694, -0.05075287, 0.022264415, 0.020213764, -0.002223071, 0.09255806, 0.00804133, -0.089079715, 0.07734553, 0.002050139, 0.025099529, -0.041657828, 0.06314791, -0.030346802, -0.0070661088, 0.07530604, 0.019518048, 0.072536334, 0.047864564, -0.019867651, -0.010957614, -0.028866827, -0.00778271, 0.041840862, 0.07936793, -0.060836244, -0.048689064, -0.020781748, -0.09170656, 0.0637462, -0.029370427, -0.05313931, -0.025055788, 0.0020742023, -0.00606155, -0.065992914, -0.05020109, -0.0391392, -0.04640583, 0.06765774, -0.056924667},
   {-0.045544155, 0.02552336, 0.03878862, 0.008474636, 0.075228214, -0.09206429, 0.05990641, 0.05536947, 0.00019861302, -0.06246588, -0.050341524, -0.087295786, 0.074423335, 0.0008428209, -0.03217489, 0.06441813, -0.0637172, -0.06716333, 0.06272917, -0.09302095, -0.08533926, 0.0760002, 0.014539948, -0.06994926, -0.019639373, 6.007032e-05, -0.0688142, -0.065775864, 0.029118598, 0.048620753, 0.070872806, 0.06939328, -0.087729305, 0.044708595, -0.057040475, -0.08281557, 0.068258636, -0.08511665, -0.055301473, 0.04797072, 0.015708663, -0.09109717, 0.067444615, -0.011992224, 0.03726409, -0.09044926, -0.06426651, 0.03845273, -0.08255597, 0.05780732, 0.054344773, 0.051517867, 0.042560156, 0.08248743, 0.016724296, 0.050606795, 0.00063443725, 0.084618814, 0.015977137, -0.022107441, -0.061042134, 0.008333124, -0.09240101, 0.017273389},
   {-0.013604512, -0.07828618, -0.06331181, -0.00077017857, 0.065266944, -0.08798316, 0.03506107, 0.04841623, 0.09302446, -0.03156859, 0.049668185, -0.03552522, -0.01939851, 0.09055147, 0.010082275, -0.09278209, 0.0053364434, -0.05231292, -0.007430136, 0.050547212, -0.004226468, -0.020329261, 0.0031932225, -0.035868276, 0.05377168, -0.08319308, 0.057380833, 0.024382064, -0.037622366, -0.06852732, 0.08356195, -0.03659548, 0.08431556, 0.01787971, -0.07623752, -0.043191582, -0.073025644, 0.051303186, -0.08743246, 0.07189258, -0.09550665, 0.04553161, -0.045143496, 0.01807408, 0.06518543, 0.035487976, -0.084072165, 0.012374783, -0.005932803, -0.057173025, 0.075703375, 0.07968547, 0.08679766, -0.021110907, 0.0046578944, -0.03483235, 0.090897806, 0.07585592, 0.014716789, -0.064386524, 0.039976086, -0.050015204, -0.0027452966, -0.088851064},
   {0.048444975, 0.0957769, -0.08090325, 0.009882896, -0.00935512, -0.029042568, 0.042498074, 0.07487041, -0.03937474, -0.051629454, 0.05325166, -0.08145248, -0.07321511, -0.030324705, -0.08881626, 0.01592692, -0.092887424, 0.047543325, -0.0338892, -0.012631416, 0.02458725, -0.010560304, -0.008384675, 0.06679503, 0.015371787, 0.064995095, -0.05851235, -0.02960489, -0.0050667822, -0.023914807, -0.070005186, 0.0111762425, -0.017505072, -0.010008984, -0.08107841, 0.088879436, -0.021992287, -0.02710151, -0.044202738, 0.060569726, -0.04463424, -0.01810781, 0.073336095, 0.05092869, 0.05965561, 0.024513297, -0.09744464, 0.030732045, 0.076555096, 0.02059195, 0.05291088, -0.031344052, -0.00840964, -0.08299821, -0.0035015792, 0.023397721, 0.03085693, 0.065643415, 0.0709937, 0.0105768265, 0.008144795, 0.07927523, -0.07690535, -0.08321111},
   {-0.09561895, 0.048960224, -0.0618147, -0.019400045, -0.07919083, 0.002036464, -0.06932449, -0.03635211, 0.034472633, -0.04344587, -0.026607864, -0.060361385, 0.023191169, 0.08078311, 0.010528162, -0.007901855, 0.044813354, 0.010470271, 0.053713687, -0.0917146, 0.07285367, 0.017998334, 0.082877725, -0.071557954, 0.029224586, -0.0926283, 0.081772424, -0.074541844, -0.07853379, 0.0040444955, -0.0881259, -0.09450504, 0.05760362, -0.059946723, -0.08181307, -0.03742055, -0.069021694, 0.048564162, -0.012250991, 0.08835965, 0.049077213, 0.063986875, 0.035963688, -0.018749334, -0.0299511, 0.04235294, 0.034818828, -0.022604777, 0.051632613, -0.07950234, -0.023743015, -0.06755547, -0.012854866, 0.043233283, -0.008235693, 0.04266908, 0.03530743, 0.016403463, -0.08664307, 0.043932542, 0.020240834, -0.051773813, 0.022107985, -0.067037165},
   {-0.020920068, 0.016387027, 0.03923748, 0.08609332, -0.06298054, 0.078592815, -0.047355134, 0.064803265, 0.078214556, 0.009802227, -0.003985733, 0.018888962, -0.027464308, -0.021578135, -0.081573844, 0.010062546, 0.013473088, -0.0008062273, 0.036972843, -0.036123034, 0.03400006, 0.04299795, -0.0017466622, 0.024215281, -0.005214272, 0.08604342, 0.041800927, -0.06515099, 0.06830793, -0.05256589, 0.0111810425, 0.057442307, -0.0054229796, 0.042685907, -0.016847795, -0.0053172545, 0.007617727, 0.024166454, 0.090518534, -0.024739906, 0.06789375, 0.0514042, -0.04958864, -0.037186157, -0.08782742, 0.040744346, -0.006914915, -0.05947766, 0.0044582924, 0.05882669, 0.012646164, 0.058677338, -0.07776149, 0.06313235, 0.059256293, -0.02039698, -0.0021435828, -0.044187617, -0.04485807, -0.062061485, -0.053806912, 0.0077167675, 0.0024649226, -0.04839803},
   {0.020160371, -0.025864707, -0.06693762, 0.025148207, 0.041061934, 0.011032936, -0.09492353, -0.024582826, 0.03912124, -0.038037676, -0.041372042, 0.00077174226, -0.052522283, -0.03018595, -0.02671913, 0.06827631, -0.09457921, -0.04429035, -0.026158154, 0.0403629, 0.0058425865, 0.03667007, 0.065914, -0.06640954, -0.07805522, -0.001391281, 0.026690021, 0.06760661, 0.07290027, 0.049195506, 0.05412507, 0.029512877, 0.052678786, -0.083356984, -0.028046483, 0.040858585, -0.077376746, -0.02643057, -0.065986425, 5.184114e-05, -0.020320999, 0.072374575, 0.05061605, -0.052683633, -0.01238869, -0.05435255, 0.036914576, -0.06255046, 0.0028710908, -0.06117821, -0.08797046, -0.0678967, 0.0796575, -0.06479535, -0.08222533, 0.08241011, -0.00049070804, 0.06829804, 0.015844107, 0.01913035, 0.02673321, 0.009231195, 0.08634773, 0.005958999},
   {-0.02394006, -0.002590057, 0.013931476, 0.007496264, 0.036882132, -0.06785504, -0.08103127, -0.08322665, 0.09536978, 0.041731026, 0.07574079, -0.039323434, -0.041369263, 0.05051049, 0.0024293438, 0.02252315, -0.009217679, 0.06608964, -0.033403266, -0.07682335, -0.021470888, 0.03968422, -0.08911056, -0.008851767, -0.029446693, 0.062025912, -0.084355265, -0.06568048, -0.045836505, -0.004544243, -0.06352471, -0.046331838, -0.04537166, -0.07143863, 0.0019012993, -0.0076069683, -0.08384887, -0.059833337, -0.0016169723, 0.03849726, 0.03841225, 0.049458094, -0.08578609, 0.0004954785, -0.074475616, -0.062058393, 0.008497665, -0.047116447, 0.056777615, 0.0784168, 0.08359978, 0.0704164, -0.0849045, 0.00959412, 0.03782334, 0.07007843, 0.027529117, -0.0019645246, -0.09098952, -0.07611152, -0.03561503, -0.047928356, -0.03647382, -0.048040397},
   {0.07233259, 0.019579813, 0.021627078, -0.009105614, -0.01495907, -0.08869029, -0.029501373, 0.025452048, -0.057518, 0.01266215, -0.06324406, -0.024264658, 0.011304088, -0.071594216, 0.0168617, 0.071162425, -0.0047718827, 0.032345332, -0.043628845, -0.033069957, 0.07962456, 0.08953256, -0.01963502, 0.07183794, -0.076577626, -0.0059456658, 0.029970588, -0.015652845, -0.043700576, 0.044331603, -0.021399422, -0.08806122, 0.01215148, 0.0091005135, -0.056174845, -0.066172734, 0.0135960495, -0.045139186, -0.03575203, 0.085968785, -0.008651301, -0.017422952, 0.05334077, 0.028960764, -0.022478038, -0.089970835, 0.046717964, 0.0784673, -0.04555035, 0.07927251, 0.0038125252, 0.051981814, 0.08615475, -0.0640977, -0.07130554, -0.078735806, -0.004220455, -0.028429126, -0.0021190867, -0.015387761, 0.074881986, -0.047221422, 0.014845708, -0.073003754},
   {0.029949632, 0.084964156, -0.0924761, -0.06501508, -0.04282271, -0.040471967, -0.06629005, -0.01222168, 0.040033907, 0.063258626, 0.009715393, 0.00646936, 0.09300787, 0.036611542, -0.049892277, -0.077149406, -0.047550272, 0.07121364, 0.07114781, -0.030223042, -0.048418224, 0.08144087, -0.0025356533, -0.08281871, -0.036820818, -0.020843137, 0.064283766, -0.025173893, 0.061838932, -0.07744296, -0.00872758, -0.012724728, 0.06424392, -0.03640104, 0.010984806, 0.060320523, -0.0064808484, 0.045571994, -0.004693181, -0.053739805, 0.006265539, -0.07130466, 0.0036793998, -0.037332755, -0.019775014, -0.07079711, -0.045696095, -0.014945464, -0.08358953, 0.037612382, 0.075978406, 0.07845723, 0.07118166, -0.03238705, -0.08681757, 0.07949718, -0.027032804, -0.0055328268, -0.016932033, 0.06549907, 0.09757525, -0.028452583, -0.027195618, 0.027872628},
   {-0.046251345, -0.07832446, 0.07480109, 0.06739084, 0.08934671, 0.030257782, -0.06620702, 0.05671702, 0.06978816, 0.028671237, 0.085829906, -0.042244185, -0.054867815, 0.04625955, -0.0032569766, -0.003970407, -0.07784514, 0.039199732, -0.043832336, -0.054525334, 0.013827597, -0.022690484, 0.05340762, 0.0037860945, -0.09675432, -0.059668303, -0.051149692, -0.008121878, -0.052834213, -0.022937708, -0.046579827, -0.039788388, -0.04419528, 0.0007204587, -0.052471668, -0.09256015, -0.06716607, 0.00828564, 0.005836109, -0.04543836, 0.075134106, 0.043111213, -0.056235198, 0.080753975, 0.019585066, -0.027231827, 0.013803675, -0.04586771, 0.035547446, 0.08468469, -0.047984518, 0.042293496, -0.031327024, 0.07596392, -0.026097812, -0.0588639, -0.070334144, -0.06618462, -0.024631195, 0.041257385, 0.055707127, -0.090652145, 0.052091967, 0.076889105},
   {0.047403403, -0.0798216, 0.055138387, 0.08383052, -0.052455068, 0.063822575, 0.018054439, 0.027285334, 0.08672936, 0.07871792, -0.08703251, 0.042944618, -0.030359678, -0.024123913, 0.030573107, -0.05334958, -0.029584272, -0.07229689, 0.050657563, -0.048549324, -0.03363375, 0.023241118, -0.01861588, 0.024065435, 0.026783364, 0.005355556, -0.00800152, -0.09378734, -0.07488998, 0.043828882, 0.0846742, 0.031354114, -0.03786439, 0.029509287, -0.057464257, -0.09283607, 0.058389615, -0.046711385, 0.012345282, 0.05824358, -0.0038739024, -0.025252052, 0.068831325, -0.0019832775, 0.0743532, 0.034005124, 0.032548822, -0.012432047, -0.061494507, -0.079033986, -0.01839067, -0.05975289, 0.077510275, -0.06493056, 0.033401884, -0.036236234, 0.0054477053, 0.020644542, -0.038414113, -0.0535774, 0.03549479, -0.076319575, 0.062106743, -0.009762555},
   {0.0061078505, -0.04890383, 0.05676848, -0.07049759, 0.015567059, -0.027819188, 0.054388143, -0.028080184, 0.011077325, 0.018969627, -0.07058622, 0.019820329, -0.014297955, 0.0753509, 0.05443666, 0.054356538, -0.08256039, 0.051866524, 0.030439682, -0.097500816, 0.02237938, 0.06720113, -0.042525195, -0.014023691, -0.009004127, 0.0043211817, -0.02884375, 0.02844008, -0.06464393, 0.019279122, -0.033962514, -0.000533899, -0.007144369, -0.04741889, 0.022551363, -0.061021592, -0.004138332, -0.064185776, -0.036325805, -0.05916973, 0.08613948, 0.045604832, 0.064657554, -0.00668142, -0.048500217, 0.06971124, -0.028841268, 0.0022467042, 0.026629401, 0.035018515, -0.047827486, 0.006513886, -0.00930857, 0.08277079, 0.037438862, -0.069652446, 0.0773004, -0.060785882, -0.0850946, -0.058715746, 0.09245392, 0.062158667, 0.026244136, 0.08251521},
   {-0.0741959, -0.08480392, -0.09271961, -0.08981267, -0.016285358, -0.072460525, 0.02669228, -0.048883982, 0.020996518, -0.039930645, -0.024148084, 0.04127258, 0.014195472, 0.068473734, -0.0643702, 0.031800084, -0.028863009, 0.05363605, -0.005590558, 0.084431276, -0.041206714, 0.011489271, -0.048361957, 0.093198635, 0.043485302, -0.03168073, -0.046865895, -0.09090223, 0.049107425, 0.086702235, -0.07524931, -0.05614344, -0.090294875, 0.046780724, -0.08130001, -0.095262766, 0.06297045, -0.027254771, -0.0656232, 0.06448532, 0.07914213, -0.045381874, -0.039261486, 0.04009872, -0.03270538, -0.017845578, 0.017862119, 0.036232874, 0.08380361, -0.04160481, -0.006079651, 0.07038195, -0.029701348, -0.077913545, 0.09299826, 0.0068841716, 0.09287073, 0.079644635, 0.06739757, -0.0013310077, 0.026776612, 0.033840425, 0.0767613, -0.033611003},
   {0.032140885, 0.04209874, -0.0009877691, -0.009451677, -0.035418827, -0.014255836, -0.025309626, -0.039892625, -0.0028098568, 0.013255206, 0.079573594, 0.028809689, -0.080938175, 0.08250173, -0.051966466, 0.0008210689, 0.08057515, 0.067716144, -0.06394389, 0.0872633, -0.064998135, -0.044490475, 0.06391367, -0.048395626, 0.018593362, -0.07147619, -0.07587805, 0.05648669, 0.049533956, 0.07002521, -0.07050063, 0.0848442, -0.000512369, 0.04662563, 0.0064207623, -0.04626618, 0.075255945, -0.08509007, -0.08248995, 0.03477893, 0.080401085, 0.021536127, -0.06699024, -0.03522177, 0.07485008, -0.026955599, 0.034168456, -0.07453313, 0.01523825, -0.087818906, -0.030813875, 0.08072699, 0.019899836, -0.076312006, -0.083302125, -0.04638553, -0.030357877, 0.052885216, -0.014374822, -0.095026635, -0.073366866, 0.06381529, -0.09062757, -0.026683997},
   {0.021181935, 0.043839037, 0.023102451, 0.007960654, -0.057200953, -0.03647165, 0.065099925, 0.084093496, -0.019733109, -0.06471406, -0.053315252, 0.019447105, 0.06582593, -0.005421043, 0.013004586, -0.08571499, 0.04846594, 0.090592094, -0.06049965, 0.08538227, 0.079231374, 0.032070912, 0.069534294, 0.059402205, -0.09232985, 0.0067418753, 0.08421973, 0.047913164, 0.019758046, -0.043954056, 0.047440942, 0.06295852, 0.013682328, -0.065690376, -0.02195985, 0.057702657, -0.029767843, -0.051687837, -0.020735817, -0.07693489, 0.036070243, 0.055916674, 0.074615255, -0.029366516, 0.09435473, -0.06692411, 0.029106988, -0.09453865, 0.07143161, 0.063228294, -0.052212503, -0.0881367, -0.06727281, -0.024506912, -0.04784074, -0.020475874, -0.036315504, 0.044914212, -0.068189695, -0.0956649, -0.059303503, 0.017018065, -0.007688215, -0.097960494},
   {0.065476, 0.039799053, 0.05636889, -0.0037481235, -0.020905342, -0.066829115, -0.010688838, 0.02620478, 0.08457571, 0.00022673023, -0.01729279, -0.043239433, -0.07884903, -0.023735587, -0.037699483, -0.08100525, 0.06839151, -0.034233212, 0.032707117, 0.06570875, 0.037564386, 0.056941133, 0.04558089, -0.027023293, -0.045690015, 0.048348907, -0.024241682, 0.042123485, -0.027353048, 0.06647476, -0.036801793, -0.056061562, 0.09236098, -0.012386515, -0.038076986, -0.00020467055, -0.058965735, -0.07079698, 0.0044035553, -0.028782152, -0.07477009, -0.016109496, 0.028611608, 0.01993604, -0.07038356, 0.0513003, 0.04113111, -0.058933888, -0.06455916, 0.0911842, -0.078230076, 0.067409895, -0.029344626, 0.0338035, -0.02919311, 0.06976787, -0.04150694, -0.08746386, 0.006093584, -0.06959365, 0.034514748, 0.06863741, -0.07061406, -0.06593196},
   {0.06523293, 0.066385694, 0.06334943, -0.018564949, 0.012597798, -0.077215075, -0.050999295, -0.021120697, 0.04361644, -0.04696236, 0.03386464, 0.08389779, -0.08758824, 0.08294035, 0.08454154, 0.08934886, -0.020713499, -0.046660777, 0.06299151, -0.016333072, -0.038293604, -0.04215078, 0.0021351697, -0.01254306, -0.07995293, -0.07539879, 0.03710914, -0.0393254, 0.073133655, 0.02308724, -0.038517624, 0.023070075, -0.07904974, 0.03421844, 0.057802886, -0.0725117, -0.005529425, 0.0042588445, 0.069952056, -0.030693568, 0.04550819, 0.08413931, 0.007099013, -0.011402383, 0.060895782, -0.012367626, 0.049536902, 0.021861153, -0.04492872, 0.085856386, 0.0011245083, -0.06585711, 0.040302757, 0.010035314, 0.058648877, -0.08173109, 0.06656788, -0.07351274, 0.040697433, 0.07443243, 0.08573989, 0.077531196, 0.02680858, -0.06606544},
   {-0.058339294, -0.035326, -0.08326909, -0.08650437, 0.034309626, 0.015614443, -0.032103624, -0.03473815, 0.06129323, 0.024612123, -0.08992328, -0.009528619, 0.070239, -0.039556485, 0.016868822, 0.06770276, 0.05018871, 0.057644688, 0.032946788, -0.08842073, -0.024230022, -0.048949357, 0.0810714, 0.032569088, 0.06559081, 0.020075848, 0.02257468, 0.039486032, 0.08228905, 0.044128604, -0.06433706, -0.042282708, -0.07201735, -0.027200148, 0.049914252, 0.014795421, -0.0577666, -0.006827693, 0.02913905, 0.07239384, -0.013999668, -0.09134933, 0.03149711, -0.006822787, -0.05894506, 0.08180105, 0.07782484, -0.014946225, 0.061633747, 0.07390729, 0.068040736, -0.024707198, -0.051039472, 0.010047503, -0.061420925, -0.07541297, -0.009006652, -0.03456618, 0.020113602, 0.010499143, -0.045186, 0.05269801, 0.07700156, -0.041800946},
   {-0.032140203, 0.020110786, 0.0050205137, -0.072973154, -0.06698201, -0.044636503, 0.07501138, 0.015989037, 0.040989902, -0.0042302287, 0.051804833, 0.03180731, -0.008519791, 0.09187818, -0.083622575, -0.09290477, -0.0050657797, 0.06291758, 0.046879835, -0.086683884, -0.050651796, 0.023058325, 0.04221529, -0.029013, 0.06503145, 0.00046058994, 0.08822822, 0.058084697, -0.08439975, 0.044856377, 0.08469899, -0.041929737, -0.09278284, -0.083430484, 0.0610476, -0.08387874, 0.067693755, -0.024781082, -0.0686301, -0.009863615, -0.009116806, 0.08639193, 0.010394737, 0.06712382, 0.056452833, 0.01745928, 0.08848564, 0.058229797, -0.0038169257, 0.05792332, 0.06294073, -0.04796102, -0.069630556, -0.0051941574, -0.0066073313, 0.059531923, -0.060040426, 0.005606275, -0.062391706, -0.032019895, 0.019408762, 0.025259122, 0.07920876, -0.097010404},
   {-0.08343969, 0.03663268, -0.021636887, -0.00012455888, 0.08203482, -0.024917265, -0.0769919, -0.09821517, -0.06751283, -0.07646642, 0.00622198, 0.0020976965, -0.043270774, 0.08376463, -0.049374215, 0.012947522, 0.07974698, 0.053241156, 0.051373728, -0.08880467, -0.07385321, -0.009338599, -0.018819906, -0.0662888, -0.03732802, 0.079632185, 0.016855545, -0.032520715, -0.08611851, 0.009109229, 0.020307355, -0.007696412, 0.07971335, 0.05011448, 0.0845983, 0.03752053, 0.084871136, 0.08738092, 0.044781167, 0.06569407, 0.008025601, -0.040757265, 0.08983362, -0.09037097, 0.016100347, 0.013597117, -0.010934567, -0.07217458, 0.011099975, -0.009732207, 0.018031212, -0.0693155, -0.08821367, -0.07335991, 0.024873577, 0.060541924, -0.031910587, 0.008734126, -0.07714273, 0.022576712, 0.04217317, -0.08676798, 0.05973114, 0.009527847},
   {0.01777232, -0.07327968, -0.048767835, -0.037558205, 0.010947389, -0.0039625023, 0.088020965, -0.012862573, 0.046952717, 0.023697, 0.06909809, 0.070284024, -0.008257233, -0.0001732156, -0.049147677, 0.0017734021, -0.07456443, 0.019076347, 0.012520902, -0.039366093, -0.021871665, 0.04404988, -0.02323422, 0.022969656, -0.012517731, -0.06940506, 0.093019545, -0.023141569, -0.01723063, -0.050241873, -0.01423584, -0.046774562, 0.0634205, -0.030862082, 0.06242614, 0.046445683, -0.086038195, -0.05704672, 0.012190612, -0.037579518, 0.01954913, -0.046604622, -0.025825646, -0.07056555, 0.00509516, -0.098557785, 0.065399475, -0.0959223, 0.007535864, 0.08146255, -0.011393663, -0.04572023, -0.075905055, -0.0073463246, 0.0004975498, -0.04058698, 0.0899805, -0.0028721527, -0.0054608732, 0.025323233, 0.01676818, 0.003716901, -0.036688272, -0.07772019},
   {-0.07290407, 0.09645535, 0.0077162986, -0.026752157, 0.016898947, 0.07567355, 0.02068639, 0.08579378, 0.079940274, -0.0099761905, -0.012027822, 0.078594506, -0.011201791, 0.0119185895, -0.06258033, -0.060359504, 0.019328425, -0.08348964, -0.025594033, 0.06951681, -0.036827948, 0.06797327, -0.075507134, -0.06742467, -0.07802705, -0.07752483, 0.06706686, 0.029329149, -0.012009911, 0.046052314, -0.034034163, -0.055050895, -0.04442551, 0.01495263, 0.02842091, -0.050432317, -0.039425876, -0.094065286, 0.02247321, 0.018605046, -0.050774418, 0.08585509, 0.01681458, 0.07157495, 0.027119728, -0.025534498, -0.091404326, -0.030877866, -0.009865238, -0.040672485, 0.03139858, 0.09253504, -0.08339478, 0.006437704, 0.0131862685, 0.09172152, 0.06421227, 0.07653021, -0.072077535, 0.060731377, -0.047285795, -0.09261787, 0.021481698, 0.029456407},
   {-0.08703736, 0.0063566454, 0.0759633, 0.023764268, 0.044480678, 0.057937685, -0.042679403, -0.015324932, -0.030253904, 0.0062992563, 0.08101658, -0.019839162, -0.044760577, 0.044350762, -0.020311154, -0.026790217, -0.061125964, -0.0039552525, 0.05523438, -0.094913736, -0.05817902, -0.07469275, 0.08149649, 0.055079184, -0.045061212, -0.07479231, -0.03180699, -0.073479034, 0.02604898, 0.06131015, -0.089942336, 0.020060606, 0.054821692, 0.0739027, 0.04682332, -0.00019241397, 0.014699695, -0.08635774, -0.06167744, 0.030095808, 0.05104127, 0.01382488, 0.034161247, 0.0013416708, -0.061918747, -0.04417094, -0.026184293, 0.06648925, 0.030813407, 0.09154239, 0.08102745, -0.03963953, -0.053200137, 0.017510295, 0.009274781, 0.023779895, 0.009563665, -0.026570238, 0.0036379844, -0.049669918, -0.022016028, -0.08732024, 0.015257277, -0.03838263},
   {-0.02699213, -0.059903476, -0.049579166, -0.057709053, -0.05735139, -0.015843887, -0.08702188, 0.03903878, -0.060300946, 0.03353174, 0.06002847, 0.040897906, -0.032403048, -0.050317835, -0.03797639, 0.0807718, 0.015879707, -0.0063308477, 0.05420371, -0.036552966, 0.02193626, 0.003102988, 0.059809666, -0.027495034, 0.05152111, 0.052330177, 0.002239501, -0.06440493, 0.057045154, -0.01306428, 0.0012840169, 0.003228069, 0.08158644, 0.00056271657, -0.056661475, 0.04964681, -0.07669848, -0.07999465, -0.03198623, 0.032029517, -0.002228609, 0.076220326, 0.091700085, 0.065379955, 0.018943718, -0.029325336, 0.024565034, -0.093731895, 0.07755863, 0.091979116, 0.07630084, -0.055505533, -0.068349704, -0.061749697, -0.056697287, 0.05856073, -0.07023054, -0.039500102, -0.09149889, -0.0067094206, 0.048231058, -0.012537427, 0.033777893, 0.05814734},
   {0.027849922, -0.048434094, -0.04995485, -0.0096351085, 0.06286102, -0.07810611, -0.07522746, -0.017553372, -0.04921679, 0.0022885099, 0.0397026, 0.03379959, -0.056205258, 0.032685984, 0.046801694, -0.004995987, 0.04772948, -0.069590986, 0.032840423, -0.018436778, -0.037421063, -0.0654727, -0.027189964, -0.034799933, 0.09068512, 0.0030979386, -0.031869467, -0.025212973, -0.034696497, -0.05048968, 0.07188913, 0.00832508, 0.028315373, -0.03701066, 0.02966793, 0.030999139, 0.0842217, 0.067583896, 0.050004236, 0.010582827, -0.0939021, -0.044846743, -0.06864463, 0.022426724, -0.06729467, 0.022374593, -0.0971717, 0.08520545, -0.033967126, 0.08938471, 0.0106976675, -0.06438875, -0.07262783, 0.010533839, 0.038868926, -0.08354956, -0.058755532, 0.083042264, 0.043823473, 0.0031753506, 0.019918509, 0.056779005, 0.022536004, -0.03868279},
   {-0.020185044, 0.064734064, 0.048392456, -0.057075854, 0.048830952, -0.064175904, -0.03845464, -0.060564075, -0.024753297, -1.2561596e-05, -0.007333286, 0.09252797, 0.039284058, -0.07611657, 0.051348798, -0.058444552, 0.058031395, 0.08500182, -0.06569258, -0.0124726705, -0.075257204, 0.06697714, -0.07490227, -0.015270092, -0.07871644, 0.039517295, -0.053298507, 0.021393977, 0.010388017, -0.0017253458, 0.06364605, 0.0048440434, -0.090125315, 0.067371726, 0.04819914, 0.05148269, -0.039185766, -0.06854794, -0.06564601, -0.0619284, 0.005646364, -0.06869258, -0.052287154, 0.05085992, 0.053653575, -0.01975064, -0.090718135, 0.055591326, 0.054757267, 0.049577508, -0.051838275, -0.087142915, -0.010528845, 0.07547871, -0.028647348, 0.021371014, -0.02050713, -0.08235052, -0.066229954, -0.02500062, 0.026282879, 0.05952639, 0.025911247, -0.01380689},
   {-0.047415726, 0.05316653, 0.052214053, 0.0055285213, 0.057556972, 0.011312316, -0.06635132, -0.017051969, 0.022734966, 0.033341445, 0.03724926, 0.027726464, -0.08604527, -0.08158778, 0.04685942, 0.007920608, 0.078118175, -0.061491966, 0.07755832, 0.07882339, -0.029815448, -0.019631373, 0.04991995, -0.04055876, 0.06532228, -0.04091874, 0.062666886, 0.028066006, -0.007831745, -0.030736372, -0.05514595, 0.009237564, -0.08406947, -0.029395452, -0.042083833, 0.054746494, 0.06371118, 0.06079679, -0.08405431, 0.09142887, -0.013012807, 0.007609017, 0.02208502, -0.018304288, 0.038217083, 0.048818555, -0.03236849, 0.080473125, -0.009566682, -0.028679172, -0.05426101, -0.024430536, 0.085637696, -0.0066942126, 0.07019857, 0.059470315, -0.07454094, -0.0871905, 0.0116524175, -0.088207565, 0.02637578, 0.05302719, 0.0024580725, 0.086760685},
   {0.08992502, 0.08049677, 0.022147154, 0.016286032, -0.03503643, 0.07739186, -0.08630438, -0.034412578, 0.065291986, -0.047844917, 0.0027509928, -0.029229997, -0.05945669, -0.051584784, 0.07685412, -0.081002116, 0.03722993, -0.08255539, -0.0785572, 0.085385665, 0.03365448, 0.074310474, -0.057226453, -0.029406317, -0.06203273, 0.056447282, -0.018466396, 0.06495714, 0.032121487, 0.08119223, -0.06965419, 0.071699254, -0.07964494, -0.0017282087, -0.08145782, -0.0806661, 0.038527038, 0.016626805, 0.021115623, 0.07586519, 0.0012824894, 0.087785654, 0.059829023, 0.04089213, -0.022447504, -0.04875292, 0.0027413813, 0.05296774, 0.010399822, 0.021452254, -0.018094905, -0.08214463, -0.088534996, 0.040751018, 0.00313247, -0.0602747, 0.0045201657, 0.0375201, -0.09292061, 0.014869103, 0.074773915, -0.035110123, 0.02593964, 0.03067618},
   {0.026768794, -0.04573299, 0.041481324, 0.012987807, -0.0128208455, 0.07736347, 0.070398144, 0.013587285, -0.020571899, -0.04015359, 0.032697372, 0.054722603, -0.08489158, -0.0043267207, -0.05793105, -0.016339988, -0.051405076, -0.019464962, -0.073760495, -0.06728918, 0.078029014, 0.047202606, 0.063440196, 0.08226157, -0.059816014, -0.059662353, 0.07413227, -0.09106437, -0.07526941, 0.08555477, 0.07992426, -0.04402791, -0.027225338, 0.079539366, -0.04597692, -0.07142867, 0.067728154, -0.073653035, 0.048003104, 0.047940902, -0.096231066, -0.059643228, 0.029119276, -0.011952929, 0.097362496, -0.020729631, -0.011644604, 0.061606593, -0.025725681, -0.0029721602, 0.07274423, 0.039065115, 0.03102289, -0.023391716, 0.037690677, 0.039903462, 0.038509533, 0.017064534, 0.07878683, 0.040105514, 0.0020829602, 0.0019788742, -0.052082844, 0.0743386},
   {-0.07347488, -0.061256863, -0.040797707, -0.038562305, -0.028591711, 0.019010881, 6.633101e-05, -0.041367453, -0.020926652, -0.08517013, -0.059796877, -0.01684112, -0.027717233, 0.008366873, 0.074435554, 0.090331115, -0.026711518, -0.022853404, -0.05706584, 0.0485675, 0.0036071793, 0.0848481, -0.008462249, 0.023681171, 0.07211588, -0.009452885, -0.033653893, -0.028665438, -0.032868072, 0.07363545, -0.008409578, -0.07053361, 0.008653395, 0.058579985, -0.08258965, -0.007644323, -0.09087636, -0.07511911, 0.041651744, -0.017724685, 0.027830612, -0.008793943, -0.020460432, -0.047397967, 0.0281395, -0.08401407, -0.065239385, 0.07129183, -0.07045576, 0.06777839, 0.026865877, -0.09035835, 0.018972876, 0.004654132, -0.02856534, -0.04912146, -0.059458666, 0.029544061, -0.038426396, 0.0113041345, -0.022312611, 0.09150154, -0.059769906, 0.01490845},
   {-0.029684568, -0.08455082, -0.085243575, -0.076213576, -0.008563687, 0.076841034, 0.0036038456, 0.061622072, -0.045584332, -0.009579379, -0.017784983, -0.058965087, 0.08107302, 0.04929106, 0.055437095, 0.04291112, -0.03635538, 0.08033299, 0.007963307, 0.030953618, 0.04510269, 0.09386662, -0.030486675, -0.061729982, -0.016331073, 0.051166847, -0.0073438208, -0.055182688, -0.068116695, 0.054956876, 0.0571301, 0.013610898, 0.08277746, 0.08971151, 0.002989349, -0.07272137, 0.034457613, -0.008292848, 0.0060930317, -0.006618209, 0.017557256, -0.031913776, -0.07899243, 0.04057809, -0.050446976, -0.03417245, -0.003052725, -0.0003507776, 0.024598457, 0.048590567, -0.09430494, -0.058128797, 0.023361323, 0.033380635, -0.06548313, 0.061037738, 0.07817615, 0.016584774, 0.005134687, -0.06999539, 0.07755249, -0.041308988, 0.05651969, 0.03262438},
   {0.010861054, 0.055638973, -0.007233946, 0.086204186, 0.03822789, 0.008602152, 0.042369094, 0.0027417468, -0.049884576, 0.0025672, 0.037938945, -0.088517375, 0.032645665, 0.040231064, -0.042066626, 0.053297363, 0.022175292, -0.06152476, -0.074543096, -0.03716085, -0.010099299, -0.0226486, -0.026742687, -0.033015337, -0.09450916, 0.024909006, -0.05185439, -0.0020338895, -0.0004919842, -0.05683681, -0.09743131, -0.004234014, -0.0503304, -0.0025406887, -0.059153013, -0.09658404, -0.02987604, -0.041787244, 0.008386926, 0.011927299, -0.031624753, -0.01754307, 0.06727134, 0.08647903, 0.04689372, -0.016963419, -0.027930962, 0.046093088, 0.005550594, -0.07241788, -0.021809924, 0.013419263, -0.045715805, 0.007725619, -0.037004475, -0.009657997, 0.08294514, -0.030927155, -0.016446896, 0.06710618, -0.042996783, 0.074373476, 0.045383897, -0.079107635},
   {0.008353793, -0.01721836, 0.03893712, -0.06515345, 0.08773369, 0.045556944, -0.037725717, -0.02638608, -0.008473951, 0.036656406, 0.08718004, -0.069115944, 0.04123623, 0.047686305, 0.056910165, 0.07669563, 0.041050877, 0.024037577, 0.026449434, -0.0742599, -0.011274285, -0.01310303, -0.08278594, -0.057894405, -0.008503766, 0.0884741, -0.02321635, 0.03158677, 0.008048117, 0.054914422, -0.02313694, 0.04330727, 0.033355452, -0.039796997, 0.066992246, 0.05339979, -0.06724103, -0.022769056, -0.05549348, 0.078171946, 0.0044025173, -0.08306086, 0.08255851, -0.055337578, 0.029747311, -0.0977552, 0.014456501, -0.051779, -0.086035155, -0.0333277, -0.0231729, -0.08028816, -0.013729773, -0.018637218, 0.031712316, -0.08010665, 0.027245937, 0.078744516, -0.050194193, -0.032554585, 0.04532991, 0.03655123, 0.044276804, 0.0032330975},
   {0.050817892, 0.08975991, -0.058901392, -0.03980705, -0.06168132, -0.0618229, 0.015959501, -0.08210549, 0.09599332, 0.039341874, 0.047953658, -0.0005224519, 0.008502416, -0.046460915, -0.063261144, 0.08364818, -0.088585846, -0.048844937, 0.091284074, 0.016330631, -0.013076813, -0.00893565, 0.0037055956, -0.007536486, 0.073493995, 0.085158065, 0.025551412, -0.04582282, -0.06195445, -0.043133568, -0.023624089, -0.006419796, -0.017497279, -0.0120065, 0.07943136, -0.06906819, -0.010100746, -0.0330861, 0.06473529, -0.09177513, -0.047170933, 0.006415367, 0.03711983, 0.054120816, 0.043163244, -0.08956189, 0.0029073674, -0.093388006, -0.000102889346, 0.05599851, -0.0058905245, -0.078515686, -0.07091447, -0.026855163, -0.03196088, -0.06302068, 0.024959872, -0.052590474, 0.00052090734, 0.076361306, 0.020025779, 0.06648121, -0.0059828777, 0.05932968},
   {0.015226595, 0.082728505, 0.032787036, 0.04884232, -0.037829258, 0.011648458, 0.009671172, -0.016232572, -0.085601605, 0.06958724, 0.05665242, 0.05894705, 0.0064932406, 0.08925867, -0.025608785, -0.049801413, -0.06528986, -0.021876775, 0.0120039955, -0.025214044, -0.0775627, -0.033666488, 0.003955348, -0.07580761, -0.036020774, -0.019532293, 0.00957268, 0.0031352504, 0.015078463, 0.07293015, -0.033052366, 0.049242344, 0.043845482, 0.050084073, 0.07168426, -0.045182236, -0.044523176, -0.08051691, 0.022147238, -0.041598268, 0.027503219, 0.032501675, -0.054326795, 0.07352155, -0.07069768, 0.08614904, 0.030953282, 0.07768691, 0.07161265, -0.07491931, -0.043485224, -0.023356788, 0.08503559, -0.07688291, -0.060374632, -0.014963937, -0.08751021, -0.057158735, 0.082038485, -0.062822096, 0.01333282, 0.028933108, 0.022840716, -0.01654089},
   {0.0874104, -0.06255305, -0.057006977, -0.07206573, 0.013220871, 0.091330715, -0.048187725, -0.060331848, -0.087079614, 0.06093539, 0.039525233, 0.036063973, -0.03517825, -0.09288591, -0.053179957, -0.035351545, 0.021273175, -0.018304937, -0.036077946, -0.029090246, 0.06317175, 0.06723665, -0.053914413, -0.000927642, 0.07488087, -0.07307589, -0.08798451, -0.0061901053, -0.08723411, -0.050403733, 0.033168722, -0.005803943, -0.03909795, 0.08059664, -0.05105132, 0.032211777, 0.049853608, -0.06922114, -0.06407721, -0.061624613, 0.0003513135, -0.020069465, 0.021626825, 0.07590038, 0.03715412, 0.030233653, -0.08710912, 0.07090555, -0.017927725, 0.020126149, 0.039686985, -0.035380915, -0.09439083, 0.029639505, 0.0782234, 0.07804141, 0.0008137855, -0.008142497, -0.044511657, 0.06732963, 0.05715973, 0.024996743, 0.062285684, 0.044630047},
   {0.07319446, -0.08084692, -0.06816595, 0.043666173, -0.030746501, -0.03244817, -0.080241196, -0.021991584, 0.04336072, 0.019658927, 0.021353483, -0.08119629, -0.05621934, 0.010835818, -0.03448342, -0.046840325, -0.055552382, -0.043197244, 0.044718347, -0.027937308, 0.034752004, -0.0362391, 0.020394083, 0.054973893, 0.015769996, -0.058881387, 0.06749581, -0.064759135, -0.048727088, 0.08691875, 0.042137526, 0.020388165, 0.028246619, -0.07351073, -0.03765853, -0.0040885285, 0.010069429, 0.07843273, 0.02579355, -0.043288242, 0.0027053836, -0.074468166, -0.05465502, 0.021317773, 0.07708385, -0.03591777, -0.012873764, -0.09631733, 0.071744144, -0.034406208, -0.008030618, -0.017981306, 0.016306343, -0.0474349, -0.09182913, -0.0028179751, 0.074675225, 0.012238694, 0.0675144, -0.018162014, -0.040912863, 0.04461927, 0.04004702, 0.032588474},
   {-0.07839707, -0.039543822, 0.046647605, 0.08656828, -0.04533557, 0.0051109996, 0.046631362, 0.06122157, -0.06567621, -0.07823315, -0.03482436, 0.07300184, -0.069024734, -0.043283887, 0.08581068, 0.06587816, 0.02330422, -0.03046316, 0.026577383, -0.0122127775, -0.027819041, -0.053297162, -0.06970843, 0.06371204, 0.004715344, -0.025785549, -0.10007367, -0.030439522, -0.0025551617, -0.061620075, -0.052822705, 0.0029424909, 0.062302627, 0.053995755, -0.06647675, 0.00382558, -0.03978982, -0.08040305, -0.09306885, 0.06847971, 0.0343947, 0.08033154, -0.033430506, -0.08427258, 0.10635493, -0.06246967, 0.08234101, -0.0969328, 0.04744901, 0.0556883, 0.058314774, -0.049947165, -0.02175397, 0.053585015, 0.01836276, -0.03767976, 0.05155719, -0.028714301, -0.022937685, 0.006160028, 0.100680925, -0.0624144, -0.032583784, 0.05403296}};


};
# 2 "matmul.cpp" 2


void float_to_fixed(float input[625], ap_fixed<32,24> output[625]) {
 VITIS_LOOP_5_1: for(int i = 0; i < 625; i++){
  output[i] = input[i];
 }
}
# 19 "matmul.cpp"
void hwmm_layer1(ap_fixed<32,24> input[625], const ap_fixed<32,24> weights[625][64], ap_fixed<32,24> output[1][64]) {

    col: for (int j = 0; j < 64; ++j) {

      ap_fixed<32,24> sum = 0;

      prod: for (int k = 0; k < 625; ++k){
#pragma HLS UNROLL factor=2
 sum += input[k] * weights[k][j];
      }
      output[0][j] = sum;
    }

  return;
}




void hwmm_layer2(ap_fixed<32,24> input[1][64], const ap_fixed<32,24> weights[64][32], ap_fixed<32,24> output[1][32]) {

    col: for (int j = 0; j < 32; ++j) {

      ap_fixed<32,24> sum = 0;

      prod: for (int k = 0; k < 64; ++k){

        sum += input[0][k] * weights[k][j];
      }
      output[0][j] = sum;
    }

  return;
}




void hwmm_layer3(ap_fixed<32,24> input[1][32], const ap_fixed<32,24> weights[32][2], ap_fixed<32,24> output[1][2]) {

    col: for (int j = 0; j < 2; ++j) {

      ap_fixed<32,24> sum = 0;

      prod: for (int k = 0; k < 32; ++k){

        sum += input[0][k] * weights[k][j];
      }
      output[0][j] = sum;
    }

  return;
}




void hw_act_layer1(ap_fixed<32,24> input[1][64], ap_fixed<32,24> output[1][64]){
 loop1: for (int i = 0; i < 64; i++){

  if (input[0][i] < 0.0)
   output[0][i] = 0.0;
  else
   output[0][i] = input[0][i];
 }

 return;
}




void hw_act_layer2(ap_fixed<32,24> input[1][32], ap_fixed<32,24> output[1][32]){
 loop1: for (int i = 0; i < 32; i++){

  if (input[0][i] < 0.0)
   output[0][i] = 0.0;
  else
   output[0][i] = input[0][i];
 }

 return;
}




void hw_act_layer3(ap_fixed<32,24> input[1][2], ap_fixed<32,24> &pred){
 ap_fixed<32,24> max_idx = -1;
 ap_fixed<32,24> max_val = -126;
 loop1: for (int i = 0; i < 2; i++){

  if (input[0][i] > max_val){
   max_idx = (ap_fixed<32,24>)i;
   max_val = input[0][i];
  }
 }
 pred = max_idx;
 return;
}





__attribute__((sdx_kernel("nn_inference", 0))) int nn_inference(float input_img[625]){_ssdm_SpecArrayDimSize(input_img, 625);
#pragma HLS TOP name=nn_inference
# 124 "matmul.cpp"

# 134 "matmul.cpp"
 ap_fixed<32,24> fp_input_img[625] = {1.0};
 float_to_fixed(input_img, fp_input_img);

 ap_fixed<32,24> temp_output[1][64] = {1};
 ap_fixed<32,24> temp_output2[1][32] = {1};
 ap_fixed<32,24> temp_output3[1][2] = {1};
 ap_fixed<32,24> prediction = -1;
 int prediction_int = -1;

 hwmm_layer1(fp_input_img, weights::layer1_weights, temp_output);
 hw_act_layer1(temp_output, temp_output);
 hwmm_layer2(temp_output, weights::layer2_weights, temp_output2);
 hw_act_layer2(temp_output2, temp_output2);
 hwmm_layer3(temp_output2, weights::layer3_weights, temp_output3);
 hw_act_layer3(temp_output3, prediction);

 prediction_int = prediction;

 return prediction_int;

}
